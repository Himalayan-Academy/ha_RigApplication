script "lib_LiveCodeDictionary"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_LiveCodeDictionary
type: script library
version: 0.2


--> Livecode | Dictionary
-
/*
These are handlers have been created to integrate with the > v8.0 Dictionary API.
*/

function ide_ListScriptLibraries
   put ide_LivecodeScriptFolder() into someFolder  
   put folder_ShortFiles (someFolder) into shortFiles
   return shortFiles
end ide_ListScriptLibraries

function ide_LivecodeScriptFolder
   put revEnvironmentToolsPath() & "/Toolset/libraries/" into someFolder
   return someFolder
end ide_LivecodeScriptFolder

function ide_GetDictionaryTerms
   /* 
   Note: this does not return abbreviations and synonyms.
   
   Fetch the data for all entries in the LiveCode script dictionary
   
   Returns:
   A numerically keyed array, each element of which is the array
   of data 
   pertaining to an entry in the LiveCode script dictionary.
   */
   local dictionaryTerms
   
   put ideDocsFetchLCSEntries() into scriptDictionaryArray
   
   -- some missing things from library (should get all synonyms)
   put "chars" & CR after dictionaryTerms
   
   _parseDictionary scriptDictionaryArray, dictionaryTerms, dicArray
   return dictionaryTerms
end ide_GetDictionaryTerms

private command _parseDictionary scriptDictionaryArray, @dictionaryTerms, @dicArray   
   repeat for each key indexNum in scriptDictionaryArray
      put scriptDictionaryArray [indexNum]["type"] into entryType 
      put scriptDictionaryArray [indexNum]["display name"] into dictionaryTerm
      if entryType is not among the items of "glossary,library" then
         put dictionaryTerm & CR after dictionaryTerms
      end if
      put indexNum into dicArray [entryType][dictionaryTerm]
   end repeat
   delete char -1 of dictionaryTerms
   sort dictionaryTerms
end _parseDictionary


--> Revolution | Dictionary
-
/*
These are older handlers for the pre-8.0 dictionary.
*/

command rev_ExportMessageNamesFromDictionary
   put rev_MessageTable() into messageTable
   opn_SetTable "rev_MessageTable", messageTable
   
   set the columndelimiter to tab
   split messageTable by column
   put messageTable [2] into scriptTokens
   sort scriptTokens
   
   opn_SetIndex "rev_Messages", scriptTokens
   return scriptTokens
end rev_ExportMessageNamesFromDictionary

command rev_ExportDocumentationTokensFromDictionary
   put rev_DocumentationTable() into documentationTable
   opn_SetTable "rev_DocumentationTable", documentationTable
   
   set the columndelimiter to tab
   split documentationTable by column
   put documentationTable [2] into scriptTokens
   sort scriptTokens
   opn_SetIndex "rev_DocumentationTokens", scriptTokens
   return scriptTokens
   
   -- alternatively
   put rev_DictionaryDataTableField() into fieldObject
   put the text of fieldObject into dictionaryTable
   split dictionaryTable by column
   return dictionaryTable [1]
end rev_ExportDocumentationTokensFromDictionary

function rev_DocumentationTokens
   -- should be spead up by using a global
   put opn_GetIndex ("rev_DocumentationTokens") into scriptTokens
   return scriptTokens
end rev_DocumentationTokens

function rev_DictionaryTerms
   switch
      case rev_VersionIsLaterOrEqual (8.0)
         put ide_GetDictionaryTerms() into dictionaryTerms
         return dictionaryTerms
      case rev_VersionIsLater (3.99)
         put revDocumentationDictionaryIndex() into dataArray
         repeat for each key indexNum in dataArray
            put dataArray [indexNum]["keyword"] into dictTerm
            put dictTerm & CR after dictionaryTerms
         end repeat
         delete char -1 of dictionaryTerms
         return dictionaryTerms
      default
         return empty
   end switch
end rev_DictionaryTerms

function rev_MessageNames
   put opn_GetIndex ("rev_Messages") into scriptTokens
   return scriptTokens
end rev_MessageNames

function rev_MessageTable
   put opn_GetTable ("rev_MessageTable") into messageTable
   return messageTable
end rev_MessageTable
   
function rev_DocumentationTable
   put revDocumentationDictionaryIndexPath() into theDictFile
   put url ("file:" & theDictFile) into dictionaryTable
   return dictionaryTable
end rev_DocumentationTable

function rev_FilterDocumentationTable documentationTable, tokenCategory, subCategory
    -- was "indexApplyFilter"
    -- this function is used for tree display filtering
     
    if subCategory is "all" then
        return documentationTable
    end if
     
    local tFilteredData
    switch tokenCategory 
        case "Library"
            -- the library is column 10 in the data
            set the itemdelimiter to tab
            repeat for each line someLine in documentationTable
                if item 10 of someLine is subCategory then
                    put someLine & CR after tFilteredData
                end if
            end repeat
            break
        case "Object"
            local tColumnNumbers
             
            -- If we don't want to change the index format, to do this we need to 
            -- find out which column the string <img src="20133"/> appears in, and then
            -- this column number can be mapped to the type of object. If it doesnt match
            -- then the keyword is not associated with any given object.
            repeat for each line someLine in documentationTable
                --local tColumnNumbers
                put itemsEquallingString(someLine, "<img src=" & quote & "201233" & quote & "/>") into tColumnNumbers
                 
                repeat for each item tColumnNumber in tColumnNumbers
                    if columnNumberToObjectName(tColumnNumber) is subCategory then
                        put someLine & CR after tFilteredData
                    end if
                end repeat
            end repeat
            break
        case "Language"
            -- column 3 has to equal subCategory
            set the itemdelimiter to tab
            repeat for each line someLine in documentationTable
                if item 3 of someLine is subCategory then
                    put someLine & CR after tFilteredData
                end if
            end repeat
            break
        case ""
            -- Object header, all keywords that are associated with any object
            if subCategory is "Object Category" then
                -- all objects, any line that contains <img src="20133"/>
                set the itemdelimiter to tab
                repeat for each line someLine in documentationTable
                    put itemsEquallingString(someLine, "<img src=" & quote & "201233" & quote & "/>") into tColumnNumbers
                    if tColumnNumbers is not empty then
                        put someLine & CR after tFilteredData
                    end if
                end repeat
            end if
             
            if subCategory is "Library Category" then
                set the itemdelimiter to tab
                repeat for each line someLine in documentationTable
                    if item 10 of someLine is not empty then
                        put someLine & CR after tFilteredData
                    end if
                end repeat
            end if
             
            if subCategory is "Language Category" then
                return documentationTable
            end if
    end switch
     
    delete the last char of tFilteredData
    return tFilteredData
end rev_FilterDocumentationTable

command rev_LookUpDictionary someText
    /*
    # Parameters
    #   pTag : the filename of the xml file that contains the entry to display
    #   pType : the type of the entry, eg "command"
    #   pFolder : either "dictionary" or "glossary"
    #   pDontUpdateHistory : if this is true, the entry will not be added to the history
    # Description
    #   Called when the user double-clicks in the dictionary grid / list. This displays the required dictionary
    #   entry fullscreen on a separate card.
     
    entryGoto pTag, pType, pFolder, false
    */
     
    -- version 3.0
    revDocumentationGo someText
end rev_LookUpDictionary
