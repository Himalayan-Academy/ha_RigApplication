<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2016, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# revIgniter Authentication Library
# based on Ion Auth for CodeIgniter by Ben Edmunds, ben.edmunds@gmail.com
# http://github.com/benedmunds/CodeIgniter-Ion-Auth
#
# @package		revIgniter
# @subpackage	Libraries
# @category	  Authentication
# @author		  rabit@revigniter.com
# @link		    http://revigniter.com/userGuide/libraries/authentication.html
##

## ------------------------------------------------------------------------



#LOGGING
rigLogMessage "debug", "Authentication Library Loaded"

# DECLARE VARIABLES
local sAuth																																										--  array containing all config values, see authentication.lc
local sAuthMessages, sAuthErrors, sActivationCode, sAuthForgottenPasswordCode									--  misc
local sAuthHooks, sAuthHooksEnabled, sAuthHookInProgress, sAuthHooksHandlers, sAuthHooksFiles		-- "hooks" variables
local sAuthSelect, sAuthWhere, sAuthLike, sAuthLimit, sAuthOffset, sAuthOrderBy, sAuthOrder			--  database related
local sAuthQuery, sAuthFieldnames, sAuthUser



# AUTOMATICALLY LOAD LIBS / HELPERS / LANGUAGE FILES
rigLoadHelper "cookie"
rigLoaderLoadLibrary "Encrypt"
rigLoaderLoadLibrary "Session"
rigLoaderLoadLibrary "Email"
get rigLoadDatabase(, TRUE, TRUE)
get rigLangLoadLang("authentication")





/*----------------------------------------------------------------------
--| COMMAND rigRunInitialAuthenticationConfig
--|
--| Author: rabit
--| Version:  1.1
--| Created: 07-09-12
--| Last Mod: 22-12-14
--| Requires: rigNumToCodepoint(), rigInitializeAuthentication
--|
--| Summary: Run initial configuration procedures. Don't remove, even if it does nothing!
--| 
--| Format:  rigRunInitialAuthenticationConfig param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigRunInitialAuthenticationConfig pConfig
	put pConfig into tConfig

	if tConfig is not an array then
		if tConfig is not empty then
			split tConfig using rigNumToCodepoint(1) and rigNumToCodepoint(2)
		end if
	end if

	if tConfig is an array then

		rigInitializeAuthentication tConfig
	end if
end rigRunInitialAuthenticationConfig





/*----------------------------------------------------------------------
--| COMMAND rigInitializeAuthentication
--|
--| Author: rabit
--| Version:  1.0
--| Created: 07-09-2012
--| Last Mod: 07-09-2012
--| Requires: rigSetInitialAuthenticationValue, rigGetCookie(),
--|           _rigAuthLoginRememberedUser(), rigInitializeMail, _rigAuthCallHook()
--|
--| Summary: Initialize preferences.
--| 
--| Format:  rigInitializeAuthentication param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigInitializeAuthentication pConfig
	if pConfig is an array then
		repeat for each key tKey in pConfig

			put pConfig[tKey] into tVal

			rigSetInitialAuthenticationValue tKey, tVal

		end repeat
	end if
	
	# AUTO-LOGIN USER PROVIDED THE USER IS REMEMBERED
	put rigGetCookie("identity") into tIdentity
	put rigGetCookie("rememberCode") into tRememberCode
	if (rigAuthLoggedIn() is FALSE) and (tIdentity <> FALSE) and (tRememberCode <> FALSE) then
		get _rigAuthLoginRememberedUser(tIdentity, tRememberCode)
	end if
	
	# MAIL CONFIGURATION
	if sAuth["emailConfig"] is an array then
		rigInitializeMail sAuth["emailConfig"]
	end if
	
	# INITIALIZE THE AUTHENTICATION HOOKS PREFERENCES
	_rigInitAuthHooksPrefs
	
	get _rigAuthCallHook("authLibraryInitialized")
end rigInitializeAuthentication






/*----------------------------------------------------------------------
--| COMMAND rigSetInitialAuthenticationValue
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-09-2012
--| Last Mod: 10-09-2012
--| Requires: rigLogMessage
--|
--| Summary: Set initial values.
--| 
--| Format:  rigSetInitialAuthenticationValue param1, param2
--|
--| Parameters: string <pVarName>, mixed <pValue>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetInitialAuthenticationValue pVarName pValue
		switch pVarName
		case "tables"
			if pValue is an array then
				put pValue into sAuth["tables"]
			else
				rigLogMessage "error", "Authentication tables settings must be an array!"
			end if
        		
		break
		case "join"
			if pValue is an array then
				put pValue into sAuth["join"]
			else
				rigLogMessage "error", "Authentication join settings must be an array!"
			end if
        		
		break
		case "emailConfig"
			if pValue is an array then
				put pValue into sAuth["emailConfig"]
			else
				rigLogMessage "error", "Authentication emailConfig settings must be an array!"
			end if
        		
		break
		
		default
			put pValue into sAuth[pVarName]
   end switch
	
end rigSetInitialAuthenticationValue





/*----------------------------------------------------------------------
--| FUNCTION rigAuthActivate
--|
--| Author: rabit
--| Version:  1.0
--| Created: 14-10-2012
--| Last Mod: 14-10-2012
--| Requires: _rigAuthCallHook(), rigDBselect, rigDbWhere, rigDbLimit, rigDbGet(),
--|          rigDbRow(), rigAuthSetError, rigDbUpdate()
--|
--| Summary: User activation. Validate and remove activation code.
--| 
--| Format:  rigAuthActivate(param1, param2)
--|
--| Parameters: integer <pID>, string <pCode>
--|
--| Return: empty
----------------------------------------------------------------------*/

function rigAuthActivate pID pCode
	get _rigAuthCallHook("authPreActivate")
	
	if pCode is empty then
		put False into tCode
	else
		put pCode into tCode
	end if
	
	if tCode <> FALSE then
		rigDBselect sAuth["identityColumn"]
		rigDbWhere "activationCode", pCode
		rigDbLimit 1
		put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
		
		if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
			put rigDbRow() into sAuthUser
			put sAuthUser into tUser
			
		else
			get _rigAuthCallHook("authPostActivate")
			get _rigAuthCallHook("authPostActivateUnsuccessful")
			rigAuthSetError "activateUnsuccessful"
			return FALSE
		end if
		
		put tUser[sAuth["identityColumn"]] into tIdentity 
		
		put empty into tData["activationCode"]
		put 1 into tData["active"]
		
		get _rigAuthCallHook("authExtraWhere")

 		rigDbWhere sAuth["identityColumn"], tIdentity
		get rigDbUpdate(sAuth["tables"]["users"], tData)
		
	else
		put empty into tData["activationCode"]
		put 1 into tData["active"]
		
		get _rigAuthCallHook("authExtraWhere")
		
		get rigDbUpdate(sAuth["tables"]["users"], tData, "id =" && pID)		
	end if
	
	if rigDbAffectedRows() is 1 then
			get _rigAuthCallHook("authPostActivate")
			get _rigAuthCallHook("authPostActivateSuccessful")
			rigAuthSetMessage "activateSuccessful"
			return TRUE
	else
			get _rigAuthCallHook("authPostActivate")
			get _rigAuthCallHook("authPostActivateUnsuccessful")
			rigAuthSetError "activateUnsuccessful"
	end if
	
	return FALSE
end rigAuthActivate






/*----------------------------------------------------------------------
--| FUNCTION rigAuthDeactivate
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-02-2013
--| Last Mod: 11-02-2013
--| Requires: _rigAuthCallHook(), rigAuthSetError, rigHexDigest(), rigDbWhere, rigDbUpdate()
--|           rigDbAffectedRows(), rigAuthSetMessage, rigAuthSetError
--|
--| Summary: Deactivate user.
--| 
--| Format:  rigAuthDeactivate(param1)
--|
--| Parameters: integer <pID>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthDeactivate pID
	get _rigAuthCallHook("authDeactivate")
	
	if pID is empty then
		rigAuthSetError "deactivateUnsuccessful"

		return FALSE
	end if
	
	put rigHexDigest(sha1Digest(the long seconds)) into sActivationCode
	
	put sActivationCode into tActivationData["activationCode"]
	put 0 into tActivationData["active"]
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbWhere "id", pID
	get rigDbUpdate(sAuth["tables"]["users"], tActivationData)
	
	put rigDbAffectedRows() into tAffectedRows
	if tAffectedRows is 1 then
		rigAuthSetMessage "deactivateSuccessful"
		
		return TRUE
	else
		rigAuthSetError "deactivateUnsuccessful"
	end if
	
	return FALSE
end rigAuthDeactivate






/*----------------------------------------------------------------------
--| FUNCTION rigAuthLoggedIn
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-09-2012
--| Last Mod: 11-09-2012
--| Requires: _rigAuthCallHook(), rigSessUserdata()
--|
--| Summary: Check logged in state. Returns FALSE if
--|          session data item identity is empty.
--| 
--| Format:  rigAuthLoggedIn()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthLoggedIn
	get _rigAuthCallHook("authCheckLoggedIn")

	if rigSessUserdata(sAuth["identityColumn"]) is not FALSE then
		return TRUE
	end if
	
	return FALSE
end rigAuthLoggedIn






/*----------------------------------------------------------------------
--| FUNCTION rigAuthIsAdmin
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-09-2012
--| Last Mod: 11-09-2012
--| Requires: _rigAuthCallHook()
--|
--| Summary: Check if user is admin.
--| 
--| Format:  rigAuthIsAdmin(param1)
--|
--| Parameters: string <pID> (optional)
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthIsAdmin pID
	get _rigAuthCallHook("authIsAdmin")
	
	return rigAuthInGroup(sAuth["defaultAdminGroup"], pID)
end rigAuthIsAdmin





/*----------------------------------------------------------------------
--| FUNCTION rigAuthInGroup
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-09-2012
--| Last Mod: 13-09-2012
--| Requires: _rigAuthCallHook(), rigAuthUserGroups(), rigInArray()
--|
--| Summary: Check if user is a member of a specific group.
--| 
--| Format:  rigAuthInGroup(param1, param2)
--|
--| Parameters: mixed <pGroup>, integer <pID> (optional)
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthInGroup pGroup pID
	get _rigAuthCallHook("authInGroup")
	
	put rigAuthUserGroups(pID) into tUserGroups
	
	# RETURN FALSE IF QUERY RETURNED FALSE OTHERWISE STORE VALUES IN ARRAYS
	if tUserGroups <> FALSE then
		put 0 into tIncr
		repeat for each key tKey in tUserGroups
			add 1 to tIncr
			
			put tUserGroups[tIncr] into tRow
			# GET IDs AND NAMEs
			put tRow[1] into tGroupsByID[tIncr]
			put tRow[2] into tGroupsByName[tIncr]
		end repeat
		
	else
		return FALSE
	end if
	
	if pGroup is an array then
		repeat for each key tKey in pGroup
			put pGroup[tKey] into tVal
			
			# DETERMINE WHICH ARRAY SHOULD BE USED FOR CHECKING
			if tVal is an integer then
				put tGroupsByID into tGroups
			else
				put tGroupsByName into tGroups
			end if
			
			if rigInArray(tGroups, tVal) is TRUE then
				return TRUE
			end if
			
		end repeat
		
	else
		
		# DETERMINE WHICH ARRAY SHOULD BE USED FOR CHECKING
		if pGroup is an integer then
				put tGroupsByID into tGroups
			else
				put tGroupsByName into tGroups
		end if
		
		if rigInArray(tGroups, pGroup) is TRUE then
			return TRUE
		end if
	end if
	
	return FALSE
end rigAuthInGroup





/*----------------------------------------------------------------------
--| COMMAND rigAuthSetMessage
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-12-2012
--| Last Mod: 31-12-2012
--| Requires: --
--|
--| Summary: Add a message to sAuthMessages.
--| 
--| Format:  rigAuthSetMessage param1
--|
--| Parameters: string <pMessage>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthSetMessage pMessage
	put (the number of lines in the keys of sAuthMessages) + 1 into tMessageNum
	put pMessage into sAuthMessages[tMessageNum]
end rigAuthSetMessage






/*----------------------------------------------------------------------
--| FUNCTION rigAuthMessages
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-09-2012
--| Last Mod: 11-09-2012
--| Requires: rigLangLangLine()
--|
--| Summary: Return authentication messages.
--| 
--| Format:  rigAuthMessages(param1, param2)
--|
--| Parameters: string <pPrefix> (optional), string <pSuffix> (optional)
--|
--| Return: string
----------------------------------------------------------------------*/

function rigAuthMessages pPrefix pSuffix
	if pPrefix is empty then
		put sAuth["messagePrefix"] into pPrefix
	end if

	if pSuffix is empty then
		put sAuth["messageSuffix"] into pSuffix
	end if
	
	put "" into tMessagesOut
	
	repeat for each key tKey in sAuthMessages
		put sAuthMessages[tKey] into tMessage
		
		# CHECK IF MESSAGE IS IN LANGUAGE FILE
		put rigLangLangLine(tMessage) into tLangMessage
		if tLangMessage is FALSE then
			put "--" & tMessage & "--" into tLangMessage
		end if
		
		put pPrefix & tLangMessage & pSuffix after tMessagesOut
	end repeat
	
	return tMessagesOut
end rigAuthMessages







/*----------------------------------------------------------------------
--| FUNCTION rigAuthUsers
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-09-2012
--| Last Mod: 12-09-2012
--| Requires: _rigAuthCallHook(), _rigStrToArray(), rigDbSelect, rigDbDistinct, rigDbJoin,
--|           rigDbWhereIn, rigDbWhere, rigDbOrLike, rigDbLimit, rigDbOrderBy, rigDbGet()
--|
--| Summary: Get the users.
--| 
--| Format:  rigAuthUsers(param1)
--|
--| Parameters: mixed <pGroupIDs> (optional)
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthUsers pGroupIDs
	get _rigAuthCallHook("authUsers")
	
	put pGroupIDs into tGroupsIDs
	
	# MAKE SURE pGroupIDs IS AN ARRAY
	if tGroupsIDs is not an array then
		if tGroupsIDs is not empty then
			put _rigStrToArray(pGroupIDs) into tGroupsIDs
		end if
	end if
	
	# DEFAULT SELECTS
	rigDbSelect "*," && sAuth["tables"]["users"] & ".id AS id," && sAuth["tables"]["users"] & ".id AS userID"
	
	# SELECTS STORED IN sAuthSelect
	if sAuthSelect is an array then	
		repeat for each key tKey in sAuthSelect
			put sAuthSelect[tKey] into tVal
			rigDbSelect tVal
		end repeat
		
		put empty into sAuthSelect
	end if
	
	# FILTER RESULT BY GROUP IDs
	if tGroupsIDs is an array then
		# JOIN AND THEN RUN A rigDbWhereIn AGAINST THE GROUP IDs
		rigDbDistinct
		rigDbJoin sAuth["tables"]["usersGroups"], sAuth["tables"]["usersGroups"] & ".userId =" && sAuth["tables"]["users"] & ".id", "inner"
		
		rigDbWhereIn sAuth["tables"]["usersGroups"] & ".groupId", tGroupsIDs
	end if
	
	get _rigAuthCallHook("authExtraWhere")
	
	# RUN EACH WHERE OF sAuthWhere
	if sAuthWhere is an array then
		rigDbWhere sAuthWhere		
		put empty into sAuthWhere
	end if
	
	# RUN EACH LIKE OF sAuthLike
	if sAuthLike is an array then
		rigDbOrLike sAuthLike
		
		put empty into sAuthLike
	end if
	
	# CHECK LIMIT AND OFFSET
	if (sAuthLimit <> "") and (sAuthOffset <> "") then
		rigDbLimit sAuthLimit, sAuthOffset
		put "" into sAuthLimit
		put "" into sAuthOffset
	else if sAuthLimit <> "" then
		rigDbLimit sAuthLimit
		put "" into sAuthLimit
	end if
	
	# SET ORDER
	if (sAuthOrderBy <> "") and (sAuthOrder <> "") then
		rigDbOrderBy sAuthOrderBy, sAuthOrder
		put "" into sAuthOrderBy
		put "" into sAuthOrder
	end if
	
	# RUN THE QUERY AND RETURN THE RESULT
	put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
	
	if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] > 0) then
		put sAuthQuery["fieldnames"] into sAuthFieldnames
		return sAuthQuery["resultarray"]
	else
		put FALSE into sAuthQuery
	end if
	
	return FALSE
end rigAuthUsers






/*----------------------------------------------------------------------
--| FUNCTION rigAuthUser
--|
--| Author: rabit
--| Version:  1.0
--| Created: 17-02-2013
--| Last Mod: 17-02-2013
--| Requires: _rigAuthCallHook(), rigSessUserdata(), rigDbLimit, rigAuthWhere,
--|           rigAuthUsers()
--|
--| Summary: Get a particular user.
--| 
--| Format:  rigAuthUser(param1)
--|
--| Parameters: integer <pID> (optional)
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthUser pID
	get _rigAuthCallHook("authUser")

	# USE ID OF CURRENT USER IF pID IS EMPTY
	if pID is empty then
		put rigSessUserdata("userID") into tID
	else
		put pID into tID
	end if
	
	rigDbLimit 1
	rigAuthWhere sAuth["tables"]["users"] & ".id", tID
	
	return rigAuthUsers()
end rigAuthUser








/*----------------------------------------------------------------------
--| FUNCTION rigAuthUserGroups
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-09-2012
--| Last Mod: 12-09-2012
--| Requires: _rigAuthCallHook(), rigSessUserdata(), rigDbSelect, rigDbWhere,
--|          rigDbJoin, rigDbGet()
--|
--| Summary: Get groups of a specific user.
--| 
--| Format:  rigAuthUserGroups(param1)
--|
--| Parameters: integer <pID>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthUserGroups pID
	get _rigAuthCallHook("authUserGroups")
	
	# USE ID OF CURRENT USER IF pID IS EMPTY
	if pID is empty then
		put rigSessUserdata("userID") into tID
	else
		put pID into tID
	end if
	
	rigDbSelect sAuth["tables"]["usersGroups"] & "." & sAuth["join"]["groups"] && "as id," && sAuth["tables"]["groups"] & ".name," && sAuth["tables"]["groups"] & ".description"
	rigDbWhere sAuth["tables"]["usersGroups"] & "." & sAuth["join"]["users"], tID
	rigDbJoin sAuth["tables"]["groups"], sAuth["tables"]["usersGroups"] & "." & sAuth["join"]["groups"] && "=" && sAuth["tables"]["groups"] & ".id"
	
	put rigDbGet(sAuth["tables"]["usersGroups"]) into tQuery
	
	if tQuery <> FALSE then
		return tQuery["resultarray"]
	end if
	
	return FALSE
end rigAuthUserGroups





/*----------------------------------------------------------------------
--| FUNCTION rigAuthLogin
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-10-2012
--| Last Mod: 10-10-2012
--| Requires: _rigAuthCallHook(), rigAuthSetError, rigDbSelect, rigDbWhere,
--|           rigDbLimit, rigDbGet(), rigDbRow(), rigAuthValidatePassword(),
--|           rigAuthUpdateLastLogin(), rigAuthSetMessage, rigAuthClearLoginAttempts(), 
--|           rigSetSessUserdata, rigAuthRememberUser(), rigAuthIncreaseLoginAttempts()
--|
--| Summary: User login.
--| 
--| Format:  rigAuthLogin(param1, param2, param3)
--|
--| Parameters: string <pIdentity>, string <pPassword>, bool <pRemember>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthLogin pIdentity pPassword pRemember
	if pRemember is empty then
		put FALSE into tRemember
	else
		put pRemember into tRemember
	end if
	
	if (pIdentity is empty) or (pPassword is empty) then
		rigAuthSetError "loginUnsuccessful"
		return FALSE
	end if

	get _rigAuthCallHook("authExtraWhere")
	
	rigDbSelect sAuth["identityColumn"] & ", username, email, id, password, active, lastLogin"
	rigDbWhere sAuth["identityColumn"], pIdentity
	rigDbLimit 1
	put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
		
	if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
		put rigDbRow(1) into sAuthUser
		put sAuthUser into tUser

		# VALIDATE PASSWORD AGAINST ENTRY IN USERS TABLE
		put rigAuthValidatePassword(tUser["id"], pPassword) into tPasswordValid
		
		if tPasswordValid is TRUE then
			if tUser["active"] is 0 then
				
				get _rigAuthCallHook("authPostLoginUnsuccessful")
				rigAuthSetError "loginUnsuccessfulNotActive"
				return FALSE
			end if
			
			get rigAuthUpdateLastLogin(tUser["id"])
			get rigAuthClearLoginAttempts(pIdentity)
			
			# SET SESSION DATA
			put tUser[sAuth["identityColumn"]] into tSessionData["identity"]
			put tUser["username"] into tSessionData["username"]
			-- put "testerchen" into tSessionData["test"] ------------------------------------------------------ OK
			-- put "testerchen" into tSessionData["username"] ------------------------------------- OK
			-- put "admin" into tSessionData["username"] ------------------------------------- OK
			-- put "blabla" into tSessionData["test"] ---------------------------------- OK
			-- put "administrator" into tSessionData["test"] ---------------------------------- failure
			put tUser["email"] into tSessionData["email"]
			put tUser["id"] into tSessionData["userID"]
			put tUser["lastLogin"] into tSessionData["oldLastLogin"]

			rigSetSessUserdata tSessionData
			
			if (tRemember is TRUE) and (sAuth["rememberUsers"] is TRUE) then
				get rigAuthRememberUser(tUser)
			end if
					
			get _rigAuthCallHook("authPostLogin")
			get _rigAuthCallHook("authPostLoginSuccessful")

			rigAuthSetMessage "loginSuccessful"
			
			return TRUE
		end if -- if tPasswordValid is TRUE then

	end if -- if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
		
	get rigAuthIncreaseLoginAttempts(pIdentity)

	get _rigAuthCallHook("authPostLoginUnsuccessful")
	
	rigAuthSetError "loginUnsuccessful"
	
	return FALSE
end rigAuthLogin





/*----------------------------------------------------------------------
--| COMMAND rigAuthLogout
--|
--| Author: rabit
--| Version:  1.0
--| Created: 08-02-2013
--| Last Mod: 08-02-2013
--| Requires: _rigAuthCallHook(), rigUnsetSessUserdata, rigGetCookie(), rigDeleteCookie
--|           rigSessDestroy, rigSessCreate, rigAuthSetMessage
--|
--| Summary: User logout.
--| 
--| Format:  rigAuthLogout
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthLogout
	get _rigAuthCallHook("authLogout")

	# REMOVE SESSION DATA
	put "" into tSessionItems[sAuth["identityColumn"]]
	put "" into tSessionItems["username"]
	put "" into tSessionItems["userID"]
	rigUnsetSessUserdata tSessionItems
	
	# DELETE REMEMBER ME COOKIES
	if rigGetCookie("identity") <> FALSE then
		rigDeleteCookie "identity"
	end if
	if rigGetCookie("rememberCode") <> FALSE then
		rigDeleteCookie "rememberCode"
	end if
	
	# RECREATE THE SESSION
	rigSessDestroy
	rigSessCreate
	
	rigAuthSetMessage "logoutSuccessful"
end rigAuthLogout





/*----------------------------------------------------------------------
--| FUNCTION rigAuthRegister
--|
--| Author: rabit
--| Version:  1.3
--| Created: 08-02-2013
--| Last Mod: 21-03-2014
--| Requires: _rigAuthCallHook(), _rigAuthRegisterUser(), rigAuthSetMessage, rigAuthSetError,
--|           rigDbWhere, rigDbGet(), rigDbRow(), rigAnchor(), rigLoadView(), rigClearMail,
--|           rigMailFrom, rigMailTo, rigMailSubject, rigMailMessage, rigMailSend()
--|
--| Summary: Register new user.
--| 
--| Format:  rigAuthRegister(param1, param2, param3, param4, param5)
--|
--| Parameters: string <pUsername>, string <pPassword>, string <pEmail>
--|             array <pExtraData>, array <pGroupname>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthRegister pUsername pPassword pEmail pExtraData pGroupname
	get _rigAuthCallHook("authPreAccountCreation")
	
	if sAuth["emailActivation"] is FALSE then
		put _rigAuthRegisterUser(pUsername, pPassword, pEmail, pExtraData, pGroupname) into tID
	
		if tID <> FALSE then
			rigAuthSetMessage "accountCreationSuccess"
			get _rigAuthCallHook("authPostAccountCreation")
			get _rigAuthCallHook("authPostAccountCreationSuccessful")
			
			return tID
		else			
			rigAuthSetError "accountCreationUnsuccessful"
			get _rigAuthCallHook("authPostAccountCreation")
			get _rigAuthCallHook("authPostAccountCreationUnsuccessful")
			
			return FALSE
		end if
		
		
	else --if sAuth["emailActivation"] is FALSE then
		put _rigAuthRegisterUser(pUsername, pPassword, pEmail, pExtraData, pGroupname) into tID
		
		if tID is FALSE then
			rigAuthSetError "accountCreationUnsuccessful"
			return FALSE
		end if
		
		put rigAuthDeactivate(tID) into tDeactivate
		
		if tDeactivate is FALSE then
			rigAuthSetError "deactivateUnsuccessful"
			get _rigAuthCallHook("authPostAccountCreation")
			get _rigAuthCallHook("authPostAccountCreationUnsuccessful")
			
			return FALSE
		end if
		
		# GET THE USER
		rigDbWhere "id", tID
		put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery

		if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
			put rigDbRow() into sAuthUser
			put sAuthUser into tUser
		else
			rigAuthSetError "accountCreationUnsuccessful"
			return FALSE
		end if
		
		# REGISTRATION DATA
		put tUser[sAuth["identityColumn"]] into tRegData["identity"]
		put tUser["id"] into tRegData["id"]
		put pEmail into tRegData["email"]
		put sActivationCode into tRegData["activationCode"]
		
		put tUser[sAuth["identityColumn"]] into gData["identity"]
		
		# BUILD LINK FOR ACTIVATION
		If pExtraData["activationLink"] is empty then
			put "auth/activate/" into pExtraData["activationLink"]
			else if char -1 of pExtraData["activationLink"] <> "/" then
				put pExtraData["activationLink"] & "/" into pExtraData["activationLink"]
		end if
		put rigAnchor(pExtraData["activationLink"] & tID & "/" & sActivationCode & "/", rigLangLangLine("activationLinkText")) into gData["activationCode"]
		put empty into sActivationCode
		
		if sAuth["sendEmails"] is FALSE then
			get _rigAuthCallHook("authPostAccountCreation")
			get _rigAuthCallHook("authPostAccountCreationSuccessful")
			get _rigAuthCallHook("authPActivationEmailSuccessful")
			rigAuthSetMessage "activationEmailSuccessful"
			
			return tRegData
		else
			# GET PATH TO EMAIL ACTIVATION TEMPLATE
			if sAuth["pathToEmailTemplates"] is empty then
				put "emailTemplates/" & sAuth["emailActivate"] into tEmailTemplate
			else
				if char -1 of sAuth["pathToEmailTemplates"] <> "/" then
					put sAuth["pathToEmailTemplates"] & "/" into tAuthPathToEmailTemplates
				else
					put sAuth["pathToEmailTemplates"] into tAuthPathToEmailTemplates
				end if
				
				put tAuthPathToEmailTemplates & sAuth["emailActivate"] into tEmailTemplate
			end if			
			
			# MERGE EMAIL ACTIVATION TEMPLATE
			put rigLoadView(tEmailTemplate, TRUE) into tMessage
			put merge(tMessage) into tMessage
			
			rigClearMail
			rigMailFrom sAuth["adminEmail"], sAuth["siteTitle"]
			rigMailTo pEmail
			rigMailSubject sAuth["siteTitle"] && "-" && rigLangLangLine("emailActivationSubject")
			rigMailMessage tMessage
		
			if rigMailSend() is TRUE then
				get _rigAuthCallHook("authPostAccountCreation")
				get _rigAuthCallHook("authPostAccountCreationSuccessful")
				get _rigAuthCallHook("authPActivationEmailSuccessful")
				rigAuthSetMessage "activationEmailSuccessful"
				
				return tUser["id"]
			end if
		end if -- if sAuth["sendEmails"] is FALSE then
		
		get _rigAuthCallHook("authPostAccountCreation")
		get _rigAuthCallHook("authPostAccountCreationUnsuccessful")
		get _rigAuthCallHook("authPActivationEmailUnsuccessful")
		rigAuthSetError "activationEmailUnsuccessful"
		
		return FALSE
	end if -- if sAuth["emailActivation"] is FALSE then
	
end rigAuthRegister





/*----------------------------------------------------------------------
--| FUNCTION _rigAuthRegisterUser
--|
--| Author: rabit
--| Version:  1.3
--| Created: 08-02-2013
--| Last Mod: 12-09-2015
--| Requires: _rigAuthCallHook(), rigAuthEmailCheck(), rigAuthSetError, rigAuthUsernameCheck(),
--|            rigAuthEncryptPassword(), rigIpAddress(), rigMasterNow(), _rigAuthFilteredData(), rigNumToCodepoint(),
--|            rigDbInsert(), rigAuthWhere, rigAuthUsers(), rigDbRow(), rigAuthAddToGroup, rigAuthGroups()
--|
--| Summary: Register new user.
--| 
--| Format:  _rigAuthRegisterUser(param1, param2, param3, param4, param5)
--|
--| Parameters: string <pUsername>, string <pPassword>, string <pEmail>
--|             array <pExtraData>, array <pGroups>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function _rigAuthRegisterUser pUsername pPassword pEmail pExtraData pGroups
	get _rigAuthCallHook("authPreRegister")
	
	if (sAuth["identityColumn"] is "email") and (rigAuthEmailCheck(pEmail) is TRUE) then
		# EMAIL ALREADY USED OR INVALID
		rigAuthSetError "accountCreationDuplicateInvalidEmail"
		return FALSE
		
	else if (sAuth["identityColumn"] is "username") and (rigAuthUsernameCheck(pUsername) is TRUE) then
		# USERNAME ALREADY USED OR INVALID
		rigAuthSetError "accountCreationDuplicateInvalidUsername"
		return FALSE
	end if
	
	# IF USERNAME ALREADY EXISTS ADD A NUMBER LIKE USERNAME1, USERNAME2 ETC.
	if sAuth["identityColumn"] <> "username" then
		put pUsername into tOriginalUsername
		put TRUE into tUsernameExists
		
		put 1 into tUserNumber
		repeat until tUsernameExists is FALSE
			if rigAuthUsernameCheck(pUsername) is TRUE then
				put tOriginalUsername & tUserNumber into pUsername
				add 1 to tUserNumber
			else
				put FALSE into tUsernameExists
			end if		
		end repeat
	end if
	
	# ENCRYPT PASSWORD
	put rigAuthEncryptPassword(pPassword) into pPassword
	
	# USER DATA
	put pUsername into tData["username"]
	put pPassword into tData["password"]
	put pEmail into tData["email"]
	put rigIpAddress() into tData["ipAddress"]
	put rigMasterNow() into tData["createdOn"]
	put rigMasterNow() into tData["lastLogin"]
	if sAuth["manualActivation"] is FALSE then
		put 1 into tData["active"]
	else
		put 0 into tData["active"]
	end if
	
	if pExtraData is an array then
		# FILTER OUT DATA THAT DOESN'T HAVE A MATCHING FIELD IN THE USERS TABLE
		put _rigAuthFilteredData(sAuth["tables"]["users"], pExtraData) into tFilteredData
	
		# MERGE FILTERED EXTRA DATA WITH tData
		if tFilteredData is an array then
			put rigNumToCodepoint(1) into tFirstDelim
			put rigNumToCodepoint(2) into tSecondDelim
			combine tData using tFirstDelim and tSecondDelim
			combine tFilteredData using tFirstDelim and tSecondDelim
			
			put tFirstDelim & tFilteredData after tData
			split tData using tFirstDelim and tSecondDelim
		end if
	end if
	
	get _rigAuthCallHook("authExtraSet")

	# INSERT USER DATA AND GET ID OF LAST INSERT
	put rigDbInsert(sAuth["tables"]["users"], tData, TRUE) into tUserID
	
	# ADD USER ID TO TABLE users_groups
	if tUserID <> FALSE then
		if pGroups is an array then
			repeat for each key tKey in pGroups
				rigAuthAddToGroup pGroups[tKey], tUserID
			end repeat
		end if
	
		# GET ID OF DEFAULT GROUP
		rigAuthWhere "name", sAuth["defaultGroup"]
		put 1 into sAuthLimit
		get rigAuthGroups()
		if sAuthQuery <> FALSE then
			put rigDbRow() into tGroupRow
			put tGroupRow["id"] into tGroupID
		else
			put empty into tGroupID
		end if
	
		# ADD USER TO DEFAULT GROUP IF NOT SET ALREADY
		if ((tGroupID <> empty) and (pGroups is not an array)) or ((pGroups is an array) and (tGroupID is not among the keys of pGroups)) then
			rigAuthAddToGroup tGroupID, tUserID
		end if
	
		get _rigAuthCallHook("authPostRegister")
	
		return tUserID
	end if
	
	return FALSE
end _rigAuthRegisterUser







/*----------------------------------------------------------------------
--| FUNCTION rigAuthUpdateLastLogin
--|
--| Author: rabit
--| Version:  1.0
--| Created: 30-12-2012
--| Last Mod: 30-12-2012
--| Requires: _rigAuthCallHook(), rigLoadHelper, rigMasterNow(), rigDbWhere,
--|           rigDbUpdate(), rigDbAffectedRows()
--|
--| Summary: Update date of last user login.
--| 
--| Format:  rigAuthUpdateLastLogin(param1)
--|
--| Parameters: integer <pID>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthUpdateLastLogin pID
	get _rigAuthCallHook("authUpdateLastLogin")
	
	get _rigAuthCallHook("authExtraWhere")
	
	put rigMasterNow() into tData["lastLogin"]

	rigDbWhere "id", pID
	get rigDbUpdate(sAuth["tables"]["users"], tData)
	
	if rigDbAffectedRows() <> FALSE then
		return TRUE
	end if
	
	return FALSE
end rigAuthUpdateLastLogin





/*----------------------------------------------------------------------
--| FUNCTION rigAuthClearLoginAttempts
--|
--| Author: rabit
--| Version:  1.0
--| Created: 30-12-2012
--| Last Mod: 30-12-2012
--| Requires: rigIpAddress(), rigLoadHelper, rigDbWhere, rigMasterNow(),
--|           rigDbOrWhere, rigDbDelete()
--|
--| Summary: Clear entry for login attempts.
--| 
--| Format:  rigAuthClearLoginAttempts(param1, param2)
--|
--| Parameters: string <pIdentity>, integer <pExpirePeriod> (optional)
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthClearLoginAttempts pIdentity pExpirePeriod
	if sAuth["trackLoginAttempts"] is TRUE then
		if pExpirePeriod is empty then
			put 86400 into tExpirePeriod
		else
			put pExpirePeriod into tExpirePeriod
		end if
		
		put rigIpAddress() into tIP
		
		put tIP into tArray["ipAddress"]
		put pIdentity into tArray["login"]
		
		rigDbWhere tArray
		put rigMasterNow() - tExpirePeriod into tTimeLessExpirePeriod
		rigDbOrWhere "time <", tTimeLessExpirePeriod, FALSE
		
		if rigDbDelete(sAuth["tables"]["loginAttempts"]) <> FALSE then
			return TRUE
		end if
	end if
	
	return FALSE
end rigAuthClearLoginAttempts





/*----------------------------------------------------------------------
--| FUNCTION rigAuthIncreaseLoginAttempts
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-12-2012
--| Last Mod: 31-12-2012
--| Requires: rigLoadHelper, rigIpAddress(), rigMasterNow(), rigDbInsert()
--|
--| Summary: Increase the number of login attempts.
--| 
--| Format:  rigAuthIncreaseLoginAttempts(param1)
--|
--| Parameters: string <pIdentity>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthIncreaseLoginAttempts pIdentity
	if sAuth["trackLoginAttempts"] is TRUE then
	
		put rigIpAddress() into tData["ipAddress"]
		put pIdentity into tData["login"]
		put rigMasterNow() into tData["time"]
		
		return rigDbInsert(sAuth["tables"]["loginAttempts"], tData, TRUE)
	end if
	
	return FALSE
end rigAuthIncreaseLoginAttempts






/*----------------------------------------------------------------------
--| FUNCTION rigAuthRememberUser
--|
--| Author: rabit
--| Version:  1.0
--| Created: 30-12-2012
--| Last Mod: 30-12-2012
--| Requires: _rigAuthCallHook(), rigDbWhere, rigDbUpdate(), rigDbAffectedRows(), rigSetCookie
--|
--| Summary: Remember user and enable auto-login.
--| 
--| Format:  rigAuthRememberUser(param1)
--|
--| Parameters: array <pUser>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthRememberUser pUser
	get _rigAuthCallHook("authPreRememberUser")
	
	if pUser is not an array then
		return FALSE
	end if
	
	put base64Encode(sha1Digest(pUser["password"])) into tSalt
	
	put tSalt into tData["rememberCode"]

	rigDbWhere "id", pUser["id"]
	get rigDbUpdate(sAuth["tables"]["users"], tData)
	
	if rigDbAffectedRows() <> FALSE then
		# IF autoLoginExpire IS 0 SET THE EXPIRATION TWO YEARS FROM NOW
		if sAuth["autoLoginExpire"] is 0 then
			put (60*60*24*365*2) into tExpire
		else
			put sAuth["autoLoginExpire"] into tExpire
		end if
		
		# SET AUTO-LOGIN COOKIES
		put "identity" into tCookieIdentity["name"]
		put pUser[sAuth["identityColumn"]] into tCookieIdentity["value"]
		put tExpire into tCookieIdentity["expire"]
		rigSetCookie tCookieIdentity
		
		put "rememberCode" into tCookieRemCode["name"]
		put tSalt into tCookieRemCode["value"]
		put tExpire into tCookieRemCode["expire"]
		rigSetCookie tCookieRemCode
				
		get _rigAuthCallHook("authPostRememberUser")
		get _rigAuthCallHook("authRememberUserSuccessful")
		return TRUE
	end if
			
	get _rigAuthCallHook("authPostRememberUser")
	get _rigAuthCallHook("authRememberUserUnsuccessful")
	return FALSE
end rigAuthRememberUser






/*----------------------------------------------------------------------
--| FUNCTION _rigAuthLoginRememberedUser
--|
--| Author: rabit
--| Version:  1.0
--| Created: 02-01-2013
--| Last Mod: 02-01-2013
--| Requires: _rigAuthCallHook(), rigAuthIdentityCheck(), rigDbSelect, rigDbWhere, rigDbLimit,
--|           rigDbGet(), rigDbRow(), rigAuthUpdateLastLogin(), rigSetSessUserdata,
--|           rigAuthRememberUser()
--|
--| Summary: Auto-login remembered user.
--| 
--| Format:  _rigAuthLoginRememberedUser(param1, param2)
--|
--| Parameters: string <pIdentity>, string <pRememberCode>
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigAuthLoginRememberedUser pIdentity pRememberCode
	get _rigAuthCallHook("authPreLoginRememberedUser")

	# CHECK FOR VALID DATA
	if rigAuthIdentityCheck(pIdentity) is FALSE then		
		get _rigAuthCallHook("authPostLoginRememberedUser")
		get _rigAuthCallHook("authLoginRememberedUserUnsuccessful")
		
		return FALSE
	end if
	
	# GET THE USER
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbSelect sAuth["identityColumn"] & ", id, password"
	rigDbWhere sAuth["identityColumn"], pIdentity
	rigDbWhere "rememberCode", pRememberCode
	rigDbLimit 1
	put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
		
	# IF THE IDENTITY WAS FOUND CHECK THE USER IN	
	if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
		put rigDbRow(1) into sAuthUser
		put sAuthUser into tUser
		
		get rigAuthUpdateLastLogin(tUser["id"])
		
		# SET SESSION DATA
		put tUser[sAuth["identityColumn"]] into tSessionData[sAuth["identityColumn"]]
		put tUser["id"] into tSessionData["userID"]

		rigSetSessUserdata tSessionData
		
		# EXTEND THE USERS COOKIES IF THE OPTION IS ENABLED
		if sAuth["userExtendOnLogin"] is TRUE then
			get rigAuthRememberUser(tUser)
		end if
		
		get _rigAuthCallHook("authPostLoginRememberedUser")
		get _rigAuthCallHook("authPostLoginRememberedUserSuccessful")
		
		return TRUE
		
	end if
		
	get _rigAuthCallHook("authPostLoginRememberedUser")
	get _rigAuthCallHook("authPostLoginRememberedUserUnsuccessful")
	
	return FALSE
end _rigAuthLoginRememberedUser







/*----------------------------------------------------------------------
--| FUNCTION rigAuthEncryptPassword
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-12-2012
--| Last Mod: 31-12-2012
--| Requires: rigEncode()
--|
--| Summary: Encrypts the password to be stored in the database.
--| 
--| Format:  rigAuthEncryptPassword(param1)
--|
--| Parameters: string <pPassword>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthEncryptPassword pPassword
	if pPassword is empty then
		return FALSE
	end if
	
	# CHECK WHICH ENCRYPTION KEY SHOULD BE USED
	# AND ENCRYPT THE PASSWORD
	if sAuth["useAuthEncryptionKey"] is TRUE then
		return rigEncode(pPassword, sAuth["authEncryptionKey"])
	end if
	
	return rigEncode(pPassword)
end rigAuthEncryptPassword






/*----------------------------------------------------------------------
--| FUNCTION rigAuthDecryptPassword
--|
--| Author: rabit
--| Version:  1.0
--| Created: 20-02-2013
--| Last Mod: 20-02-2013
--| Requires: --
--|
--| Summary: Decrypts the password currently stored in the database.
--| 
--| Format:  rigAuthDecryptPassword(param1)
--|
--| Parameters: string <pPassword>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthDecryptPassword pPassword
	if pPassword is empty then
		return FALSE
	end if
	
	# CHECK WHICH ENCRYPTION KEY SHOULD BE USED
	# AND ENCRYPT THE PASSWORD
	if sAuth["useAuthEncryptionKey"] is TRUE then
		return rigDecode(pPassword, sAuth["authEncryptionKey"])
	end if
	
	return rigDecode(pPassword)
end rigAuthDecryptPassword







/*----------------------------------------------------------------------
--| FUNCTION rigAuthValidatePassword
--|
--| Author: rabit
--| Version:  1.0
--| Created: 29-12-2012
--| Last Mod: 29-12-2012
--| Requires: _rigAuthCallHook(), rigDbSelect, rigDbWhere, rigDbLimit, rigDbGet(),
--|           rigDbRow(), rigSetCipher, rigDecode()
--|
--| Summary: Validate password against entry in Users table.
--| 
--| Format:  rigAuthValidatePassword(param1, param2)
--|
--| Parameters: integer <pID>, string <pPassword>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthValidatePassword pID pPassword
	if (pID is empty) or (pPassword is empty) then
		return FALSE
	end if
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbSelect "password"
	rigDbWhere "id", pID
	rigDbLimit 1
	put rigDbGet(sAuth["tables"]["users"]) into tQuery

	if tQuery["numrows"] <> 1 then
		return FALSE
	end if
	
	put rigDbRow(1) into tRow
	put tRow["password"] into tPasswordDBencrypted
	
	# SET THE CIPHER AND THE KEY LENGTH
	rigSetCipher sAuth["cipher"], sAuth["keyLength"]
	
	# CHECK WHICH ENCRYPTION KEY SHOULD BE USED
	# AND DECRYPT THE STORED PASSWORD
	if sAuth["useAuthEncryptionKey"] is TRUE then
		put rigDecode(tPasswordDBencrypted, sAuth["authEncryptionKey"]) into tPasswordDB
	else
		put rigDecode(tPasswordDBencrypted) into tPasswordDB
	end if
	
	# COMPARE PASSWORDS
	if tPasswordDB is pPassword then
		return TRUE
	end if
	
	return FALSE
end rigAuthValidatePassword







/*----------------------------------------------------------------------
--| COMMAND rigAuthSetError
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-10-2012
--| Last Mod: 10-10-2012
--| Requires: --
--|
--| Summary: Set error message.
--| 
--| Format:  rigAuthSetError param1 
--|
--| Parameters: string <pError>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthSetError pError
	put the number of lines in the keys of sAuthErrors into tErrorCount
	add 1 to tErrorCount
	put pError into sAuthErrors[tErrorCount]
end rigAuthSetError






/*----------------------------------------------------------------------
--| FUNCTION rigAuthErrors
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-12-2012
--| Last Mod: 31-12-2012
--| Requires: rigLangLangLine()
--|
--| Summary: Return authentication errors.
--| 
--| Format:  rigAuthErrors(param1, param2)
--|
--| Parameters: string <pPrefix> (optional), string <pSuffix> (optional)
--|
--| Return: string
----------------------------------------------------------------------*/

function rigAuthErrors pPrefix pSuffix
	if pPrefix is empty then
		put sAuth["errorPrefix"] into pPrefix
	end if

	if pSuffix is empty then
		put sAuth["errorSuffix"] into pSuffix
	end if
	
	put "" into tErrorsOut
	
	repeat for each key tKey in sAuthErrors
		put sAuthErrors[tKey] into tError
		
		# CHECK IF ERROR IS IN LANGUAGE FILE
		put rigLangLangLine(tError) into tLangError
		if tLangError is FALSE then
			put "--" & tError & "--" into tLangError
		end if
		
		put pPrefix & tLangError & pSuffix after tErrorsOut
	end repeat
	
	return tErrorsOut
end rigAuthErrors






/*----------------------------------------------------------------------
--| FUNCTION rigAuthFieldnames
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-09-2012
--| Last Mod: 12-09-2012
--| Requires: --
--|
--| Summary: Get query field names.
--| 
--| Format:  rigAuthFieldnames()
--|
--| Parameters: --
--|
--| Return: array
----------------------------------------------------------------------*/

function rigAuthFieldnames
	return sAuthFieldnames
end rigAuthFieldnames





/*----------------------------------------------------------------------
--| FUNCTION rigAuthIdentityCheck
--|
--| Author: rabit
--| Version:  1.0
--| Created: 02-01-2013
--| Last Mod: 02-01-2013
--| Requires: _rigAuthCallHook(), rigDbWhere, rigDbCountAllResults()
--|
--| Summary: Identity check for remembered users (auto-login).
--| 
--| Format:  rigAuthIdentityCheck(param1)
--|
--| Parameters: string <pIdentity>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthIdentityCheck pIdentity
	get _rigAuthCallHook("authIdentityCheck")
	
	if pIdentity is empty then
		return FALSE
	end if
	
	rigDbWhere sAuth["identityColumn"], pIdentity
	if rigDbCountAllResults(sAuth["tables"]["users"]) > 0 then
		return TRUE
	end if
	
	return FALSE
end rigAuthIdentityCheck





/*----------------------------------------------------------------------
--| FUNCTION rigAuthEmailCheck
--|
--| Author: rabit
--| Version:  1.0
--| Created: 08-02-2013
--| Last Mod: 08-02-2013
--| Requires: _rigAuthCallHook(), rigDbWhere, rigDbCountAllResults()
--|
--| Summary: Check if there is an entry in the DB regarding
--|          the email address provided.
--| 
--| Format:  rigAuthEmailCheck(param1)
--|
--| Parameters: string <pEmail>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthEmailCheck pEmail
	get _rigAuthCallHook("authEmailCheck")
	
	if pEmail is empty then
		return FALSE
	end if
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbWhere "email", pEmail
	if rigDbCountAllResults(sAuth["tables"]["users"]) > 0 then
		return TRUE
	end if
	
	return FALSE
end rigAuthEmailCheck





/*----------------------------------------------------------------------
--| FUNCTION rigAuthUsernameCheck
--|
--| Author: rabit
--| Version:  1.0
--| Created: 08-02-2013
--| Last Mod: 08-02-2013
--| Requires: _rigAuthCallHook(), rigDbWhere, rigDbCountAllResults()
--|
--| Summary: Check if there is an entry in the DB regarding
--|          the username provided.
--| 
--| Format:  rigAuthUsernameCheck(param1)
--|
--| Parameters: string <pUsername>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthUsernameCheck pUsername
	get _rigAuthCallHook("authUsernameCheck")
	
	if pUsername is empty then
		return FALSE
	end if
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbWhere "username", pUsername
	if rigDbCountAllResults(sAuth["tables"]["users"]) > 0 then
		return TRUE
	end if
	
	return FALSE
end rigAuthUsernameCheck






/*----------------------------------------------------------------------
--| FUNCTION _rigAuthFilteredData
--|
--| Author: rabit
--| Version:  1.0
--| Created: 08-02-2013
--| Last Mod: 08-02-2013
--| Requires: rigDbListFields()
--|
--| Summary: Filter out data that doesn't have a matching field in the users table.
--| 
--| Format:  _rigAuthFilteredData(param1, param2)
--|
--| Parameters: string <pTable>, array <pData>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function _rigAuthFilteredData pTable pData
	# GET ARRAY OF FIELD NAMES
	put rigDbListFields(pTable) into tFields

	if pData is an array then
		put the keys of pData into tDataKeysList

		# CHECK IF pData KEY IS AMONG THE LINES OF FIELD NAMES
		# FILTER OUT DATA WITHOUT A CORRESPONDING FIELD NAME
		repeat for each key tKey in tFields
			if tFields[tKey] is among the lines of tDataKeysList then
				put pData[tFields[tKey]] into tFilteredData[tFields[tKey]]
			end if
		end repeat
		
	else
		return FALSE
	end if

	return tFilteredData
end _rigAuthFilteredData





/*----------------------------------------------------------------------
--| COMMAND rigAuthAddToGroup
--|
--| Author: rabit
--| Version:  1.0
--| Created: 08-02-2013
--| Last Mod: 08-02-2013
--| Requires: _rigAuthCallHook(), rigSessUserdata(), rigDbInsert
--|
--| Summary: Add user to group.
--| 
--| Format:  rigAuthAddToGroup param1, param2
--|
--| Parameters: integer <pGroupID>, integer <pUserID>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthAddToGroup pGroupID pUserID
	get _rigAuthCallHook("authAddToGroup")

	# USE ID OF CURRENT USER IF pUserID IS EMPTY
	if pUserID is empty then
		put rigSessUserdata("userID") into tUserID
	else
		put pUserID into tUserID
	end if
	
	put pGroupID into tData[sAuth["join"]["groups"]]
	put tUserID into tData[sAuth["join"]["users"]]
	get rigDbInsert(sAuth["tables"]["usersGroups"], tData)
end rigAuthAddToGroup





/*----------------------------------------------------------------------
--| COMMAND rigAuthWhere
--|
--| Author: rabit
--| Version:  1.2
--| Created: 08-02-2013
--| Last Mod: 22-12-2014
--| Requires: _rigAuthCallHook(), rigNumToCodepoint()
--|
--| Summary: Add key value pairs to sAuthWhere.
--| 
--| Format:  rigAuthWhere param1, param2
--|
--| Parameters: mixed <pWhere>, string <pValue>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthWhere pWhere pValue
	get _rigAuthCallHook("authWhere")
	
	if pWhere is not an array then
		put pValue into tWhereArray[pWhere]
	else
		put pWhere into tWhereArray
	end if

	if sAuthWhere is an array then
		put rigNumToCodepoint(1) into tFirstDelim
		put rigNumToCodepoint(2) into tSecondDelim
		combine sAuthWhere using tFirstDelim and tSecondDelim
		combine tWhereArray using tFirstDelim and tSecondDelim

		put tFirstDelim & tWhereArray after sAuthWhere
		split sAuthWhere using tFirstDelim and tSecondDelim
	else
		put tWhereArray into sAuthWhere
	end if
end rigAuthWhere








/*----------------------------------------------------------------------
--| FUNCTION rigAuthGroups
--|
--| Author: rabit
--| Version:  1.0
--| Created: 09-02-2013
--| Last Mod: 09-02-2013
--| Requires: _rigAuthCallHook()
--|
--| Summary: Get the groups.
--| 
--| Format:  rigAuthGroups()
--|
--| Parameters: --
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthGroups
	get _rigAuthCallHook("authGroups")
	
	# RUN EACH WHERE OF sAuthWhere
	if sAuthWhere is an array then
			rigDbWhere sAuthWhere
		
		put empty into sAuthWhere
	end if
	
	# CHECK LIMIT AND OFFSET
	if (sAuthLimit <> "") and (sAuthOffset <> "") then
		rigDbLimit sAuthLimit, sAuthOffset
		put "" into sAuthLimit
		put "" into sAuthOffset
	else if sAuthLimit <> "" then
		rigDbLimit sAuthLimit
		put "" into sAuthLimit
	end if
	
	# SET ORDER
	if (sAuthOrderBy <> "") and (sAuthOrder <> "") then
		rigDbOrderBy sAuthOrderBy, sAuthOrder
		put "" into sAuthOrderBy
		put "" into sAuthOrder
	end if
	
	# RUN THE QUERY AND RETURN THE RESULT
	put rigDbGet(sAuth["tables"]["groups"]) into sAuthQuery
	
	if sAuthQuery <> FALSE then
		put sAuthQuery["fieldnames"] into sAuthFieldnames
		return sAuthQuery["resultarray"]
	end if
	
	return FALSE
end rigAuthGroups






/*----------------------------------------------------------------------
--| FUNCTION rigAuthGroup
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: _rigAuthCallHook(), rigDbWhere
--|
--| Summary: Get a specific group.
--| 
--| Format:  rigAuthGroup(param1)
--|
--| Parameters: integer <pID>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthGroup pID
	get _rigAuthCallHook("authGroup")
	
	if pID <> empty then
		rigDbWhere sAuth["tables"]["groups"] & ".id", pID	
	end if
	
	put 1 into sAuthLimit
	
	return rigAuthGroups()
end rigAuthGroup







/*----------------------------------------------------------------------
--| FUNCTION rigAuthForgottenPassword
--|
--| Author: rabit
--| Version:  1.2
--| Created: 17-02-2013
--| Last Mod: 21-03-2014
--| Requires: _rigAuthForgottenPassword(), rigAuthWhere, rigAuthUsers(), rigDbRow(),
--|           rigAuthSetMessage, rigAnchor(), rigLoadView(), rigClearMail,
--|           rigMailFrom, rigMailTo, rigMailSubject, rigMailMessage, rigMailSend(),
--|           rigAuthSetError
--|
--| Summary: User forgot password.
--| 
--| Format:  rigAuthForgottenPassword(param1, param2)
--|
--| Parameters: string <pIdentity>, array <pExtraData> currently used for custom link
--|             to a reset password page
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthForgottenPassword pIdentity pExtraData
	if _rigAuthForgottenPassword(pIdentity) is TRUE then
		# GET USER INFORMATION
		rigAuthWhere sAuth["identityColumn"], pIdentity
		put rigAuthUsers() into tQueryResultArray
		
		if tQueryResultArray <> FALSE then
			put rigDbRow() into tUser
			
			put tUser[sAuth["identityColumn"]] into tData["identity"]
			put tUser["forgottenPasswordCode"] into tData["forgottenPasswordCode"]
			
			if sAuth["sendEmails"] is FALSE then
				rigAuthSetMessage "forgotPasswordSuccessful"

				return tData
			else
				
				put tUser[sAuth["identityColumn"]] into gData["identity"]

				# BUILD LINK FOR PASSWORD RESET
				if pExtraData["passwordResetLink"] is empty then
					put "auth/resetPassword/" into pExtraData["passwordResetLink"]
					else if char -1 of pExtraData["passwordResetLink"] <> "/" then
						put pExtraData["passwordResetLink"] & "/" into pExtraData["passwordResetLink"]
				end if
				put rigAnchor(pExtraData["passwordResetLink"] & tUser["forgottenPasswordCode"] & "/", rigLangLangLine("resetPasswordLinkText")) into gData["forgottenPasswordCode"]
				
				# GET PATH TO FORGOTTEN PASSWORD EMAIL TEMPLATE
				if sAuth["pathToEmailTemplates"] is empty then
					put "emailTemplates/" & sAuth["emailForgotPassword"] into tEmailTemplate
				else
					if char -1 of sAuth["pathToEmailTemplates"] <> "/" then
						put sAuth["pathToEmailTemplates"] & "/" into tAuthPathToEmailTemplates
					else
						put sAuth["pathToEmailTemplates"] into tAuthPathToEmailTemplates
					end if

					put tAuthPathToEmailTemplates & sAuth["emailForgotPassword"] into tEmailTemplate
				end if			

				# MERGE FORGOTTEN PASSWORD EMAIL TEMPLATE
				put rigLoadView(tEmailTemplate, TRUE) into tMessage
				put merge(tMessage) into tMessage
				
				# SEND MAIL
				rigClearMail
				rigMailFrom sAuth["adminEmail"], sAuth["siteTitle"]
				rigMailTo tUser["email"]
				rigMailSubject sAuth["siteTitle"] && "-" && rigLangLangLine("emailForgottenPasswordSubject")
				rigMailMessage tMessage

				if rigMailSend() is TRUE then
					rigAuthSetMessage "forgotPasswordSuccessful"

					return TRUE
				else
					rigAuthSetError "forgotPasswordUnsuccessful"
					
					return FALSE
				end if
				
			end if
			
		else
			rigAuthSetError "forgotPasswordUnsuccessful"
			
			return FALSE
		end if -- if tQueryResultArray <> FALSE then
		
	else
		rigAuthSetError "forgotPasswordUnsuccessful"
		
		return FALSE
	end if -- if _rigAuthForgottenPassword(pIdentity) is TRUE then
	
end rigAuthForgottenPassword







/*----------------------------------------------------------------------
--| FUNCTION _rigAuthForgottenPassword
--|
--| Author: rabit
--| Version:  1.0
--| Created: 17-02-2013
--| Last Mod: 17-02-2013
--| Requires: _rigAuthCallHook(), rigAuthEncryptPassword(), rigMasterNow(),
--|          rigDbWhere, rigDbUpdate(), rigDbAffectedRows()
--|
--| Summary: Insert a forgotten password key.
--| 
--| Format:  _rigAuthForgottenPassword(param1)
--|
--| Parameters: string <pIdentity>
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigAuthForgottenPassword pIdentity
	if pIdentity is empty then
		get _rigAuthCallHook("authPostFrogottenPassword")
		get _rigAuthCallHook("authPostFrogottenPasswordUnsuccessful")
		
		return FALSE
	end if
	
	put rigHexDigest(sha1Digest(the long seconds & pIdentity)) into sAuthForgottenPasswordCode
		
	get _rigAuthCallHook("authExtraWhere")
	
	put sAuthForgottenPasswordCode into tData["forgottenPasswordCode"]
	put rigMasterNow() into tData["forgottenPasswordTime"]
	
	rigDbWhere sAuth["identityColumn"], pIdentity
	get rigDbUpdate(sAuth["tables"]["users"], tData)
	
	if rigDbAffectedRows() is 1 then
			get _rigAuthCallHook("authPostFrogottenPassword")
			get _rigAuthCallHook("authPostFrogottenPasswordSuccessful")
			
			return TRUE
	else
			get _rigAuthCallHook("authPostFrogottenPassword")
			get _rigAuthCallHook("authPostFrogottenPasswordUnsuccessful")
	end if
	
	return FALSE
end _rigAuthForgottenPassword







/*----------------------------------------------------------------------
--| FUNCTION rigAuthForgottenPasswordCheck
--|
--| Author: rabit
--| Version:  1.0
--| Created: 17-02-2013
--| Last Mod: 17-02-2013
--| Requires: rigAuthWhere, rigAuthUsers(), rigAuthSetError, rigDbRow(),
--|           rigMasterNow(), rigAuthClearForgottenPasswordCode()
--|
--| Summary: Check the forgotten password reset code.
--| 
--| Format:  rigAuthForgottenPasswordCheck(param1)
--|
--| Parameters: string <pCode>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigAuthForgottenPasswordCheck pCode
	# GET USER DATA
	rigAuthWhere "forgottenPasswordCode", pCode
	get rigAuthUsers()
	
	if sAuthQuery is FALSE then
		rigAuthSetError "passwordChangeUnsuccessful"
		
		return FALSE
	else
		
		put rigDbRow() into tUser
			
		if sAuth["forgotPasswordExpiration"] > 0 then
			# CHECK IF THE FORGOT PASSWORD REQUEST IS EXPIRED
			if (rigMasterNow() - tUser["forgottenPasswordTime"]) > sAuth["forgotPasswordExpiration"] then
				# IT HAS EXPIRED
				get rigAuthClearForgottenPasswordCode(pCode)
				rigAuthSetError "passwordChangeUnsuccessful"
				
				return FALSE
			end if
			
		end if
		
		return tUser
	end if
end rigAuthForgottenPasswordCheck







/*----------------------------------------------------------------------
--| FUNCTION rigAuthClearForgottenPasswordCode
--|
--| Author: rabit
--| Version:  1.1
--| Created: 17-02-2013
--| Last Mod: 05-03-2013
--| Requires: rigDbWhere, rigDbCountAllResults(), rigDbUpdate()
--|
--| Summary: Delete the forgotten password code.
--| 
--| Format:  rigAuthClearForgottenPasswordCode(param1)
--|
--| Parameters: string <pCode>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthClearForgottenPasswordCode pCode
	if pCode is empty then
		return FALSE
	end if
	
	rigDbWhere "forgottenPasswordCode", pCode
	if rigDbCountAllResults(sAuth["tables"]["users"]) > 0 then
		put empty into tData["forgottenPasswordCode"]
		put 0 into tData["forgottenPasswordTime"]
		
		-- rigDbWhere "forgottenPasswordCode", pCode
		get rigDbUpdate(sAuth["tables"]["users"], tData, "forgottenPasswordCode = '" & pCode & "'")
		
		return TRUE
	end if
	
	return FALSE
end rigAuthClearForgottenPasswordCode







/*----------------------------------------------------------------------
--| FUNCTION rigAuthResetPassword
--|
--| Author: rabit
--| Version:  1.1
--| Created: 18-02-2013
--| Last Mod: 05-03-2013
--| Requires: _rigAuthCallHook(), rigAuthIdentityCheck(), rigDbSelect, rigDbWhere,
--|           rigDbLimit, rigDbGet(), rigDbRow(), rigAuthSetError, rigAuthEncryptPassword(),
--|           rigDbUpdate(), rigDbAffectedRows(), rigAuthSetMessage
--|
--| Summary: Replace password with a new one.
--| 
--| Format:  rigAuthResetPassword(param1, param2)
--|
--| Parameters: string <pIdentity>, string <pNewPassword>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthResetPassword pIdentity pNewPassword
	get _rigAuthCallHook("authPreChangePassword")
	
	if rigAuthIdentityCheck(pIdentity) is FALSE then
		get _rigAuthCallHook("authPostChangePassword")
		get _rigAuthCallHook("authPostChangePasswordUnsuccessful")
		
		return FALSE
	end if
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbSelect "id, password"
	rigDbWhere sAuth["identityColumn"], pIdentity
	rigDbLimit 1
	put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
	
	if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
		put rigDbRow() into sAuthUser
		put sAuthUser into tUser
		
	else
		get _rigAuthCallHook("authPostChangePassword")
		get _rigAuthCallHook("authPostChangePasswordUnsuccessful")
		rigAuthSetError "passwordChangeUnsuccessful"
		
		return FALSE
	end if
	
	# ENCRYPT NEW PASSWORD
	put rigAuthEncryptPassword(pNewPassword) into tNewPassword
	
	# STORE THE NEW PASSWORD AND RESET THE REMEMBER CODE SO ALL REMEMBERED INSTANCES HAVE TO RE-LOGIN
	# CLEAR THE FORGOTTEN PASSWORD CODE
	put tNewPassword into tData["password"]
	put empty into tData["rememberCode"]
	put empty into tData["forgottenPasswordCode"]
	put 0 into tData["forgottenPasswordTime"]
	
	get _rigAuthCallHook("authExtraWhere")
	
	get rigDbUpdate(sAuth["tables"]["users"], tData, sAuth["identityColumn"] && "= '" & pIdentity & "'")
	
	if rigDbAffectedRows() is 1 then
			get _rigAuthCallHook("authPostChangePassword")
			get _rigAuthCallHook("authPostChangePasswordSuccessful")
			rigAuthSetMessage "passwordChangeSuccessful"
			
			return TRUE
	else
			get _rigAuthCallHook("authPostChangePassword")
			get _rigAuthCallHook("authPostChangePasswordUnsuccessful")
			rigAuthSetError "passwordChangeUnsuccessful"
	end if
	
	return FALSE
end rigAuthResetPassword






/*----------------------------------------------------------------------
--| FUNCTION rigAuthChangePassword
--|
--| Author: rabit
--| Version:  1.1
--| Created: 20-02-2013
--| Last Mod: 05-03-2013
--| Requires: _rigAuthCallHook(), rigDbSelect, rigDbWhere, rigDbLimit, rigDbGet(),
--|           rigDbRow(), rigAuthSetError, rigAuthDecryptPassword(), rigAuthEncryptPassword(),
--|           rigDbUpdate(), rigDbAffectedRows, rigAuthSetMessage
--|
--| Summary: Change user password.
--| 
--| Format:  rigAuthChangePassword(param1, param2, param3)
--|
--| Parameters: string <pIdentity>, string <pOldPassword>, string <pNewPassword>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthChangePassword pIdentity pOldPassword pNewPassword
	get _rigAuthCallHook("authPreChangePassword")
	
	get _rigAuthCallHook("authExtraWhere")
	
	rigDbSelect "id, password"
	rigDbWhere sAuth["identityColumn"], pIdentity
	rigDbLimit 1
	put rigDbGet(sAuth["tables"]["users"]) into sAuthQuery
	
	if (sAuthQuery <> FALSE) and (sAuthQuery["numrows"] is 1) then
		put rigDbRow() into sAuthUser
		put sAuthUser into tUser
		
	else
		get _rigAuthCallHook("authPostChangePassword")
		get _rigAuthCallHook("authPostChangePasswordUnsuccessful")
		rigAuthSetError "passwordChangeUnsuccessful"
		return FALSE
	end if
	
	put rigAuthDecryptPassword(tUser["password"]) into tDBpassword
	put rigAuthEncryptPassword(pNewPassword) into tNewPassword
	
	# VALIDATE OLD PASSWORD
	# DECRYPT DATABASE PASSWORD
	if pOldPassword is tDBpassword then
		put tNewPassword into tData["password"]
		put empty into tData["rememberCode"]
		
		get _rigAuthCallHook("authExtraWhere")
		
		get rigDbUpdate(sAuth["tables"]["users"], tData, sAuth["identityColumn"] && "= '" & pIdentity & "'")
		
		if rigDbAffectedRows() is 1 then
				get _rigAuthCallHook("authPostChangePassword")
				get _rigAuthCallHook("authPostChangePasswordSuccessful")
				rigAuthSetMessage "passwordChangeSuccessful"
				
				return TRUE
		else
				get _rigAuthCallHook("authPostChangePassword")
				get _rigAuthCallHook("authPostChangePasswordUnsuccessful")
				rigAuthSetError "passwordChangeUnsuccessful"
				
				return FALSE
		end if

	end if -- if pOldPassword is tDBpassword then
	
	rigAuthSetError "passwordChangeUnsuccessful"
	
	return FALSE
end rigAuthChangePassword








/*----------------------------------------------------------------------
--| FUNCTION rigAuthUpdate
--|
--| Author: rabit
--| Version:  1.1
--| Created: 20-02-2013
--| Last Mod: 05-03-2013
--| Requires: _rigAuthCallHook(), rigAuthUser(), rigDbRow(), rigTransBegin(),
--|           rigAuthIdentityCheck(), rigTransRollback, rigAuthSetError,
--|           rigAuthFilterData(), rigAuthEncryptPassword(), rigDbUpdate(),
--|           rigDbTransStatus(), rigTransCommit
--|
--| Summary: Update user data.
--| 
--| Format:  rigAuthUpdate(param1, param2)
--|
--| Parameters: integer <pID>, array <pData>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthUpdate pID pData
	get _rigAuthCallHook("authPreUpdateUser")

	put rigAuthUser(pID) into tQueryResult
	
	if (tQueryResult <> FALSE) and (tQueryResult is an array) then
		put rigDbRow() into tUser
	else
		get _rigAuthCallHook("authPostUpdateUser")
		get _rigAuthCallHook("authPostUpdateUserUnsuccessful")
		
		return FALSE
	end if

	# RUN TRANSACTIONS
	get rigTransBegin()
	
	if (sAuth["identityColumn"] is among the keys of pData) and \
		(rigAuthIdentityCheck(pData[sAuth["identityColumn"]]) is TRUE) and \
		(tUser[sAuth["identityColumn"]] <> pData[sAuth["identityColumn"]]) then
		
		rigTransRollback
		
		rigAuthSetError "accountCreationDuplicateInvalid" & sAuth["identityColumn"]
		get _rigAuthCallHook("authPostUpdateUser")
		get _rigAuthCallHook("authPostUpdateUserUnsuccessful")
		rigAuthSetError "updateUnsuccessful"
		
		return FALSE
	end if
	
	put rigAuthFilterData(sAuth["tables"]["users"], pData) into tData

	if ("username" is among the keys of tData) or ("password" is among the keys of tData) or ("email" is among the keys of tData) then
		if "password" is among the keys of tData then
			if tData["password"] <> empty then
				# ENCRYPT PASSWORD
				put rigAuthEncryptPassword(tData["password"]) into tData["password"]
				
			else
				# REMOVE VARIABLE PASSWORD SO IT DOESN'T EFFECT DATABASE ENTRY IF NO PASSWORD PASSED
				delete variable tData["password"]
			end if
			
		end if
		
	end if
	
	get _rigAuthCallHook("authExtraWhere")

	get rigDbUpdate(sAuth["tables"]["users"], tData, "id = '" & tUser["id"] & "'")
	
	# CHECK TRANSACTION STATUS
	if rigDbTransStatus() is FALSE then
	    rigTransRollback
			
			get _rigAuthCallHook("authPostUpdateUser")
			get _rigAuthCallHook("authPostUpdateUserUnsuccessful")
			rigAuthSetError "updateUnsuccessful"

			return FALSE
	end if
	   
	rigTransCommit
	
	get _rigAuthCallHook("authPostUpdateUser")
	get _rigAuthCallHook("authPostUpdateUserSuccessful")
	rigAuthSetError "updateSuccessful"

	return TRUE
	
end rigAuthUpdate







/*----------------------------------------------------------------------
--| FUNCTION rigAuthFilterData
--|
--| Author: rabit
--| Version:  1.0
--| Created: 20-02-2013
--| Last Mod: 20-02-2013
--| Requires: rigDbListFields()
--|
--| Summary: Filter passed data prior to updating existing user data.
--| 
--| Format:  rigAuthFilterData(param1, param2)
--|
--| Parameters: string <pTable>, array <pData>
--|
--| Return: array
----------------------------------------------------------------------*/

function rigAuthFilterData pTable pData
	put empty into tFilteredArray
	
	put rigDbListFields(pTable) into tColumns
	
	if pData is an array then
		repeat for each key tKey in tColumns
			if tColumns[tKey] is among the keys of pData then
				put pData[tColumns[tKey]] into tFilteredArray[tColumns[tKey]]
			end if
			
		end repeat
	end if
	
	return tFilteredArray
end rigAuthFilterData







/*----------------------------------------------------------------------
--| FUNCTION rigAuthDeleteUser
--|
--| Author: rabit
--| Version:  1.1
--| Created: 21-02-2013
--| Last Mod: 05-03-2013
--| Requires: _rigAuthCallHook(), rigTransBegin(), rigDbDelete(), rigAuthRemoveFromGroup(),
--|           rigDbTransStatus(), rigTransRollback, rigAuthSetError, rigTransCommit
--|           rigAuthSetMessage
--|
--| Summary: Delete user from database.
--| 
--| Format:  rigAuthDeleteUser(param1)
--|
--| Parameters: integer <pID>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthDeleteUser pID
	get _rigAuthCallHook("authPreDeleteUser")
	
	# RUN TRANSACTIONS
	get rigTransBegin()
	
	# DELETE USER FROM USERS TABLE
	get rigDbDelete(sAuth["tables"]["users"], "id =" && pID)
	
	# REMOVE USER FROM ALL GROUPS
	put empty into tGroupIDs
	get rigAuthRemoveFromGroup(tGroupIDs , pID)
	
	# CHECK TRANSACTION STATUS
	if rigDbTransStatus() is FALSE then
	   rigTransRollback
		
		get _rigAuthCallHook("authPostDeleteUser")
		get _rigAuthCallHook("authPostDeleteUserUnsuccessful")
		rigAuthSetError "deleteUnsuccessful"
		
		return FALSE
	end if
	
	rigTransCommit
	
	get _rigAuthCallHook("authPostDeleteUser")
	get _rigAuthCallHook("authPostDeleteUserSuccessful")
	rigAuthSetMessage "deleteSuccessful"

	return TRUE
end rigAuthDeleteUser







/*----------------------------------------------------------------------
--| FUNCTION rigAuthRemoveFromGroup
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: _rigAuthCallHook(), rigDbDelete()
--|
--| Summary: Remove user from group.
--| 
--| Format:  rigAuthRemoveFromGroup(param1, param2)
--|
--| Parameters: mixed <pGroupIDs>, integer <pUserID>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthRemoveFromGroup pGroupIDs pUserID
	get _rigAuthCallHook("authRemoveFromGroup")
	
	# USER ID IS REQUIRED
	if pUserID is empty then
		return FALSE
	end if
	
	put pUserID into tWhereArray[sAuth["join"]["users"]]
	
	if (pGroupIDs is an array) or (pGroupIDs <> empty) then
		
		if pGroupIDs is an array then
			repeat for each key tKey in pGroupIDs
				put pGroupIDs[tKey] into tWhereArray[sAuth["join"]["groups"]]
				get rigDbDelete(sAuth["tables"]["usersGroups"], tWhereArray)
			end repeat
			
			return TRUE
			
		else
			put pGroupIDs into tWhereArray[sAuth["join"]["groups"]]
			return rigDbDelete(sAuth["tables"]["usersGroups"], tWhereArray)
		end if
		
	else
		# IF NO GROUP WAS SPECIIFIED REMOVE USER FROM ALL GROUPS
		return rigDbDelete(sAuth["tables"]["usersGroups"], tWhereArray)
	end if -- if (pGroupIDs is an array) or (pGroupIDs <> empty) then
	
end rigAuthRemoveFromGroup






/*----------------------------------------------------------------------
--| FUNCTION rigAuthIsMaxLoginAttemptsExceeded
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: rigAuthGetAttemptsNum()
--|
--| Summary: Check if the number of login attempts exeeds the allowed number.
--| 
--| Format:  rigAuthIsMaxLoginAttemptsExceeded(param1)
--|
--| Parameters: string <pIdentity>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigAuthIsMaxLoginAttemptsExceeded pIdentity
	if sAuth["trackLoginAttempts"] is TRUE then
		put sAuth["maxLoginAttempts"] into tMaxAttempts
		
		if sAuth["maxLoginAttempts"] > 0 then
			put rigAuthGetAttemptsNum(pIdentity) into tAttempts
			
			return tAttempts >= tMaxAttempts
		end if
		
	end if
	
	return FALSE
end rigAuthIsMaxLoginAttemptsExceeded







/*----------------------------------------------------------------------
--| FUNCTION rigAuthGetAttemptsNum
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: rigIpAddress(), rigDbSelect, rigDbWhere, rigDbOrWhere, rigDbGet()
--|
--| Summary: Get number of login attempts from a given ipAddress or identity.
--| 
--| Format:  rigAuthGetAttemptsNum(param1)
--|
--| Parameters: string <pIdentity>
--|
--| Return: integer
----------------------------------------------------------------------*/

function rigAuthGetAttemptsNum pIdentity
	if sAuth["maxLoginAttempts"] <> 0 then
		
		put rigIpAddress() into tIPaddress
		
		# CREATE A COLUMN CONTAINING THE VALUE 1 FOR EACH ROW
		rigDbSelect 1, FALSE
		rigDbWhere "ipAddress", tIPaddress
		
		if pIdentity <> empty then
			rigDbOrWhere "login", pIdentity
		end if
		
		put rigDbGet(sAuth["tables"]["loginAttempts"]) into tQuery
		
		return tQuery["numrows"]
	end if
	
	return 0
end rigAuthGetAttemptsNum






/*----------------------------------------------------------------------
--| COMMAND rigAuthSetMessageDelimiters
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: --
--|
--| Summary: Set the message delimiters.
--| 
--| Format:  rigAuthSetMessageDelimiters param1, param2
--|
--| Parameters: string <pStartDelimiter>, string <pEndDelimiter>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthSetMessageDelimiters pStartDelimiter pEndDelimiter
	put pStartDelimiter into sAuth["messagePrefix"]
	put pEndDelimiter into sAuth["messagePrefix"]
end rigAuthSetMessageDelimiters






/*----------------------------------------------------------------------
--| COMMAND rigAuthSetErrorDelimiters
--|
--| Author: rabit
--| Version:  1.0
--| Created: 21-02-2013
--| Last Mod: 21-02-2013
--| Requires: --
--|
--| Summary: Set the message delimiters.
--| 
--| Format:  rigAuthSetErrorDelimiters param1, param2
--|
--| Parameters: string <pStartDelimiter>, string <pEndDelimiter>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigAuthSetErrorDelimiters pStartDelimiter pEndDelimiter
	put pStartDelimiter into sAuth["errorPrefix"]
	put pEndDelimiter into sAuth["errorSuffix"]
end rigAuthSetErrorDelimiters






/*----------------------------------------------------------------------
--| COMMAND _rigInitAuthHooksPrefs
--|
--| Author: rabit
--| Version:  1.1
--| Created: 22-02-13
--| Last Mod: 17-09-15
--| Requires: rigLogMessage
--|
--| Summary: Initialize the authentication hooks preferences.
--| 	    
--| 
--| Format:  _rigInitAuthHooksPrefs
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigInitAuthHooksPrefs
	# IF AUTHENTICATION HOOKS ARE NOT ENABLED IN THE AUTHENTICATION CONFIG FILE
	# THERE IS NOTHING ELSE TO DO
	if sAuth["enableAuthenticationHooks"] is FALSE then
		exit _rigInitAuthHooksPrefs
	end if
	
	# GRAB THE AUTHENTICATION HOOKS DEFINITION FILE.
	# IF THERE ARE NO HOOKS, WE'RE DONE.
	try
		require gAPPPATH & "config/authenticationHooks" & gEXT
	catch err
		rigLogMessage "error", "An error occured while trying to include configuration file:" && "authenticationHooks" & gEXT
	end try

	if sAuthHooks is not an array then
		exit _rigInitAuthHooksPrefs
	end if

	put TRUE into sAuthHooksEnabled
end _rigInitAuthHooksPrefs






/*----------------------------------------------------------------------
--| COMMAND rigSetAuthHooksConfig
--|
--| Author: rabit
--| Version:  1.0
--| Created: 22-02-13
--| Last Mod: 22-02-13
--| Requires: --
--|
--| Summary: Set hooks configuration.
--| 
--| Format:  rigSetAuthHooksConfig param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetAuthHooksConfig pConfig
	if pConfig is an array then
		put pConfig into sAuthHooks
	end if
end rigSetAuthHooksConfig






/*----------------------------------------------------------------------
--| FUNCTION _rigAuthCallHook
--|
--| Author: rabit
--| Version:  1.0
--| Created: 22-02-13
--| Last Mod: 22-02-13
--| Requires: _rigAuthRunHook()
--|
--| Summary: Calls a particular authentication hook.
--| 
--| Format:  _rigAuthCallHook(param1)
--|
--| Parameters: string <pWhich>the hook name
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigAuthCallHook pWhich
	if sAuthHooksEnabled is not TRUE or (sAuthHooks is not an array) then
		return FALSE
	end if

	put "" into tAuthHookResultTemp
	
	if sAuthHooks[pWhich][1] is an array then
		repeat for each key tKey in sAuthHooks[pWhich]
			put _rigAuthRunHook(sAuthHooks[pWhich][tKey]) into tAuthHookResult
			if tAuthHookResult is FALSE then
				put FALSE into tAuthHookResultTemp
			end if
		end repeat
	else

		put _rigAuthRunHook(sAuthHooks[pWhich]) into tAuthHookResult
	end if

	if tAuthHookResultTemp is not empty then
		return FALSE
	end if	

	return tAuthHookResult
end _rigAuthCallHook






/*----------------------------------------------------------------------
--| FUNCTION _rigAuthRunHook
--|
--| Author: rabit
--| Version:  1.2
--| Created: 22-02-13
--| Last Mod: 17-09-15
--| Requires: rigTrim()
--|
--| Summary: Runs a particular authentication hook.
--| 
--| Format:  _rigAuthRunHook(param1)
--|
--| Parameters: array <pData> the hook details
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigAuthRunHook pData
	if pData is not an array then
		return FALSE
	end if 

	# SAFETY - PREVENTS RUN-AWAY LOOPS
	#
	# IF THE SCRIPT BEING CALLED HAPPENS TO HAVE THE SAME
	# HOOK CALL WITHIN IT A LOOP CAN HAPPEN
	if sAuthHookInProgress is TRUE then
		exit _rigAuthRunHook
	end if

	# SET FILE PATH
	if pData["filepath"] is empty or pData["filename"] is empty then
		return FALSE
	else
		put pData["filepath"] into tFilePath
	end if
	
	put rigTrim(tFilePath, "/") into tFilePath

	put pData["filename"] into tFilename

	put gAPPPATH & tFilePath & "/" & tFilename into tFilepath

	if there is a file tFilepath then
	else
		return FALSE
	end if

	# GET HANDLER NAME
	if pData["handler"] is not empty then
		put pData["handler"] into tHandler
	else
		return FALSE
	end if

	put "" into tParams
	
	if (pData["params"] is an array) or ((pData["params"] is not an array) and (pData["params"] is not empty)) then
		put pData["params"] into tParams
	end if

	# SET THE sAuthHookInProgress FLAG
	put TRUE into sAuthHookInProgress

	# CALL THE REQUESTED HANDLER
	if itemOffset(tHandler, sAuthHooksHandlers) is 0 then


		if itemOffset(tFilename, sAuthHooksFiles) is 0 then
			require tFilepath

			if sAuthHooksFiles is empty then
				put tFilename into sAuthHooksFiles
			else
				put comma & tFilename after sAuthHooksFiles
			end if
		end if


		if sAuthHooksHandlers is empty then
			put tHandler into sAuthHooksHandlers
		else
			put comma & tHandler after sAuthHooksHandlers
		end if
	end if

	combine tParams using comma

	# CHECK IF HANDLER IS A FUNCTION
	if char -2 to -1 of tHandler is "()" then
		put TRUE into tIsFunction
	end if

	if tIsFunction is TRUE then
		put "get" && (char 1 to -2 of tHandler)  & tParams & ")" into tHandler
	else
		put tHandler && tParams into tHandler
	end if
	
	do tHandler

	put FALSE into sAuthHookInProgress

	return TRUE
end _rigAuthRunHook










--| END OF Authentication.lc
--| Location:  ./system/libraries/Authentication.lc
----------------------------------------------------------------------
