<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2016, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# revIgniter File Uploading Library
#
#
# @package		revIgniter
# @subpackage	Libraries
# @category		Uploads
# @author			rabit@revigniter.com
# @link				http://revigniter.com/userGuide/libraries/file_uploading.html
##

## ------------------------------------------------------------------------


# LOGGING
rigLogMessage "debug", "Upload Library Loaded"

# DECLARE VARIABLES
local sMaxSize, sMaxWidth, sMaxHeight, sMaxFilename, sAllowedTypes, sFileTemp, sFileName, sOrigName, sFileType, sFileSize, sFileExt
local sUploadPath, sOverwrite, sEncryptName, sIsImage, sImageWidth, sImageHeight, sImageType, sImageSizeStr, sErrorMsg, sMimes
local sRemoveSpaces, sXssClean, sTempPrefix, sClientName, sFileNameOverride, sValidSetHandlers

# SET INITIAL VALUES
put 0 into sMaxSize
put 0 into sMaxWidth
put 0 into sMaxHeight
put 0 into sMaxFilename
put FALSE into sOverwrite
put FALSE into sEncryptName
put FALSE into sIsImage
put TRUE into sRemoveSpaces
put FALSE into sXssClean
put "temp_file_" into sTempPrefix



put "rigSet_sUploadPath,rigSet_sAllowedTypes,rigSet_sMaxSize,rigSet_sMaxWidth,rigSet_sMaxHeight,rigSet_sMaxFilename,rigSet_sXssClean" into sValidSetHandlers





/*----------------------------------------------------------------------
--| COMMAND rigRunInitialUploadConfig
--|
--| Author: rabit
--| Version:  1.1
--| Created: 30-08-2011
--| Last Mod: 22-12-2014
--| Requires: rigNumToCodepoint(), rigInitializeUpload
--|
--| Summary: Run initial configuration procedures.
--| 
--| Format:  rigRunInitialUploadConfig param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigRunInitialUploadConfig pConfig
	put pConfig into tConfig

	if tConfig is not an array then
		if tConfig is not empty then
			split tConfig using rigNumToCodepoint(1) and rigNumToCodepoint(2)
		end if
	end if

	if tConfig is an array then
		rigInitializeUpload tConfig
	end if	
end rigRunInitialUploadConfig





/*----------------------------------------------------------------------
--| COMMAND rigInitializeUpload
--|
--| Author: rabit
--| Version:  1.0
--| Created: 30-08-2011
--| Last Mod: 30-08-2011
--| Requires: rigSetInitialUploadValue
--|
--| Summary: Initialize preferences.
--| 
--| Format:  rigInitializeUpload param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigInitializeUpload pConfig
	if pConfig is an array then
		repeat for each key tKey in pConfig
			put pConfig[tKey] into tVal

			## SET VARIABLE WITH NAME TKEY
			# 
			put "rigSet_s" & tKey into tHandler
			if tHandler is among the items of sValidSetHandlers then
				do tHandler && quote & tVal & quote
			else
				rigSetInitialUploadValue tKey, tVal
			end if		
	
		end repeat
		
		# IF A FileName WAS PROVIDED IN pConfig, USE IT INSTEAD OF
		# THE USER INPUT SUPPLIED FILE NAME FOR ALL UPLOADS UNTIL
		# INITIALIZED AGAIN
		put sFileName into sFileNameOverride
	end if
end rigInitializeUpload






/*----------------------------------------------------------------------
--| COMMAND rigSetInitialUploadValue
--|
--| Author: rabit
--| Version:  1.1
--| Created: 31-08-2011
--| Last Mod: 13-02-2014
--| Requires: --
--|
--| Summary: Set initial values.
--| 
--| Format:  rigSetInitialUploadValue param1, param2
--|
--| Parameters: string <pVarName>, mixed <pValue>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetInitialUploadValue pVarName pValue
	put "s" & pVarName into tVarName

	switch tVarName
		case "sFileName"
        		put pValue into sFileName
		break
		case "sOverwrite"
        		put pValue into sOverwrite
		break
		case "sEncryptName"
        		put pValue into sEncryptName
		break
		case "sRemoveSpaces"
        		put pValue into sRemoveSpaces
  end switch
end rigSetInitialUploadValue





/*----------------------------------------------------------------------
--| COMMAND rigSet_sUploadPath
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: rigTrim() (in Common)
--|
--| Summary: Set upload path.
--| 
--| Format:  rigSet_sUploadPath param1
--|
--| Parameters: string <pPath>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sUploadPath pPath
	# MAKE SURE IT HAS A TRAILING SLASH
	put rigTrim(pPath, ".,/") & "/" into sUploadPath
end rigSet_sUploadPath






/*----------------------------------------------------------------------
--| COMMAND rigSet_sAllowedTypes
--|
--| Author: rabit
--| Version:  1.1
--| Created: 31-08-2011
--| Last Mod: 09-09-2011
--| Requires: --
--|
--| Summary: Set allowed file types.
--| 
--| Format:  rigSet_sAllowedTypes param1
--|
--| Parameters: string <pTypes>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sAllowedTypes pTypes
	if (pTypes is not an array) and (pTypes is "*") then
		put "*" into sAllowedTypes
		exit rigSet_sAllowedTypes
	end if
	
	split pTypes by "|"
	put pTypes into sAllowedTypes
end rigSet_sAllowedTypes






/*----------------------------------------------------------------------
--| COMMAND rigSet_sMaxSize
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: --
--|
--| Summary: Set maximum file size.
--| 
--| Format:  rigSet_sMaxSize param1
--|
--| Parameters: integer<pN>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sMaxSize pN
	if pN is an integer then
		if pN < 0 then
			put 0 into sMaxSize
		else
			put pN into sMaxSize
		end if
	end if
end rigSet_sMaxSize






/*----------------------------------------------------------------------
--| COMMAND rigSet_sMaxWidth
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: --
--|
--| Summary: Set maximum image width.
--| 
--| Format:  rigSet_sMaxWidth param1
--|
--| Parameters: integer<pN>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sMaxWidth pN
	if pN is an integer then
		if pN < 0 then
			put 0 into sMaxWidth
		else
			put pN into sMaxWidth
		end if
	end if
end rigSet_sMaxWidth






/*----------------------------------------------------------------------
--| COMMAND rigSet_sMaxHeight
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: --
--|
--| Summary: Set maximum image height.
--| 
--| Format:  rigSet_sMaxHeight param1
--|
--| Parameters: integer<pN>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sMaxHeight pN
	if pN is an integer then
		if pN < 0 then
			put 0 into sMaxHeight
		else
			put pN into sMaxHeight
		end if
	end if
end rigSet_sMaxHeight






/*----------------------------------------------------------------------
--| COMMAND rigSet_sMaxFilename
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: --
--|
--| Summary: Set Maximum File Name Length
--| 
--| Format:  rigSet_sMaxFilename param1
--|
--| Parameters: integer<pN>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sMaxFilename pN
	if pN is an integer then
		if pN < 0 then
			put 0 into sMaxFilename
		else
			put pN into sMaxFilename
		end if
	end if
end rigSet_sMaxFilename






/*----------------------------------------------------------------------
--| COMMAND rigSet_sXssClean
--|
--| Author: rabit
--| Version:  1.0
--| Created: 01-09-2011
--| Last Mod: 01-09-2011
--| Requires: --
--|
--| Summary: Set XSS Clean
--|
--| Enables the XSS flag so that the file that
--| was uploaded will be run through the XSS filter.
--| 
--| Format:  rigSet_sXssClean param1
--|
--| Parameters: bool<pFlag>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSet_sXssClean pFlag	
	if pFlag <> TRUE then
		put FALSE into pFlag
	end if
	put pFlag into sXssClean
end rigSet_sXssClean






/*----------------------------------------------------------------------
--| COMMAND rigDoUpload
--|
--| Author: rabit
--| Version:  1.1
--| Created: 01-09-2011
--| Last Mod: 30-01-2015
--| Requires: rigSetUploadError, rigValidateUploadPath(), _rigPrepFilename(),
--|						rigGetExtension(), rigIsAllowedFileType(), rigIsAllowedFileSize(),
--|						rigIsAllowedDimensions(), rigCleanFilename(), rigLimitFilenameLength(),
--|						rigPregReplace() (in Common), rigSetFilename(), rigDoXSSclean, rigSetImageProperties
--|
--| Summary: Perform the file upload.
--| 
--| Format:  rigDoUpload param1
--|
--| Parameters: string <pField> name of form field
--|
--| Return: bool
----------------------------------------------------------------------*/

command rigDoUpload pField
	if pField is empty then
		put "userfile" into tField
	else
		put pField into tField
	end if

	# IF $_FILES[tField] IS NOT AN ARRAY THERE IS NO REASON TO CONTINUE
	if $_FILES[tField] is not an array then
		rigSetUploadError "upload_no_file_selected"
		return FALSE
	end if
	
	# IS THE UPLOAD PATH VALID?
	if rigValidateUploadPath() is FALSE then
		# ERRORS WILL ALREADY BE SET BY rigValidateUploadPath() SO JUST RETURN FALSE
		return FALSE
	end if
	
	# WAS THE FILE ABLE TO BE UPLOADED? IF NOT, DETERMINE THE REASON WHY
	if $_FILES[tField]["error"] is not empty then
		switch $_FILES[tField]["error"]
			case "upload stopped"
				rigSetUploadError "upload_file_partial"
			break
			case "upload failed"
				rigSetUploadError "upload_failed"
			break
			case "no upload folder"
				rigSetUploadError "upload_no_temp_directory"
			break
			case "i/o error"
				rigSetUploadError "upload_unable_to_write_file"
			break
			default
			rigSetUploadError "upload_no_file_selected"
		end switch
		return FALSE
	end if
	
	# SET THE UPLOADED DATA AS LIBRARY VARIABLES
	put $_FILES[tField]["filename"] into sFileTemp
	put $_FILES[tField]["size"] into sFileSize
	
	_rigFileMimeType $_FILES[tField]

  put "^(.+?);.*$" into tRegex
  if matchText($_FILES[tField]["type"], tRegex, tType) is TRUE then
	  put tType into sFileType
  end if
  replace "\" with "" in sFileType
  put toLower(rigTrim(sFileType, quote)) into sFileType
	
	put _rigPrepFilename($_FILES[tField]["name"]) into sFileName
	put rigGetExtension(sFileName) into sFileExt
	put sFileName into sClientName
	
	# IS THE FILE TYPE ALLOWED TO BE UPLOADED?
	if rigIsAllowedFileType() is FALSE then
		rigSetUploadError "upload_invalid_filetype"
		return FALSE
	end if
	
	# IF WE'RE OVERRIDING, LET'S NOW MAKE SURE THE NEW NAME AND TYPE IS ALLOWED
	if sFileNameOverride is not empty then
		put _rigPrepFilename(sFileNameOverride) into sFileName
		put rigGetExtension(sFileName) into sFileExt
		
		if rigIsAllowedFileType() is not TRUE then
			rigSetUploadError "upload_invalid_filetype"
			return FALSE
		end if
	end if
	
	# CONVERT THE FILE SIZE TO KILOBYTES
	if sFileSize > 0 then
		put round((sFileSize/1024),2) into sFileSize
	end if
	
	# IS THE FILE SIZE WITHIN THE ALLOWED MAXIMUM?
	if rigIsAllowedFileSize() is not TRUE then
		rigSetUploadError "upload_invalid_filesize"
		return FALSE
	end if
	
	# ARE THE IMAGE DIMENSIONS WITHIN THE ALLOWED SIZE?
	if rigIsAllowedDimensions() is not TRUE then
		rigSetUploadError "upload_invalid_dimensions"
		return FALSE
	end if
	
	# SANITIZE THE FILE NAME FOR SECURITY
	put rigCleanFilename(sFileName) into sFileName
	
	# TRUNCATE THE FILE NAME IF IT'S TOO LONG
	if sMaxFilename > 0 then
		put rigLimitFilenameLength(sFileName, sMaxFilename) into sFileName
	end if
	
	# REMOVE WHITE SPACES IN THE NAME
	if sRemoveSpaces is TRUE then
		put "(\s+)" into tRegEx
		put rigPregReplace(sFileName, tRegEx, , "_") into sFileName
	end if
	
	# VALIDATE THE FILE NAME
	# THIS FUNCTION APPENDS AN NUMBER ONTO THE END OF
	# THE FILE IF ONE WITH THE SAME NAME ALREADY EXISTS.
	# IF IT RETURNS FALSE THERE WAS A PROBLEM.
	put sFileName into sOrigName
	if sOverwrite is FALSE then
		put rigSetFilename(sUploadPath, sFileName) into sFileName
	
		if sFileName IS FALSE then
			return FALSE
		end if
	end if
	
	# MOVE THE FILE TO THE FINAL DESTINATION
	put URL format("binfile:%s", sFileTemp) into URL format("binfile:%s", (sUploadPath & sFileName))
	put the result into tResult
	if tResult is not empty then
		rigSetUploadError "upload_destination_error"
		return FALSE
	end if
	
	# RUN THE FILE THROUGH THE XSS HACKING FILTER
	# THIS HELPS PREVENT MALICIOUS CODE FROM BEING
	# EMBEDDED WITHIN A FILE.  SCRIPTS CAN EASILY
	# BE DISGUISED AS IMAGES OR OTHER FILE TYPES.
	if sXssClean is TRUE then
		rigDoXSSclean
	end if
	
	# SET THE FINALIZED IMAGE DIMENSIONS
	# THIS SETS THE IMAGE WIDTH/HEIGHT (ASSUMING THE
	# FILE WAS AN IMAGE).  WE USE THIS INFORMATION
	# IN THE "DATA" FUNCTION.
	put sUploadPath & sFileName into tPath
	rigSetImageProperties tPath
	
	return TRUE
	
end rigDoUpload






/*----------------------------------------------------------------------
--| FUNCTION rigSetFilename
--|
--| Author: rabit
--| Version:  1.0
--| Created: 31-08-2011
--| Last Mod: 31-08-2011
--| Requires: rigHexDigest() (in Common), rigSetUploadError
--|
--| Summary: Set the file name.
--| 				 This function takes a filename/path as input and looks for the
--| 				 existence of a file with the same name. If found, it will append a
--| 				 number to the end of the filename to avoid overwriting a pre-existing file.
--| 
--| Format:  rigSetFilename(param1, param2)
--|
--| Parameters: string <pPath>, string <pFileName>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigSetFilename pPath pFileName
	if sEncryptName is TRUE then
		put rigHexDigest(rigUniqid(25)) & sFileExt into tFilename
	else
		put pFileName into tFilename
	end if

	if there is a file (pPath & tFilename) then
	else
		return tFilename
	end if
	
	replace sFileExt with "" in tFilename
	put "" into tNewFilename

	repeat with tNum = 1 to 99
		if there is a file (pPath & tFilename & tNum & sFileExt) then
		else
			put tFilename & tNum & sFileExt into tNewFilename
			exit repeat
		end if
	end repeat

	if tNewFilename is "" then
		rigSetUploadError "upload_bad_filename"
		return FALSE
	else
		return tNewFilename
	end if
	
end rigSetFilename






/*----------------------------------------------------------------------
--| FUNCTION rigDisplayUploadErrors
--|
--| Author: rabit
--| Version:  1.0
--| Created: 01-09-2011
--| Last Mod: 01-09-2011
--| Requires: --
--|
--| Summary: Display the error message.
--| 
--| Format:  rigDisplayUploadErrors(param1, param2)
--|
--| Parameters: string<pOpen> the open tag, string<pClose> the close tag
--|
--| Return: string
----------------------------------------------------------------------*/

function rigDisplayUploadErrors pOpen pClose
	if pOpen is empty then
		put "<p>" into tOpen
	else
		put pOpen into tOpen
	end if
	
	if pClose is empty then
		put "</p>" into tClose
	else
		put pClose into tClose
	end if
	
	repeat for each key tKey in sErrorMsg
		put sErrorMsg[tKey] into tVal
		put tOpen & tVal & tClose after tErrorStr
	end repeat
	
	return tErrorStr
end rigDisplayUploadErrors






/*----------------------------------------------------------------------
--| FUNCTION rigUploadData
--|
--| Author: rabit
--| Version:  1.0
--| Created: 01-09-2011
--| Last Mod: 01-09-2011
--| Requires: rigIsImage()
--|
--| Summary: Finalized data array.
--|
--| Returns an associative array containing all of the information related
--| to the upload, allowing the developer easy access in one array.
--|
--| Format:  rigUploadData()
--|
--| Parameters: --
--|
--| Return: array
----------------------------------------------------------------------*/

function rigUploadData
	put sFileName into tData["FileName"]
	put sFileType into tData["FileType"]
	put sUploadPath into tData["FilePath"]
	put sUploadPath & sFileName into tData["FullPath"]
	
	put sFileName into tFileName
	replace sFileExt with "" in tFileName
	
	put tFileName into tData["RawName"]
	put sOrigName into tData["OrigName"]
	put sClientName into tData["ClientName"]
	put sFileExt into tData["FileExt"]
	put sFileSize into tData["FileSize"]
	put rigIsImage() into tData["IsImage"]
	put sImageWidth into tData["ImageWidth"]
	put sImageHeight into tData["ImageHeight"]
	put sImageType into tData["ImageType"]
	put sImageSizeStr into tData["ImageSizeStr"]
	
	return tData
end rigUploadData






/*----------------------------------------------------------------------
--| FUNCTION rigIsImage
--|
--| Author: rabit
--| Version:  1.0
--| Created: 01-09-2011
--| Last Mod: 01-09-2011
--| Requires: --
--|
--| Summary: Validate the image.
--| 
--| Format:  rigIsImage()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigIsImage 
	# IE WILL SOMETIMES RETURN ODD MIME-TYPES DURING UPLOAD, SO HERE WE
	# JUST STANDARDIZE ALL JPEGS OR PNGS TO THE SAME FILE TYPE.
	put "image/x-png,image/png" into tPNGmimes
	put "image/jpg,image/jpe,image/jpeg,image/pjpeg" into tJPGmimes
	
	if sFileType is among the items of tPNGmimes then
		put "image/png" into sFileType
	end if
	
	if sFileType is among the items of tJPGmimes then
		put "image/jpeg" into sFileType
	end if
	
	put "image/gif,image/jpeg,image/png" into tImgMimes
	
	if sFileType is among the items of tImgMimes then
		return TRUE
	end if
	
	return FALSE
end rigIsImage






/*----------------------------------------------------------------------
--| COMMAND rigSetUploadError
--|
--| Author: rabit
--| Version:  1.0
--| Created: 01-09-2011
--| Last Mod: 01-09-2011
--| Requires: rigLangLoadLang(), rigLangLangLine(), rigLogMessage
--|
--| Summary: Set an error message.
--| 
--| Format:  rigSetUploadError param1
--|
--| Parameters: string<pMsg>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetUploadError pMsg
	get rigLangLoadLang("upload")
	
	if pMsg is an array then
		repeat for each key tKey in pMsg
			put pMsg[tKey] into tVal
			get rigLangLangLine(tVal)
			put it into tLangLine
			
			if tLangLine is FALSE then
				put tVal into tMsg
			else
				put tLangLine into tMsg
			end if
			
			if sErrorMsg is an array then
				put the number of lines in the keys of sErrorMsg into tNumErrors
				put tNumErrors + 1 into tNewErrorKey
				put tMsg into sErrorMsg[tNewErrorKey]
			else
				put tMsg into sErrorMsg[1]
			end if
			rigLogMessage "error", tMsg
		end repeat
	else
		get rigLangLangLine(pMsg)
		put it into tLangLine
		
		if tLangLine is FALSE then
			put pMsg into tMsg
		else
			put tLangLine into tMsg
		end if
		
		if sErrorMsg is an array then
			put the number of lines in the keys of sErrorMsg into tNumErrors
			put tNumErrors + 1 into tNewErrorKey
			put tMsg into sErrorMsg[tNewErrorKey]
		else
			put tMsg into sErrorMsg[1]
		end if
		rigLogMessage "error", tMsg
	end if
	
end rigSetUploadError





/*----------------------------------------------------------------------
--| FUNCTION rigValidateUploadPath
--|
--| Author: rabit
--| Version:  1.0
--| Created: 02-09-2011
--| Last Mod: 02-09-2011
--| Requires: rigSetUploadError 
--|
--| Summary: Validate Upload Path. Verifies that it is a
--|					 valid upload path with proper permissions.
--|
--| Format:  rigValidateUploadPath()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigValidateUploadPath 
	if sUploadPath is empty then
		rigSetUploadError "upload_no_filepath"
		return FALSE
	end if
	
	# BUILD PATH TO UPLOAD FOLDER
	set the itemDel to "/"
	put (item 1 to -2 of gBASEPATH) & "/" into tRoot	
	put tRoot & sUploadPath into tUploadPath
	
	if there is not a folder tUploadPath then
		rigSetUploadError "upload_no_filepath"
		return FALSE
	end if
	
	if rigCanWriteFileTo(tUploadPath) is FALSE then
		rigSetUploadError "upload_not_writable"
		return FALSE
	end if
	
	put tUploadPath into sUploadPath
	
	return TRUE
end rigValidateUploadPath





/*----------------------------------------------------------------------
--| FUNCTION _rigPrepFilename
--|
--| Author: rabit
--| Version:  1.1
--| Created: 03-09-2011
--| Last Mod: 09-09-2011
--| Requires: --
--|
--| Summary: Prep filename.
--| 				 Prevents possible script execution from Apache's handling of files multiple
--| 				 extensions http://httpd.apache.org/docs/1.3/mod/mod_mime.html#multipleext
--| 
--| Format:  _rigPrepFilename(param1)
--|
--| Parameters: string<pFilename>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigPrepFilename pFilename
	if ("." is not in pFilename) or (sAllowedTypes is "*") then
		return pFilename
	end if
	
	put pFilename into tParts
	set the itemDel to "."
	put item -1 of tParts into tExt
	put item 1 of tParts into tFilename
	
	put item 2 to -2 of tParts into tParts
	
	put sAllowedTypes into tAllowedTypes
	combine tAllowedTypes using comma
	
	repeat for each item thisItem in tParts
		put toLower(thisItem) into thisItem
		if (thisItem is not among the items of tAllowedTypes) or (rigUploadMimesTypes(thisItem) is FALSE) then
			put tFilename & "." & thisItem & "_" into tFilename
		end if
			put tFilename & "." & thisItem into tFilename
	end repeat
	
	put tFilename & "." & tExt into tFilename
	
	return tFilename
	
end _rigPrepFilename





/*----------------------------------------------------------------------
--| FUNCTION rigUploadMimesTypes
--|
--| Author: rabit
--| Version:  1.1
--| Created: 03-09-2011
--| Last Mod: 03-02-2014
--| Requires: rigFetchAllMimeTypes()
--|
--| Summary: List of mime types.
--| 				 This is a list of mime types.  We use it to validate
--| 				 the "allowed types" set by the developer.
--| 
--| Format:  rigUploadMimesTypes(param1)
--|
--| Parameters: string<pMime>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigUploadMimesTypes pMime
	if sMimes is not an array then
		require gAPPPATH & "config/mimes" & gEXT
		put rigFetchAllMimeTypes() into sMimes
	end if
	
	if sMimes[pMime] is an array then
		put "1,2,3,4,5,6,7,8" into tArrayLvels
		repeat for each item thisItem in tArrayLvels
			if sMimes[pMime][thisItem] is not empty then
				return sMimes[pMime][thisItem]
			end if
		end repeat
		return FALSE
	else
		return sMimes[pMime]
	end if
end rigUploadMimesTypes





/*----------------------------------------------------------------------
--| FUNCTION rigGetExtension
--|
--| Author: rabit
--| Version:  1.0
--| Created: 03-09-2011
--| Last Mod: 03-09-2011
--| Requires: --
--|
--| Summary: Extract the file extension.
--| 
--| Format:  rigGetExtension(param1)
--|
--| Parameters: string<pFilename>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigGetExtension pFilename
	set the itemDel to "."
	return "." & item -1 of pFilename
end rigGetExtension






/*----------------------------------------------------------------------
--| FUNCTION rigIsAllowedFileType
--|
--| Author: rabit
--| Version:  1.2
--| Created: 03-09-2011
--| Last Mod: 21-03-2014
--| Requires: rigSetUploadError, rigGetImageSize(), rigUploadMimesTypes()
--|
--| Summary: Verify that the filetype is allowed.
--| 
--| Format:  rigIsAllowedFileType(param1)
--|
--| Parameters: bool<pIgnoreMime>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigIsAllowedFileType pIgnoreMime
	if sAllowedTypes is "*" then
		return TRUE
	end if
	
	if (sAllowedTypes is not an array) or (sAllowedTypes[1] is empty) then
		rigSetUploadError "upload_no_file_types"
		return FALSE
	end if
	
	if pIgnoreMime is empty then
		put FALSE into tIgnoreMime
	else
		put pIgnoreMime into tIgnoreMime
	end if
	
	
	put sAllowedTypes into tAllowedTypes
	combine tAllowedTypes using ","
	
	put toLower(sFileExt) into tExt
	if char 1 of tExt is "." then
		put char 2 to -1 of tExt into tExt
	end if
	
	if tExt is not among the items of tAllowedTypes then
		return FALSE
	end if
	
	# IMAGES GET SOME ADDITIONAL CHECKS
	put "gif,jpg,jpeg,png,jpe" into tImageTypes
	if tExt is among the items of tImageTypes then
		if rigGetImageSize(sFileTemp) is not an array then
			return FALSE
		end if
		
	end if
	
	if tIgnoreMime is TRUE then
		return TRUE
	end if
	
	put rigUploadMimesTypes(tExt) into tMime
	
	if tMime is sFileType then
		return TRUE
	end if
	
	return FALSE
	
end rigIsAllowedFileType






/*----------------------------------------------------------------------
--| FUNCTION rigGetImageSize
--|
--| Author: rabit
--| Version:  1.1
--| Created: 03-09-11
--| Last Mod: 13-02-14
--| Requires: rigSetUploadError, rigFileSize()
--|
--| Summary: A helper function that gets info about an image file.
--| 
--| Format:  rigGetImageSize(param1)
--|
--| Parameters: string <pFilepath>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigGetImageSize pFilepath
  if pFilepath is empty then
    put sFileTemp into tFilepath
  else
    put pFilepath into tFilepath
  end if

  if there is a file tFilepath then
  else
    rigSetUploadError "upload_invalid_path"  
    return FALSE
  end if
   
  # GET WIDTH, HEIGHT, FORMAT
  import paint from file tFilepath
  put the width of last image into tVals
  put "," & the height of last image after tVals
  put "," & toUpper(the paintCompression of last image) after tVals
  put "," & rigFileSize(tPath) after tVals
  delete last image
   
  # GET MIME TYPE
  put empty into tMime
  put "gif,jpeg,png,rle" into tTypes
  repeat for each item thisItem in tTypes
    if thisItem is toLower(item 3 of tVals) then
      put "image/" & thisItem into tMime
      exit repeat
    end if
  end repeat
  if tMime is empty then
    put "image/jpg" into tMime
  end if
   
  if tVals is not empty then
    put item 1 of tVals into tV["width"]
    put item 2 of tVals into tV["height"]
    put item 3 of tVals into tV["imageType"]
    put item 4 of tVals into tV["sizeStr"]
    put tMime into tV["mimeType"]
      
    return tV
  else
    return FALSE
  end if
end rigGetImageSize






/*----------------------------------------------------------------------
--| FUNCTION rigIsAllowedFileSize
--|
--| Author: rabit
--| Version:  1.0
--| Created: 03-09-2011
--| Last Mod: 03-09-2011
--| Requires: --
--|
--| Summary: Verify that the file is within the allowed size.
--| 
--| Format:  rigIsAllowedFileSize()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigIsAllowedFileSize
	if (sMaxSize <> 0) and (sFileSize > sMaxSize) then
		return FALSE
	else
		return TRUE
	end if
	
end rigIsAllowedFileSize






/*----------------------------------------------------------------------
--| FUNCTION rigIsAllowedDimensions
--|
--| Author: rabit
--| Version:  1.0
--| Created: 03-09-2011
--| Last Mod: 03-09-2011
--| Requires: rigIsImage(), rigGetImageSize()
--|
--| Summary: Verify that the image is within the allowed width/height.
--| 
--| Format:  rigIsAllowedDimensions()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigIsAllowedDimensions
	if rigIsImage() is not TRUE then
		return TRUE
	end if
	
	put rigGetImageSize(sFileTemp) into tImgProps
	
	if (sMaxWidth > 0) and (tImgProps["width"] > sMaxWidth) then
		return FALSE
	end if
	
	if (sMaxHeight > 0) and (tImgProps["height"] > sMaxHeight) then
		return FALSE
	end if
	
	return TRUE
	
end rigIsAllowedDimensions






/*----------------------------------------------------------------------
--| FUNCTION rigCleanFilename
--|
--| Author: rabit
--| Version:  1.0
--| Created: 03-09-2011
--| Last Mod: 03-09-2011
--| Requires: rigStripSlashes() (in Common)
--|
--| Summary: description
--| 
--| Format:  rigCleanFilename(pFilename)
--|
--| Parameters: string<pFilename>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigCleanFilename pFilename
	# CHARS <,>,(,),&,$,?,;,= URL ENCODED 
	put "<!--,-->,',<,>," & quote & ",&,$,=,;,?,/,%20,%22,%3c,%253c,%3e,%0e,%28,%29,%2528,%26,%24,%3f,%3b,%3d" into tBad
	
	repeat for each item thisItem in tBad
		replace thisItem with "" in pFilename
	end repeat
	
	return rigStripSlashes(pFilename)
end rigCleanFilename





/*----------------------------------------------------------------------
--| FUNCTION rigLimitFilenameLength
--|
--| Author: rabit
--| Version:  1.1
--| Created: 03-09-2011
--| Last Mod: 21-03-2014
--| Requires: --
--|
--| Summary: Limit the File Name Length.
--| 
--| Format:  rigLimitFilenameLength(params1, param2)
--|
--| Parameters: string<pFilename>, integer<pLength>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigLimitFilenameLength pFilename pLength
	if (the length of pFilename) < pLength then
		return pFilename
	end if
	
	put "" into tExt
	if "." is in pFilename then
		set the itemDel to "."
		put "." & (item -1 of pFilename) into tExt
		put the length of tExt into tExtLength
		put char 1 to ((the length of pFilename) - (tExtLength +1)) of pFilename into pFilename
	end if
	
	put (char 1 to (pLength - (the length of tExt)) of pFilename) & tExt into tTruncName
	
	return tTruncName
end rigLimitFilenameLength






/*----------------------------------------------------------------------
--| COMMAND rigDoXSSclean
--|
--| Author: rabit
--| Version:  1.0
--| Created: 04-09-2011
--| Last Mod: 04-09-2011
--| Requires: rigFileSize(), rigXssClean() (in Input)
--|
--| Summary: Runs the file through the XSS clean function.
--|					 This prevents people from embedding malicious code in their files.
--|					 Be careful, this might negatively affect certain files in unexpected ways.
--| 
--| Format:  rigDoXSSclean	
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigDoXSSclean
	put sUploadPath & sFileName into tFile
	
	put rigFileSize(tFile) into tFileSize
	if (tFileSize is FALSE) or (tFileSize is 0) then
		return FALSE
	end if
	
	get URL format("binfile:%s", tFile)
	put it into tData
	if tData is empty then
		return FALSE
	end if
	
	put rigXssClean(tData) into tData

	open file tFile for binary write
	if the result is not empty then
		return FALSE
	end if
	
	write tData to file tFile
	if the result is not empty then
		return FALSE
	end if
	
	close file tFile
	
end rigDoXSSclean





/*----------------------------------------------------------------------
--| COMMAND rigSetImageProperties
--|
--| Author: rabit
--| Version:  1.0
--| Created: 04-09-2011
--| Last Mod: 04-09-2011
--| Requires: rigIsImage(), rigGetImageSize()
--|
--| Summary: Set Image Properties.
--|					 Uses ImageMagick to determine the width/height/type of image.
--| 
--| Format:  rigSetImageProperties param1
--|
--| Parameters: string <pPath>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetImageProperties pPath
	if rigIsImage() is FALSE then
		exit rigSetImageProperties
	end if

	put rigGetImageSize(pPath) into tImgProps
	
	if tImgProps is an array then
		put "gif,jpeg,png" into tTypes
		
		put tImgProps["width"] into sImageWidth
		put tImgProps["height"] into sImageHeight
	
		# GET IMAGE TYPE
		if (tImgProps["imageType"] is "") or (tImgProps["imageType"] is not among the items of tTypes) then
			put "unknown" into sImageType
		else
			put tImgProps["imageType"] into sImageType
		end if
		
		# BUILD STRING CONTAINING HEIGHT AND WIDTH
		put "height=" & quote & sImageHeight & quote && "width=" & quote & sImageWidth & quote into sImageSizeStr
	end if
	
end rigSetImageProperties





/*----------------------------------------------------------------------
--| COMMAND _rigFileMimeType
--|
--| Author: rabit
--| Version:  1.0
--| Created: 30-01-2015
--| Last Mod: --
--| Requires: --
--|
--| Summary: Detects the (actual) MIME type of the uploaded file, if possible.
--|            The input array is expected to be $_FILES[tField] (see rigDoUpload).
--| 
--| Format:  _rigFileMimeType param1
--|
--| Parameters: array <pFile>
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigFileMimeType pFile
  # EXPRESSION TO VALIDATE THE MIME INFO STRING (e.g. image/jpeg; charset=binary)
  put "^([a-z\-]+\/[a-z0-9\-\.\+]+)(;\s.+)?$" into tRegexp
   
  # UNIX-TYPE SYSTEMS PROVIDE A "NATIVE" WAY TO DETECT THE FILE TYPE, WHICH
  # IS MORE SECURE THAN DEPENDING ON THE VALUE OF $_FILES[tField]["type"]
  if the platform <> "Win32" then
    put shell("file --brief --mime" && pFile["filename"] && "2>&1") into tMime
      
    get matchText(tMime,tRegexp,sFileType,tCharset)
    if it is TRUE then
      exit _rigFileMimeType
    end if
  end if
  
  put pFile["type"] into sFileType
end _rigFileMimeType







--| END OF Upload.lc
--| Location:  ./system/libraries/Upload.lc
----------------------------------------------------------------------