<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2016, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# revIgniter Image Manipulation Library
#
#
# @package		revIgniter
# @subpackage	Libraries
# @category	  Image
# @author		  rabit@revigniter.com
# @link		    http://revigniter.com/userGuide/libraries/image_lib.html
##

## ------------------------------------------------------------------------


# LOGGING
rigLogMessage "debug", "Image Library Loaded"


# DECLARE VARIABLES
local sImgImageLibrary, sImgDynamicOutput, sImgDynamicOutputURI, sImgSourceImage, sImgNewImage, sImgWidth, sImgHeight, sImgQuality, sImgCreateThumb
local sImgThumbMarker, sImgMaintainRatio, sImgMasterDim, sImgRotationAngle, sImgXaxis, sImgYaxis, sImgCropAlignment, sImgCropToFit
-- watermark vars
local sImgWMtext, sImgWMtype, sImgWMoverlaypath, sImgWMfont, sImgWMfontsize, sImgWMalignment
local sImgWMhorAlignment, sImgWMhorOffset, sImgWMvrtOffset, sImgWMfontcolor, sImgWMshadowcolor, sImgWMshadowdistance, sImgWMopacity
-- private vars
local sImgSourceFolder, sImgDestFolder, sImgMimeType, sImgOrigWidth, sImgOrigHeight, sImgImageType, sImgSizeStr, sImgFullSrcPath, sImgFullDstPath 
local sImgDestImage, sImgErrorMsg, sImgWMuseDropshadow, sImgWMTextImgWidth, sImgWMtextFileName


put "imagemagick" into sImgImageLibrary			-- currently only ImageMagick is suported
put FALSE into sImgDynamicOutput						-- whether to send to browser or write to disk
put "imageSrc" into sImgDynamicOutputURI		-- dynamic output image source file path relative to the controllers directory
put "90" into sImgQuality
put FALSE into sImgCreateThumb
put "_thumb" into sImgThumbMarker
put TRUE into sImgMaintainRatio							-- whether to maintain aspect ratio when resizing or use hard values
put "auto" into sImgMasterDim								-- auto, height, or width.  Determines what to use as the master dimension
put "Center" into sImgCropAlignment					-- crop alignment: Center, North, East, South, West, NorthEast, SouthEast, SouthWest, NorthWest
put FALSE into sImgCropToFit								-- crop if the target width/height is not in correct proportion

-- watermark vars
put "text" into sImgWMtype									-- type of watermarking,  options:  text/overlay
put "16" into sImgWMfontsize
put "Helvetica" into sImgWMfont
put "South" into sImgWMalignment						-- watermark alignment: Center, North, East, South, West, NorthEast, SouthEast, SouthWest, NorthWest
put "0" into sImgWMhorOffset								-- lets you push text to the right/left
put "10" into sImgWMvrtOffset								-- lets you push  text up/down
put "#f6f6f6" into sImgWMfontcolor					-- text color
put "#656565" into sImgWMshadowcolor				-- text shadow color
put "1" into sImgWMshadowdistance						-- dropshadow distance
put "15" into sImgWMopacity									-- image opacity: 1 - 100  Only works with image

-- private vars
put FALSE into sImgWMuseDropshadow
put "600" into sImgWMTextImgWidth
put "stamp" into sImgWMtextFileName
put "200x200" into sImgSizeHintForThumb





/*----------------------------------------------------------------------
--| COMMAND rigRunInitialImageConfig
--|
--| Author: rabit
--| Version:  1.1
--| Created: 10-01-10
--| Last Mod: 22-12-14
--| Requires: rigNumToCodepoint(), rigInitializeImage
--|
--| Summary: Run initial configuration procedures.
--| 
--| Format:  rigRunInitialImageConfig param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigRunInitialImageConfig pConfig
	put pConfig into tConfig

	if tConfig is not an array then
		if tConfig is not empty then
			split tConfig using rigNumToCodepoint(1) and rigNumToCodepoint(2)
		end if
	end if

	if tConfig is an array then
		rigInitializeImage tConfig
	end if
end rigRunInitialImageConfig









/*----------------------------------------------------------------------
--| COMMAND rigInitializeImage
--|
--| Author: rabit
--| Version:  1.1
--| Created: 10-01-10
--| Last Mod: 21-03-14
--| Requires: rigSetInitialImageValue, rigSetImgError, rigGetImageProperties(), rigImageReproportion
--|
--| Summary: Initialize preferences.
--| 
--| Format:  rigInitializeImage param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigInitializeImage pConfig
	# CONVERT ARRAY ELEMENTS INTO LIBRARY VARIABLES
	if pConfig is an array then
		repeat for each key tKey in pConfig
			put pConfig[tKey] into tVal

			rigSetInitialImageValue tKey, tVal

		end repeat
	end if

	# IS THERE A SOURCE IMAGE?
	# IF NOT, THERE'S NO REASON TO CONTINUE
	if sImgSourceImage is "" then
		rigSetImgError "imglib_source_image_required"

		return FALSE
	end if

	put toLower(sImgImageLibrary) into sImgImageLibrary

	# SET THE FULL SERVER PATH
	if char 1 of sImgSourceImage is "/" then
		put the defaultFolder & sImgSourceImage into tFullSourcePath
	else
		put the defaultFolder & "/" & sImgSourceImage into tFullSourcePath
	end if

	set the itemDelimiter to "/"
	put item -1 of tFullSourcePath into sImgSourceImage
	put item 1 to -2 of tFullSourcePath into sImgSourceFolder

	# SET THE IMAGE PROPERTIES
	if rigGetImageProperties(sImgSourceFolder & "/" & sImgSourceImage) is FALSE then
		return FALSE
	end if

	# ASSIGN THE "NEW" IMAGE NAME/PATH
	#
	# IF THE USER HAS SET A "NEW_IMAGE" NAME IT MEANS
	# WE ARE MAKING A COPY OF THE SOURCE IMAGE. IF NOT
	# IT MEANS WE ARE ALTERING THE ORIGINAL.  WE'LL
	# SET THE DESTINATION FILENAME AND PATH ACCORDINGLY.
	if sImgNewImage is empty then
		put sImgSourceImage into sImgDestImage
		put sImgSourceFolder into sImgDestFolder
	else
		if "/" is not in sImgNewImage then
			put sImgSourceFolder into sImgDestFolder
			put sImgNewImage into sImgDestImage
		else
			if char 1 of sImgSourceImage is "/" then
				put the defaultFolder & sImgNewImage into tFullDestPath
			else
				put the defaultFolder & "/" & sImgNewImage into tFullDestPath
			end if
	
			# IS THERE A FILE NAME?
			put "(?i)\.(jpg|jpeg|gif|png)" into tRegEx
   			get matchText(tFullDestPath, tRegEx)
			if it is FALSE then
				put tFullDestPath & "/" into sImgDestFolder
				put sImgSourceImage into sImgDestImage
			else
				put item -1 of tFullDestPath into sImgDestImage
				put item 1 to -2 of tFullDestPath into sImgDestFolder
			end if			

		end if
	end if

	# COMPILE THE FINALIZED FILENAMES/PATHS
	#
	# WE'LL CREATE TWO MASTER STRINGS CONTAINING THE
	# FULL SERVER PATH TO THE SOURCE IMAGE AND THE
	# FULL SERVER PATH TO THE DESTINATION IMAGE.
	# WE'LL ALSO SPLIT THE DESTINATION IMAGE NAME
	# SO WE CAN INSERT THE THUMBNAIL MARKER IF NEEDED.
	if (sImgCreateThumb is FALSE) or (sImgThumbMarker is empty) then
		put empty into sImgThumbMarker
	end if

	put rigExplodeImgName(sImgDestImage) into tXP
	put tXP["name"] into tFileName
	put tXP["ext"] into tFileExt

	put sImgSourceFolder & "/" & sImgSourceImage into sImgFullSrcPath
	put sImgDestFolder & "/" & tFileName & sImgThumbMarker & tFileExt into sImgFullDstPath

	#SHOULD WE MAINTAIN IMAGE PROPORTIONS?
	#
	# WHEN CREATING THUMBS OR COPIES, THE TARGET WIDTH/HEIGHT
	# MIGHT NOT BE IN CORRECT PROPORTION WITH THE SOURCE
	# IMAGE'S WIDTH/HEIGHT.  WE'LL RECALCULATE IT HERE.
	if (sImgMaintainRatio is TRUE) and (sImgCropToFit is not TRUE) and (sImgWidth <> "") and (sImgHeight <> "") then
		rigImageReproportion
	end if

	# WAS A WIDTH AND HEIGHT SPECIFIED?
	#
	# IF THE DESTINATION WIDTH/HEIGHT WAS
	# NOT SUBMITTED WE WILL USE THE VALUES
	# FROM THE ACTUAL FILE
	if sImgWidth is empty then
		put sImgOrigWidth into sImgWidth
	end if
	if sImgHeight is empty then
		put sImgOrigHeight into sImgHeight
	end if

	# SET THE QUALITY
	replace "%" with "" in sImgQuality
	put rigTrim(sImgQuality) into sImgQuality
	if (sImgQuality is empty) or (sImgQuality = 0) or (sImgQuality is not a number) then
		put "90" into sImgQuality
	end if

	# SET THE X/Y COORDINATES
	put sImgXaxis into tImgXaxisTemp
	replace "%" with "" in tImgXaxisTemp

	put sImgYaxis into tImgYaxisTemp
	replace "%" with "" in tImgYaxisTemp

	if (sImgXaxis is empty) or (tImgXaxisTemp is not a number) then
		put "0" into sImgXaxis
	end if
	if (sImgYaxis is empty) or (tImgYaxisTemp is not a number) then
		put "0" into sImgYaxis
	end if

	# WATERMARK-RELATED STUFF...
	if sImgWMfontcolor <> "" then
		if the number of chars of sImgWMfontcolor = 6 then
			put "#" & sImgWMfontcolor into sImgWMfontcolor
		end if
	end if

	if sImgWMshadowcolor <> "" then
		if the number of chars of sImgWMshadowcolor = 6 then
			put "#" & sImgWMshadowcolor into sImgWMshadowcolor
		end if
		put TRUE into sImgWMuseDropshadow
	end if

	if sImgWMoverlaypath <> "" then
		if char 1 of sImgWMoverlaypath is "/" then
			put the defaultFolder & sImgWMoverlaypath into sImgWMoverlaypath
		else
			put the defaultFolder & "/" & sImgWMoverlaypath into sImgWMoverlaypath
		end if
	end if

	return TRUE
end rigInitializeImage








/*----------------------------------------------------------------------
--| COMMAND rigSetInitialImageValue
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-01-10
--| Last Mod: 10-01-10
--| Requires: --
--|
--| Summary: Set initial values.
--| 
--| Format:  rigSetInitialImageValue param1, param2
--|
--| Parameters: string <pVarName>, mixed <pValue>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetInitialImageValue pVarName pValue
	put "sImg" & pVarName into tVarName

	switch tVarName
		case "sImgCropToFit"
        		put pValue into sImgCropToFit
		break
		case "sImgImageLibrary"
        		put pValue into sImgImageLibrary
		break
		case "sImgDynamicOutput"
        		put pValue into sImgDynamicOutput
		break
		case "sImgDynamicOutputURI"
			put pValue into sImgDynamicOutputURI
		break
		case "sImgSourceImage"
        		put pValue into sImgSourceImage
		break
		case "sImgNewImage"
        		put pValue into sImgNewImage
		break
		case "sImgWidth"
        		put pValue into sImgWidth
		break
		case "sImgHeight"
        		put pValue into sImgHeight
		break
		case "sImgQuality"
        		put pValue into sImgQuality
		break
		case "sImgCreateThumb"
        		put pValue into sImgCreateThumb
		break
		case "sImgThumbMarker"
        		put pValue into sImgThumbMarker
		break
		case "sImgMaintainRatio"
        		put pValue into sImgMaintainRatio
		break
		case "sImgMasterDim"
        		put pValue into sImgMasterDim
		break
		case "sImgRotationAngle"
        		put pValue into sImgRotationAngle
		break
		case "sImgXaxis"
        		put pValue into sImgXaxis
		break
		case "sImgYaxis"
        		put pValue into sImgYaxis
		break
		case "sImgCropAlignment"
			put pValue into sImgCropAlignment
		break
		case "sImgWMtext"
        		put pValue into sImgWMtext
		break
		case "sImgWMtype"
        		put pValue into sImgWMtype
		break
		case "sImgWMoverlaypath"
        		put pValue into sImgWMoverlaypath
		break
		case "sImgWMfont"
        		put pValue into sImgWMfont
		break
		case "sImgWMfontsize"
        		put pValue into sImgWMfontsize
		break
		case "sImgWMalignment"
        		put pValue into sImgWMalignment
		break
		case "sImgWMhorOffset"
        		put pValue into sImgWMhorOffset
		break
		case "sImgWMvrtOffset"
        		put pValue into sImgWMvrtOffset
		break
		case "sImgWMfontcolor"
        		put pValue into sImgWMfontcolor
		break
		case "sImgWMshadowcolor"
        		put pValue into sImgWMshadowcolor
		break
		case "sImgWMshadowdistance"
        		put pValue into sImgWMshadowdistance
		break
		case "sImgWMopacity"
        		put pValue into sImgWMopacity
		break
    end switch
end rigSetInitialImageValue







/*----------------------------------------------------------------------
--| COMMAND rigImgClear
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: --
--|
--| Summary: Resets values in case this library is used in a loop.
--| 
--| Format:  rigImgClear
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigImgClear
	put "sImgSourceFolder,sImgDestFolder,sImgSourceImage,sImgFullSrcPath,sImgFullDstPath,sImgNewImage,sImgImageType,sImgSizeStr,sImgQuality,sImgOrigWidth,sImgOrigHeight,sImgRotationAngle,sImgXaxis,sImgYaxis,sImgCropAlignment,sImgWMoverlaypath,sImgDynamicOutput,sImgDynamicOutputURI,sImgWMfontsize,sImgWMtext,sImgWMalignment,sImgWMhorOffset,sImgWMvrtOffset,sImgWMfontcolor,sImgWMuseDropshadow,sImgWMshadowcolor,sImgWMshadowdistance,sImgWMopacity" into tProps

	 repeat for each item thisItem in tProps
      		do "put empty into" && thisItem
   	end repeat

	# SPECIAL CONSIDERATION FOR sImgMasterDim
	put "auto" into sImgMasterDim
end rigImgClear








/*----------------------------------------------------------------------
--| FUNCTION rigImageResize
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: rigImageProcessImagemagick()
--|
--| Summary: This is a wrapper function.
--| 
--| Format:  rigImageResize()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigImageResize
	return rigImageProcessImagemagick("resize")
end rigImageResize







/*----------------------------------------------------------------------
--| FUNCTION rigImageCrop
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: rigImageProcessImagemagick()
--|
--| Summary: This is a wrapper function.
--| 
--| Format:  rigImageCrop()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigImageCrop
	return rigImageProcessImagemagick("crop")
end rigImageCrop








/*----------------------------------------------------------------------
--| FUNCTION rigImageRotate
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: rigImageProcessImagemagick()
--|
--| Summary: This is a wrapper function.
--| 
--| Format:  rigImageRotate()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigImageRotate
	return rigImageProcessImagemagick("rotate")
end rigImageRotate








/*----------------------------------------------------------------------
--| FUNCTION rigImageProcessImagemagick
--|
--| Author: rabit
--| Version:  1.1
--| Created: 12-01-10
--| Last Mod: 18-05-12
--| Requires: rigImageSourceTag(), rigImageSourceFile(), _rigWriteImgSrcFile(), rigSetImgError
--|
--| Summary: This function will resize, crop or rotate.
--| 
--| Format:  rigImageProcessImagemagick(param1)
--|
--| Parameters: string <pAction>
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigImageProcessImagemagick pAction
	if pAction is "" then
		put "resize" into tAction
	else
		put pAction into tAction
	end if

	# BUILD THE COMMAND
	put "convert -quality" && sImgQuality & " " into tCmd
	
	# CROP
	if tAction is "crop" then
		if ("%" is in sImgXaxis) or ("%" is in sImgYaxis) then
			put sImgXaxis into tXpercent
			put sImgYaxis into tYpercent

			put TRUE into tPercentageCrop

			replace "%" with "" in tXpercent
			replace "%" with "" in tYpercent
		end if

		# SAVE OUTPUT TO DISK
		if sImgDynamicOutput is not TRUE then
			if tPercentageCrop is TRUE then
				put sImgFullSrcPath && "-gravity" && sImgCropAlignment && "-crop" && tXpercent & "x" & tYpercent & "%+0+0" && sImgFullDstPath after tCmd
			else
				--put sImgFullSrcPath && "-crop" && sImgWidth & "x" & sImgHeight & "+" & sImgXaxis & "+" & sImgYaxis && sImgFullDstPath && "2>&1" after tCmd
				put sImgFullSrcPath && "-crop" && sImgWidth & "x" & sImgHeight & "+" & sImgXaxis & "+" & sImgYaxis && sImgFullDstPath after tCmd
			end if

			put shell(tCmd) into tRetval
	
		else
			# DYNAMIC OUTPUT
			# CALCULATE NEW SIZE
			if tPercentageCrop is TRUE then
				put round((sImgOrigWidth / 100) * tXpercent) into tNewWidth
   				put round((sImgOrigHeight / 100) * tYpercent) into tNewHeight
			else
				put sImgOrigWidth - sImgXaxis  into tNewWidth
				put sImgOrigHeight - sImgYaxis  into tNewHeight
			end if
			
			# BUILD IMAGE SOURCE TAG
			put rigImageSourceTag(tNewWidth, tNewHeight) into tImgTag

			if tPercentageCrop is TRUE then
				put "<?rev" & return & \
				return & \
				"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && "-gravity" && sImgCropAlignment && "-crop" && tXpercent & "x" & tYpercent & "%+0+0" && sImgImageType & ":-" & quote && "into tCmd" & return & \
				"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
				"put shell(tCmd)" into tImgSrcData
			else
				put "<?rev" & return & \
				return & \
				"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && "-crop" && sImgWidth & "x" & sImgHeight & "+" & sImgXaxis & "+" & sImgYaxis && sImgImageType & ":-" & quote && "into tCmd" & return & \
				"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
				"put shell(tCmd)" into tImgSrcData
			end if

			# BUILD PATH TO IMAGE SOURCE FILE
			put rigImageSourceFile() into tFilePath

			get _rigWriteImgSrcFile(tFilePath, tImgSrcData)
		
			# CHECK IF THERE WAS AN ERROR WHILE WRITING THE FILE
			if it is TRUE then

				return tImgTag
			else
					
				return FALSE
			end if

		end if

	# ROTATE
	else if tAction is "rotate" then
		switch sImgRotationAngle
			case "hor"
        			put "-flop" into tAngle
			break
			case "vrt"
        			put "-flip" into tAngle
			break
			default
				put "-rotate" && sImgRotationAngle into tAngle
		end switch

		# SAVE OUTPUT TO DISK
		if sImgDynamicOutput is not TRUE then
			--put sImgFullSrcPath && tAngle && sImgFullDstPath && "2>&1" after tCmd
			put sImgFullSrcPath && tAngle && sImgFullDstPath after tCmd

			put shell(tCmd) into tRetval

		else
			# DYNAMIC OUTPUT
			# CALCULATE NEW SIZE
			if sImgRotationAngle is a number then
				if (abs(sImgRotationAngle) = 90) or (abs(sImgRotationAngle) = 270) then
					put sImgOrigWidth into tNewHeight
					put sImgOrigHeight into tNewWidth
				else
					put sImgOrigWidth into tNewWidth
					put sImgOrigHeight into tNewHeight
				end if
			else
				put sImgOrigWidth into tNewWidth
				put sImgOrigHeight into tNewHeight
			end if

			# BUILD IMAGE SOURCE TAG
			put rigImageSourceTag(tNewWidth, tNewHeight) into tImgTag

			put "<?rev" & return & \
				return & \
				"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && tAngle && sImgImageType & ":-" & quote && "into tCmd" & return & \
				"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
				"put shell(tCmd)" into tImgSrcData
			
			# BUILD PATH TO IMAGE SOURCE FILE
			put rigImageSourceFile() into tFilePath

			get _rigWriteImgSrcFile(tFilePath, tImgSrcData)
		
			# CHECK IF THERE WAS AN ERROR WHILE WRITING THE FILE
			if it is TRUE then

				return tImgTag
			else
					
				return FALSE
			end if

		end if

	# RESIZE
	else 
		# SAVE OUTPUT TO DISK
		if sImgDynamicOutput is not TRUE then
			if sImgMaintainRatio is TRUE then
				if sImgCreateThumb is TRUE then
					if sImgCropToFit is TRUE then
						# NEEDS IM VERSION 6.3.8-3 OR HIGHER
						put " -define jpeg:size=" & sImgSizeHintForThumb && sImgFullSrcPath && "-thumbnail" && sImgWidth & "x" & sImgHeight & "^ -gravity center -extent" && sImgWidth & "x" & sImgHeight && sImgFullDstPath after tCmd					
					else
						put " -define jpeg:size=" & sImgSizeHintForThumb && sImgFullSrcPath && "-thumbnail" && "'" & sImgWidth & "x" & sImgHeight & ">'" && sImgFullDstPath after tCmd
					end if -- if sImgCropToFit is TRUE then
					
				else
					if sImgCropToFit is TRUE then
						# NEEDS IM VERSION 6.3.8-3 OR HIGHER
						put sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight & "^ -gravity center -extent" && sImgWidth & "x" & sImgHeight && sImgFullDstPath after tCmd
					else
						--put sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight && sImgFullDstPath  && "2>&1" after tCmd
						put sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight && sImgFullDstPath after tCmd
					end if -- if sImgCropToFit is TRUE then
									
				end if -- if sImgCreateThumb is TRUE the
				
			else
				put sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight & "!" && sImgFullDstPath after tCmd
			end if -- if sImgMaintainRatio is TRUE then
			
			put shell(tCmd) into tRetval
			
		else
			# DYNAMIC OUTPUT
			# BUILD IMAGE SOURCE TAG
			-- put rigImageSourceTag(tNewWidth, tNewHeight) into tImgTag
			put rigImageSourceTag(sImgWidth, sImgHeight) into tImgTag

			if sImgMaintainRatio is TRUE then
				if sImgCreateThumb is TRUE then
					if sImgCropToFit is TRUE then
						# NEEDS IM VERSION 6.3.8-3 OR HIGHER
						put "<?rev" & return & \
							return & \
							"put" && quote & "convert -quality" && sImgQuality && "-define jpeg:size=" & sImgSizeHintForThumb && sImgFullSrcPath && "-thumbnail" && sImgWidth & "x" & sImgHeight & "^ -gravity center -extent" && sImgWidth & "x" & sImgHeight && sImgImageType & ":-" & quote && "into tCmd" & return & \
							"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
							"put shell(tCmd)" into tImgSrcData

					else
						put "<?rev" & return & \
							return & \
							"put" && quote & "convert -quality" && sImgQuality && "-define jpeg:size=" & sImgSizeHintForThumb && sImgFullSrcPath && "-thumbnail" && "'" & sImgWidth & "x" & sImgHeight & ">'" && sImgImageType & ":-" & quote && "into tCmd" & return & \
							"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
							"put shell(tCmd)" into tImgSrcData
					
					end if -- if sImgCropToFit is TRUE then
						
					else
							if sImgCropToFit is TRUE then
								# NEEDS IM VERSION 6.3.8-3 OR HIGHER
								put "<?rev" & return & \
									return & \
									"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight & "^ -gravity center -extent" && sImgWidth & "x" & sImgHeight && sImgImageType & ":-" & quote && "into tCmd" & return & \
									"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
									"put shell(tCmd)" into tImgSrcData

							else
							
								put "<?rev" & return & \
									return & \
									"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight && sImgImageType & ":-" & quote && "into tCmd" & return & \
									"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
									"put shell(tCmd)" into tImgSrcData

							end if -- if sImgCropToFit is TRUE then
						
				end if -- if sImgCreateThumb is TRUE then
					
			else
				put "<?rev" & return & \
					return & \
					"put" && quote & "convert -quality" && sImgQuality && sImgFullSrcPath && "-resize" && sImgWidth & "x" & sImgHeight & "!" && sImgImageType & ":-" & quote && "into tCmd" & return & \
					"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
					"put shell(tCmd)" into tImgSrcData
			end if -- if sImgMaintainRatio is TRUE then
			
			# BUILD PATH TO IMAGE SOURCE FILE
			put rigImageSourceFile() into tFilePath

			get _rigWriteImgSrcFile(tFilePath, tImgSrcData)
		
			# CHECK IF THERE WAS AN ERROR WHILE WRITING THE FILE
			if it is TRUE then

				return tImgTag
			else
					
				return FALSE
			end if

		end if

	end if

	# DID IT WORK?
	if tRetval is not empty then
		rigSetImgError "imglib_image_process_failed"

		return FALSE
	end if

	return TRUE
end rigImageProcessImagemagick








----------------------------------------------------------------------
--| FUNCTION rigImageWatermark
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-01-10
--| Last Mod: 13-01-10
--| Requires: rigOverlayWatermark(), rigTextWatermark()
--|
--| Summary: This is a wrapper function that chooses the type
--|                    of watermarking based on the specified preference.
--| 
--| Format:  rigImageWatermark()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------

function rigImageWatermark
	if sImgWMtype is "overlay" then
		return rigOverlayWatermark()
	else
		return rigTextWatermark()
	end if
end rigImageWatermark








----------------------------------------------------------------------
--| FUNCTION rigOverlayWatermark
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-01-10
--| Last Mod: 13-01-10
--| Requires: --
--|
--| Summary: Watermark grafic version.
--| 
--| Format:  rigOverlayWatermark()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------

function rigOverlayWatermark
	put empty into tRetval

	#FETCH SOURCE IMAGE PROPERTIES
	--put rigGetImageProperties() into tPropsAvailable

	--if tPropsAvailable is TRUE then
		# SAVE OUTPUT TO DISK
		if sImgDynamicOutput is not TRUE then
			put "composite -quality" && sImgQuality &&  "-dissolve " && sImgWMopacity & "% -gravity" && sImgWMalignment && \
					"-geometry +" & sImgWMhorOffset & "+" & sImgWMvrtOffset && sImgWMoverlaypath && sImgFullSrcPath && sImgFullDstPath into tCmd

			put shell(tCmd) into tRetval

		else
			# DYNAMIC OUTPUT
			# BUILD IMAGE SOURCE TAG
			put rigImageSourceTag() into tImgTag

			put "<?rev" & return & \
				return & \
				"put" && quote & "composite -quality" && sImgQuality && "-dissolve" && sImgWMopacity & "% -gravity" && sImgWMalignment && "-geometry +" & sImgWMhorOffset & "+" & sImgWMvrtOffset && sImgWMoverlaypath && sImgFullSrcPath && sImgImageType & ":-" & quote && "into tCmd" & return & \
				"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
				"put shell(tCmd)" into tImgSrcData
	
				# BUILD PATH TO IMAGE SOURCE FILE
				put rigImageSourceFile() into tFilePath

				get _rigWriteImgSrcFile(tFilePath, tImgSrcData)

				# CHECK IF THERE WAS AN ERROR WHILE WRITING THE FILE
				if it is TRUE then

					return tImgTag
				else
					
					return FALSE
				end if
		end if

	--else

		--return FALSE
	--end if

	# DID IT WORK?
	if tRetval is not empty then
		rigSetImgError "imglib_image_process_failed"

		return FALSE
	end if

	return TRUE
end rigOverlayWatermark








----------------------------------------------------------------------
--| FUNCTION rigTextWatermark
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-01-10
--| Last Mod: 13-01-10
--| Requires: rigIMknownFonts(), rigSetImgError
--|
--| Summary: Watermark text version.
--| 
--| Format:  rigTextWatermark()
--|
--| Parameters: --
--|
--| Return: bool
----------------------------------------------------------------------

function rigTextWatermark
	# CHECK IF CHOSEN FONT IS AVAILABLE
	if sImgWMfont is not empty then
		put rigIMknownFonts() into tAllFonts
		if sImgWMfont is not in tAllFonts then
			rigSetImgError "imglib_missing_font"

			return FALSE
		end if

	else
		rigSetImgError "imglib_missing_font"
		
		return FALSE
	end if

	put empty into tRetval

	#FETCH SOURCE IMAGE PROPERTIES
	--put rigGetImageProperties() into tPropsAvailable

	--if tPropsAvailable is TRUE then
		# IS THERE A DROP SHADOW?
		put sImgWMshadowdistance into tShadowDistance
		if sImgWMuseDropshadow is FALSE then
			put sImgWMfontcolor into tShadowcolor
			put "0" into tShadowDistance
		else
			put sImgWMshadowcolor into tShadowcolor
		end if

		put sImgWMfontsize * 2 into tTextImgHeight

		# SHADOW DISTANCE STRINGS
		put tShadowDistance & "," & tShadowDistance into tPosShadowDist
		put "-" & tShadowDistance & ",-" & tShadowDistance into tNegShadowDist

		# SAVE OUTPUT TO DISK
		if sImgDynamicOutput is not TRUE then

			put "convert -size" && sImgWMTextImgWidth & "x" & tTextImgHeight && "xc:" & tShadowcolor && "-font" && sImgWMfont && "-pointsize" && sImgWMfontsize && "-gravity center -draw" && quote & "fill" &&  sImgWMfontcolor && "text 0,0  '" & sImgWMtext &"'" & quote && sImgWMtextFileName & "_fgnd.png" \
				& return & \
				"convert -size" && sImgWMTextImgWidth & "x" & tTextImgHeight && "xc:black -font" && sImgWMfont && "-pointsize" && sImgWMfontsize && "-gravity center -draw" && quote & "fill white  text" && tPosShadowDist && "'" & sImgWMtext & "' text  0,0  '" & sImgWMtext & "' fill black  text" && tNegShadowDist && "'" & sImgWMtext & "'" & quote && "+matte" && sImgWMtextFileName & "_mask.png" \
				& return & \
				"composite -compose CopyOpacity" && sImgWMtextFileName & "_mask.png" && sImgWMtextFileName & "_fgnd.png" && sImgWMtextFileName & ".png" \
				& return & \
				"mogrify -trim +repage" && sImgWMtextFileName & ".png" \
				& return & \
				"composite -quality" && sImgQuality && "-gravity" && sImgWMalignment && "-geometry +" & sImgWMhorOffset & "+" & sImgWMvrtOffset && sImgWMtextFileName & ".png" && sImgFullSrcPath && sImgFullDstPath into tCmd
	
			put shell(tCmd) into tRetval

		else
			# DYNAMIC OUTPUT
			# BUILD IMAGE SOURCE TAG
			put rigImageSourceTag() into tImgTag

			put "<?rev" & return & \
				return & \
				"put" && quote & "convert -size" && sImgWMTextImgWidth & "x" & tTextImgHeight && "xc:" & tShadowcolor && "-font" && sImgWMfont && "-pointsize" && sImgWMfontsize && "-gravity center -draw" & quote && "&& quote &" && quote & "fill" &&  sImgWMfontcolor && "text 0,0  '" & sImgWMtext &"'" & quote && "& quote &&" && quote & sImgWMtextFileName & "_fgnd.png" & quote && "& return & \" & return & \
				quote & "convert -size" && sImgWMTextImgWidth & "x" & tTextImgHeight && "xc:black -font" && sImgWMfont && "-pointsize" && sImgWMfontsize && "-gravity center -draw" & quote && "&& quote &" && quote & "fill white  text" && tPosShadowDist && "'" & sImgWMtext & "' text  0,0  '" & sImgWMtext & "' fill black  text" && tNegShadowDist && "'" & sImgWMtext & "'" & quote && "& quote &&" && quote & "+matte" && sImgWMtextFileName & "_mask.png" & quote && "& return & \" & return & \
				quote & "composite -compose CopyOpacity" && sImgWMtextFileName & "_mask.png" && sImgWMtextFileName & "_fgnd.png" && sImgWMtextFileName & ".png" & quote && "& return & \" & return & \
				quote & "mogrify -trim +repage" && sImgWMtextFileName & ".png" & quote && "& return & \" & return & \
				quote & "composite -quality" && sImgQuality && "-gravity" && sImgWMalignment && "-geometry +" & sImgWMhorOffset & "+" & sImgWMvrtOffset && sImgWMtextFileName & ".png" && sImgFullSrcPath && sImgImageType & ":-" & quote && "into tCmd" & return & \
				"put header" && quote & "Content-type:" && sImgMimeType & quote & return & \
				"put shell(tCmd)" into tImgSrcData

				# BUILD PATH TO IMAGE SOURCE FILE
				put rigImageSourceFile() into tFilePath

				get _rigWriteImgSrcFile(tFilePath, tImgSrcData)

				# CHECK IF THERE WAS AN ERROR WHILE WRITING THE FILE
				if it is TRUE then

					return tImgTag
				else
					
					return FALSE
				end if

		end if

	--else

		--return FALSE
	--end if

	# DID IT WORK?
	if tRetval is not empty then
		rigSetImgError "imglib_image_process_failed"

		return FALSE
	end if

	return TRUE
end rigTextWatermark








----------------------------------------------------------------------
--| COMMAND rigImageReproportion
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: --
--|
--| Summary: When creating thumbs, the desired width/height
--|                   can end up warping the image due to an incorrect
--|                   ratio between the full-sized image and the thumb.
--|
--|                  This command lets us re-proportion the width/height
--|                  if users choose to maintain the aspect ratio when resizing.
--| 
--| Format:  rigImageReproportion
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------

command rigImageReproportion
	if (sImgWidth is not a number) or (sImgHeight is not a number) or (sImgWidth = 0) or (sImgHeight = 0) then
		exit rigImageReproportion
	end if

	if (sImgOrigWidth is not a number) or (sImgOrigHeight is not a number) or (sImgOrigWidth = 0) or (sImgOrigHeight = 0) then
		exit rigImageReproportion
	end if

	put rigCeil(sImgOrigWidth * sImgHeight / sImgOrigHeight) into tNewWidth
	put rigCeil(sImgWidth * sImgOrigHeight / sImgOrigWidth) into tNewHeight

	put ((sImgOrigHeight / sImgOrigWidth) - (sImgHeight / sImgWidth)) into tRatio

	if (sImgMasterDim <> "width") and (sImgMasterDim <> "height") then
		if tRatio < 0 then
			put "width" into sImgMasterDim
		else
			put "height" into sImgMasterDim
		end if
	end if

	if (sImgWidth <> tNewWidth) and (sImgHeight <> tNewHeight) then
		if sImgMasterDim is "height" then
			put tNewWidth into sImgWidth
		else
			put tNewHeight into sImgHeight
		end if
	end if
end rigImageReproportion








----------------------------------------------------------------------
--| FUNCTION rigGetImageProperties
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-01-10
--| Last Mod: 11-01-10
--| Requires: rigSetImgError
--|
--| Summary: A helper function that gets info about the file.
--| 
--| Format:  rigGetImageProperties(param1, param2)
--|
--| Parameters: string <pPath>, bool <pReturn>
--|
--| Return: mixed
----------------------------------------------------------------------

function rigGetImageProperties pPath pReturn
	if pPath is empty then
		put sImgFullSrcPath into tPath
	else
		put pPath into tPath
	end if

	if pReturn is empty then
		put FALSE into tReturn
	else
		put pReturn into tReturn
	end if

	if there is not a file tPath then
		rigSetImgError "imglib_invalid_path"
	
		return FALSE
	end if

	put "identify -format" && quote & "%w,%h,%m,%b" & quote && tPath into tCmd
	put shell(tCmd) into tVals

	put empty into tMime
	put "gif,jpeg,png" into tTypes
	repeat for each item thisItem in tTypes
		if thisItem is toLower(item 3 of tVals) then
			put "image/" & thisItem into tMime
			exit repeat
		end if
	end repeat
	if tMime is empty then
		put "image/jpg" into tMime
	end if

	if tReturn is TRUE then
		put item 1 of tVals into tV["width"]
		put item 2 of tVals into tV["height"]
		put item 3 of tVals into tV["imageType"]
		put item 4 of tVals into tV["sizeStr"]
		put tMime into tV["mimeType"]

		return tV
	end if

	put item 1 of tVals into sImgOrigWidth
	put item 2 of tVals into sImgOrigHeight
	put item 3 of tVals into sImgImageType
	put item 4 of tVals into sImgSizeStr
	put tMime into sImgMimeType

	return TRUE
end rigGetImageProperties







----------------------------------------------------------------------
--| FUNCTION rigExplodeImgName
--|
--| Author: rabit
--| Version:  1.0
--| Created: 11-01-10
--| Last Mod: 11-01-10
--| Requires: --
--|
--| Summary: This is a helper function that extracts the extension
--|                    from the source_image.  This function lets us deal with
--|                    source_images with multiple periods, like:  my.cool.jpg
--|                    It returns an associative array with two elements:
--|                    tArray["ext"]  = ".jpg"
--|                    tArray['name'] = "my.cool"
--| 
--| Format:  rigExplodeImgName(param1)
--|
--| Parameters: string <pSourceImg>
--|
--| Return: array
----------------------------------------------------------------------

function rigExplodeImgName pSourceImg
	set the itemDelimiter to "."
	put "." & item -1 of pSourceImg into tExt

	if tExt is "." then
		put pSourceImg into tName
	else
		put item 1 to -2 of pSourceImg into tName
	end if

	put tExt into tArray["ext"]
	put tName into tArray["name"]

	return tArray
end rigExplodeImgName








----------------------------------------------------------------------
--| COMMAND rigSetImgError
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: rigLangLangLine(), rigLogMessage
--|
--| Summary: Set error message.
--| 
--| Format:  rigSetImgError param1
--|
--| Parameters: string <pMsg>
--|
--| Return: empty
----------------------------------------------------------------------

command rigSetImgError pMsg
	get rigLangLoadLang("imglib")
	
	put the number of lines in the keys of sImgErrorMsg into tErrorNum

	if pMsg is an array then
		repeat for each key tKey in pMsg
			put pMsg[tKey] into tVal
			put rigLangLangLine(tVal) into tLangLine

			if tLangLine is FALSE then
				put tVal into tMsg
			else
				put tLangLine into tMsg
			end if

			put tErrorNum + 1 into tErrorNum
			put tMsg into sImgErrorMsg[tErrorNum]
			rigLogMessage "error", tMsg
		end repeat

	else
		put rigLangLangLine(pMsg) into tLangLine

			if tLangLine is FALSE then
				put pMsg into tMsg
			else
				put tLangLine into tMsg
			end if

			put tErrorNum + 1 into tErrorNum
			put tMsg into sImgErrorMsg[tErrorNum]
			rigLogMessage "error", tMsg
	end if
end rigSetImgError







/*----------------------------------------------------------------------
--| FUNCTION rigDisplayImgErrors
--|
--| Author: rabit
--| Version:  1.1
--| Created: 12-01-10
--| Last Mod: 11-02-14
--| Requires: --
--|
--| Summary: Show error messages.
--| 
--| Format:  rigDisplayImgErrors(param1, param2)
--|
--| Parameters: string <pOpen>, string <pClose>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigDisplayImgErrors pOpen pClose
	if pOpen is "" then
		put "<p>" into tOpen
	else
		put pOpen into tOpen
	end if

	if pClose is "" then
		put "</p>" into tClose
	else
		put pClose into tClose
	end if

	put empty into tStr
	repeat for each key tKey in sImgErrorMsg
		put sImgErrorMsg[tKey] into tVal
		put tOpen & tVal & tClose & return after tStr
	end repeat

	return tStr
end rigDisplayImgErrors








----------------------------------------------------------------------
--| FUNCTION _rigWriteImgSrcFile
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-01-10
--| Last Mod: 13-01-10
--| Requires: rigSetImgError
--|
--| Summary: Write dynamic output file.
--| 
--| Format:  _rigWriteImgSrcFile()
--|
--| Parameters: string <pFile>, string <pData>
--|
--| Return: bool
----------------------------------------------------------------------

function _rigWriteImgSrcFile pFile pData
	try
		put pData into URL ("binfile:" & pFile)
	catch err
		rigSetImgError "An error occured while trying to save image source data:" && pFile  && err
		return FALSE
	end try
	return TRUE
end _rigWriteImgSrcFile





----------------------------------------------------------------------
--| COMMAND rigImageNewSettings
--|
--| Author: rabit
--| Version:  1.0
--| Created: 14-01-10
--| Last Mod: 14-01-10
--| Requires: rigRunInitialImageConfig
--|
--| Summary: Change image configuration.
--| 
--| Format:  rigImageNewSettings param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------

command rigImageNewSettings pConfig
	rigRunInitialImageConfig pConfig
end rigImageNewSettings








----------------------------------------------------------------------
--| FUNCTION rigImageSourceTag
--|
--| Author: rabit
--| Version:  1.0
--| Created: 14-01-10
--| Last Mod: 14-01-10
--| Requires: --
--|
--| Summary: Build image source tag for dynamic output.
--| 
--| Format:  rigImageSourceTag(param1, param2)
--|
--| Parameters: integer <pWidth>, integer <pHeight>
--|
--| Return: string
----------------------------------------------------------------------

function rigImageSourceTag pWidth pHeight
	if pWidth is empty then
		put sImgOrigWidth into tWidth
	else
		put pWidth into tWidth
	end if

	if pHeight is empty then
		put sImgOrigHeight into tHeight
	else
		put pHeight into tHeight
	end if

	put "width=" & quote & tWidth & quote && "height=" & quote & tHeight & quote into tImgSizeTags
	put rigSiteURL(sImgDynamicOutputURI) into tImgSrcURL
	put "<img src=" & quote & tImgSrcURL & quote && tImgSizeTags && "/>"  into tImgTag

	return tImgTag
end rigImageSourceTag








----------------------------------------------------------------------
--| FUNCTION rigImageSourceFile
--|
--| Author: rabit
--| Version:  1.1
--| Created: 14-01-10
--| Last Mod: 29-07-11
--| Requires: --
--|
--| Summary: Path to image source file to be written to disk.
--| 
--| Format:  rigImageSourceFile()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------

function rigImageSourceFile
	set the itemDelimiter to "/"
	put item -1 of 	gSystemFolder into tSystemFolder		
	put "./" & tSystemFolder & "/application/controllers/" & sImgDynamicOutputURI & gEXT into tFilePath

	return tFilePath
end rigImageSourceFile








----------------------------------------------------------------------
--| FUNCTION rigIMknownFonts
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: --
--|
--| Summary: Return known fonts.
--| 
--| Format:  rigIMknownFonts()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------

function rigIMknownFonts
	put "convert -list font" into tCmd

	return shell(tCmd)
end rigIMknownFonts







----------------------------------------------------------------------
--| FUNCTION rigIMversion
--|
--| Author: rabit
--| Version:  1.0
--| Created: 12-01-10
--| Last Mod: 12-01-10
--| Requires: --
--|
--| Summary: Return ImageMagick version.
--| 
--| Format:  rigIMversion()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------

function rigIMversion
	put "convert -version" into tCmd

	return shell(tCmd)
end rigIMversion






--| END OF Image.lc
--| Location:  ./system/libraries/Image.lc
----------------------------------------------------------------------