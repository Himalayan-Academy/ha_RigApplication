<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2016, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# revIgniter Encryption Library
#
#
# @package		revIgniter
# @subpackage	Libraries
# @category		Libraries
# @author			rabit@revigniter.com
# @link				http://revigniter.com/userGuide/libraries/encryption.html
##


# LOGGING
rigLogMessage "debug", "Encrypt Library Loaded"


# DECLARE VARIABLES
local sEncryptionKey, _sHashType, sCipher, sCipherKeyLength

# SET INITIAL VALUES
put "sha1" into _sHashType
put "bf" into sCipher
put 128 into sCipherKeyLength





----------------------------------------------------------------------
--| COMMAND rigRunInitialEncryptConfig
--|
--| Author: rabit
--| Version:  1.0
--| Created: 27-10-09
--| Last Mod: 27-10-09
--| Requires: --
--|
--| Summary: Run initial configuration procedures. Don't remove, even if it does nothing.
--| 
--| Format:  rigRunInitialEncryptConfig param1
--|
--| Parameters: array <pConfig>
--|
--| Return: empty
----------------------------------------------------------------------

command rigRunInitialEncryptConfig pConfig

end rigRunInitialEncryptConfig








/*----------------------------------------------------------------------
--| FUNCTION rigGetEncryptionKey
--|
--| Author: rabit
--| Version:  1.1
--| Created: 16-10-09
--| Last Mod: 06-02-15
--| Requires: rigFetchConfigItem(), rigHexDigest()
--|
--| Summary: Fetch the encryption key. Returns it as md5 in text format
--|            as a 32 digit hexadecimal number. 
--| 
--| Format:  rigGetEncryptionKey(param1)
--|
--| Parameters: string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigGetEncryptionKey pKey
	if pKey is empty then
		if sEncryptionKey is not empty then
			return sEncryptionKey
		end if

		put rigFetchConfigItem("encryption_key") into pKey
		if pKey is empty then
			rigShowError "In order to use the Encrypt library requires that you set an encryption key in your config file."
		end if
	end if

	return rigHexDigest(pKey)
end rigGetEncryptionKey










----------------------------------------------------------------------
--| COMMAND rigSetEncryptionKey
--|
--| Author: rabit
--| Version:  1.0
--| Created: 16-10-09
--| Last Mod: 16-10-09
--| Requires: --
--|
--| Summary: Set the encryption key. 
--| 
--| Format:  rigSetEncryptionKey param1
--|
--| Parameters: string <pKey>
--|
--| Return: empty
----------------------------------------------------------------------

command rigSetEncryptionKey pKey
	put pKey into sEncryptionKey
end rigSetEncryptionKey










----------------------------------------------------------------------
--| FUNCTION rigEncode
--|
--| Author: rabit
--| Version:  2.0
--| Created: 16-10-09
--| Last Mod: 18-07-11
--| Requires: rigGetEncryptionKey(), _rigXorEncode()
--|
--| Summary:	Encodes the message string using bitwise XOR encoding.
--|						The key is combined with a random hash, and then it
--|          	too gets converted using XOR. The whole thing is then
--|						encrypted using a randomly generated salt for the key.
--|           The end result is a message string that is randomized with
--|           each call to this function, even if the supplied message and
--|           key are the same.
--| 
--| Format:  rigEncode(param1, param2)
--|
--| Parameters: string <pString> the string to encode, string <pKey>
--|
--| Return: string
----------------------------------------------------------------------

function rigEncode pString pKey
	put rigGetEncryptionKey(pKey) into tKey
	put _rigXorEncode(pString, tKey) into tEnc

	encrypt tEnc using sCipher with tKey at sCipherKeyLength bit
	if the result is empty then
		return base64encode(it)
	end if

	return FALSE
end rigEncode









/*----------------------------------------------------------------------
--| FUNCTION rigDecode
--|
--| Author: rabit
--| Version: 2.2
--| Created: 16-10-09
--| Last Mod: 22-12-14
--| Requires: rigGetEncryptionKey(), rigNumToNativeChar(), _rigXorDecode()
--|
--| Summary: Reverses the above process.
--| 
--| Format:  rigDecode(param1, param2)
--|
--| Parameters: string <pString> the string to decode, string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigDecode pString pKey
   put rigGetEncryptionKey(pKey) into tKey
   -- put "[^a-zA-Z0-9\/\+=]" into tRegEx
   put "[^a-zA-Z0-9\/\+=" & rigNumToNativeChar(10) & rigNumToNativeChar(13) & "]" into tRegEx
   
   if matchtext(pString,tRegEx) is TRUE then
      return FALSE
   end if
   
   put base64Decode(pString) into tDec

   decrypt tDec using sCipher with tKey at sCipherKeyLength bit
   if the result is empty then
      return _rigXorDecode(it, tKey)
   end if

   return FALSE
end rigDecode









/*----------------------------------------------------------------------
--| FUNCTION _rigXorEncode
--|
--| Author: rabit
--| Version:  1.3
--| Created: 16-10-09
--| Last Mod: 23-12-14
--| Requires: rigRandomNum(), rigHash(), rigSubstr(), rigNumToNativeChar(), _rigXorMerge()
--|
--| Summary: Takes a plain-text string and key as input and generates an
--|            encoded bit-string using XOR.
--| 
--| Format:  _rigXorEncode(param1, param2)
--|
--| Parameters: string <pString>, string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigXorEncode pString pKey
	put rigRandomNum() into tRand

	put rigHash(tRand) into tRand

	put length(pString) into tStringLength
	put length(tRand) into tRandLength
	
	repeat with i = 1 to tStringLength
    put rigSubstr(tRand, ((i - 1) mod tRandLength) + 1, 1) & (rigNumToNativeChar(rigSubstrToNum(tRand, ((i - 1) mod tRandLength) + 1, 1, TRUE) bitXOr rigSubstrToNum(pString, i, 1, TRUE))) after tEnc
	end repeat

	return _rigXorMerge(tEnc, pKey)
end _rigXorEncode







/*----------------------------------------------------------------------
--| FUNCTION _rigXorDecode
--|
--| Author: rabit
--| Version:  1.2
--| Created: 16-10-09
--| Last Mod: 23-12-14
--| Requires: _rigXorMerge(), rigNumToNativeChar(), rigSubstrToNum()
--|
--| Summary: Takes an encoded string and key as input and generates the
--|            plain-text original message.
--| 
--| Format:  _rigXorDecode(param1, param2)
--|
--| Parameters: string <pString>, string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigXorDecode pString pKey
  put _rigXorMerge(pString, pKey) into tString

  put length(tString) into tStringLength

  repeat with i = 1 to tStringLength
    put i into j
    add 1 to i
    put rigNumToNativeChar((rigSubstrToNum(tString, i, 1, TRUE)) bitXOr (rigSubstrToNum(tString, j, 1, TRUE))) after tDec
  end repeat

  return tDec
end _rigXorDecode







/*----------------------------------------------------------------------
--| FUNCTION _rigXorMerge
--|
--| Author: rabit
--| Version:  1.3
--| Created: 16-10-09
--| Last Mod: 23-12-14
--| Requires: rigHash(), rigNumToNativeChar(), rigSubstrToNum()
--|
--| Summary: Takes a string and key as input and computes the difference using XOR.
--| 
--| Format:  _rigXorMerge(param1, param2)
--|
--| Parameters: string <pString>, string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigXorMerge pString pKey
	put rigHash(pKey) into tHash

	put length(pString) into tStringLength
	put length(tHash) into tHashLength

	repeat with i = 1 to tStringLength
    put rigNumToNativeChar((rigSubstrToNum(pString, i, 1, TRUE)) bitXOr (rigSubstrToNum(tHash, ((i - 1) mod tHashLength) + 1, 1, TRUE))) after tStr
	end repeat

	return tStr
end _rigXorMerge




/*----------------------------------------------------------------------
--| COMMAND rigSetCipher
--|
--| Author: rabit
--| Version:  1.0
--| Created: 18-07-2011
--| Last Mod: 18-07-2011
--| Requires: --
--|
--| Summary: Set the cipher and the key length
--| 
--| Format:  rigSetCipher param1, param2
--|
--| Parameters: string <pName>, ineger <pKeyLength>
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigSetCipher pName pKeyLength
	put pName into sCipher
	put pKeyLength into sCipherKeyLength
end rigSetCipher





----------------------------------------------------------------------
--| COMMAND rigSetHash
--|
--| Author: rabit
--| Version:  2.0
--| Created: 16-10-09
--| Last Mod: 18-07-11
--| Requires: --
--|
--| Summary: Set the hash type. 
--| 
--| Format:  rigSetHash param1
--|
--| Parameters: string <pType>
--|
--| Return: empty
----------------------------------------------------------------------

command rigSetHash pType
	if pType is empty then
		put "sha1" into tType
	else
		put pType into tType
	end if
	
	if (tType is not "sha1") and (tType is not "md5") then
		put "sha1" into _sHashType
	else
		put tType into _sHashType
	end if
end rigSetHash








----------------------------------------------------------------------
--| FUNCTION rigHash
--|
--| Author: rabit
--| Version:  2.0
--| Created: 16-10-09
--| Last Mod: 18-07-11
--| Requires: rigHexDigest()
--|
--| Summary: Hash encode a string. 
--| 
--| Format:  rigHash(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function rigHash pStr
	if _sHashType is "sha1" then
		put sha1Digest(pStr) into tHash
	else

		put rigHexDigest(pStr) into tHash
	end if

	return tHash
end rigHash








--| END OF Encrypt.lc
--| Location:  ./system/libraries/Encrypt.lc
----------------------------------------------------------------------