<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2016, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# revIgniter Input Library
#
# Pre-processes global input data for security
#
# @package		revIgniter
# @subpackage	Libraries
# @category	  Input
# @author		  rabit@revigniter.com
# @link		    http://revigniter.com/userGuide/libraries/input.html
##

## ------------------------------------------------------------------------


# LOGGING
rigLogMessage "debug", "Input Library Loaded"

# DECLARE VARIABLES
global gCOOKIE

local sUseXssClean, sAllowGetArray, sXSShash, sIPaddress, sUserAgent, sEntityChart, sNeverAllowedStr, sNeverAllowedRegex
local sEnableCSRF, sCSRFexpire, sCSRFtokenName, sCSRFcookieName, sCSRFhash, sContentType

# DEFAULT VALUES
put FALSE into sIPaddress
put FALSE into sUserAgent
put FALSE into sAllowGetArray
put FALSE into sUseXssClean
put FALSE into sEnableCSRF
put 7200 into sCSRFexpire
put "rig_csrf_token" into sCSRFtokenName
put "rig_csrf_cookie" into sCSRFcookieName


put "[removed]" into sNeverAllowedStr["gCOOKIE"]
put "[removed]" into sNeverAllowedStr["gBASEPATH"]
put "[removed]" into sNeverAllowedStr["gDatabaseID"]
put "[removed]" into sNeverAllowedStr["gSystemFolder"]
put "[removed]" into sNeverAllowedStr["gAPPPATH"]

put "[removed]" into sNeverAllowedStr["document.cookie"]
put "[removed]" into sNeverAllowedStr["document.write"]
put "[removed]" into sNeverAllowedStr[".parentNode"]
put "[removed]" into sNeverAllowedStr[".innerHTML"]
put "[removed]" into sNeverAllowedStr["window.location"]
put "[removed]" into sNeverAllowedStr["-moz-binding"]
put "&lt;!--" into sNeverAllowedStr["<!--"]
put "--&gt;" into sNeverAllowedStr["-->"]
put "&lt;![CDATA[" into sNeverAllowedStr["<![CDATA["]


put "[removed]" into sNeverAllowedRegex["javascript\s*:"]
put "[removed]" into sNeverAllowedRegex["expression\s*(\(|&\#40;)"]
put "[removed]" into sNeverAllowedRegex["vbscript\s*:"]
put "[removed]" into sNeverAllowedRegex["Redirect\s+302"]

put $_SERVER["CONTENT_TYPE"] into sContentType



rigLoadLibrary "Config"






/*----------------------------------------------------------------------
--| COMMAND _rigSanitizeGlobals
--|
--| Author: rabit
--| Version:  1.7
--| Created: 17-06-09
--| Last Mod: 15-10-15
--| Requires: Log library, _rigInputConfig, _rigCleanInputData(), _rigVarPostFallback(),
--|           	rigLogMessage, _rigCSRFconfig, rigCSRFverify
--|
--| Summary: This command does the following:
--| 	          Cleans $_GET data (if query strings are enabled) 
--|             Cleans $_POST data
--|             Cleans special cookie data
--|             Standardizes newline characters to LF
--| 
--| Format:  _rigSanitizeGlobals
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigSanitizeGlobals
	# INPUT CONFIGURATION
	put "UseXssClean,AllowGetArray,EnableCSRF" into tInputSettings
	repeat for each item tItem in tInputSettings
		_rigInputConfig tItem
	end repeat
	
	# IS $_GET DATA ALLOWED? IF NOT WE'LL SET THE $_GET TO EMPTY
	if sAllowGetArray is FALSE then
		put empty into $_GET
	else
		put _rigCleanInputData($_GET) into $_GET
	end if


	# THIS SEEMS STRANGE, BUT WE SAVE THE GET ARRAY IN THE POST ARRAY TO SIMPLIFY FURTHER INPUT VALIDATION
	# ALL VALIDATION IS THEN DONE WITH THE POST ARRAY
	if $_GET is an array then
		if (the number of lines in the keys of $_GET > 1) then
			if (the number of lines in the keys of $_GET = 2) then
				if (line 2 of the keys of $_GET) is not rigFetchConfigItem("methodTrigger") then
					put $_GET into $_POST
				end if
			else
				put $_GET into $_POST
			end if
		end if
	end if

	# IF $_POST IS NOT AN ARRAY MAY BE WE ARE DEALING WITH AN AJAX REQUEST
	# SO WE CALL A FALLBACK FUNCTION (A WORK AROUND FOR AN ENGINE ISSUE
	# WHERE THE $_POST VARIABLE IS EMPTY) TO RETRIEVE THE POST ARRAY.
	if ($_SERVER["REQUEST_METHOD"] = "POST") and ($_POST is not an array) then
		
		# FIRST CHECK IF POST DATA IS JSON
		if sContentType is "application/json" then
			set the itemdelimiter to "="
			put item 1 of $_POST_RAW into tPOSTrawVariableKey
			put item 2 of $_POST_RAW into tPOSTrawVariableValue
			
			if tPOSTrawVariableValue is empty then
				# SHOULD WE FILTER THE DATA?
				if sUseXssClean is TRUE then
					put rigXssClean(tPOSTrawVariableKey) into item 1 of $_POST_RAW
				end if

				put $_POST_RAW into $_POST
			end if

		else
		# WE ARE NOT DEALING WITH JSON, SO CALL THE FALLBACK FUNCTION			
			put _rigVarPostFallback() into $_POST
		end if
	end if -- if ($_SERVER["REQUEST_METHOD"] = "POST") and ($_POST is not an array) then


	# CLEAN $_POST DATA
	if $_POST is an array then  -- variance
		# CHECK THE CONTENT TYPE HEADER TO BE ABLE TO DETERMINE
		# IF WE ARE DEALING WITH LIVECODE ARRAYS
		if (sContentType is "application/lc.array") or (sContentType is "application/lc.array.compressed") then
			put rigSerializedPOSTtoArray($_POST) into $_POST
		else
			put _rigCleanInputData($_POST) into $_POST
		end if
	end if  -- variance


	# CLEAN $_COOKIE DATA
	# ALSO GET RID OF SPECIALLY TREATED COOKIES THAT MIGHT BE SET BY A SERVER
	# OR SILLY APPLICATION, THAT ARE OF NO USE TO A RI APPLICATION ANYWAY
	# BUT THAT WHEN PRESENT WILL TRIP OUR 'DISALLOWED KEY CHARACTERS' ALARM
	# http://datatracker.ietf.org/doc/rfc2965/

	put $_SERVER["HTTP_COOKIE"] into tCOOKIETemp

	split tCOOKIETemp using ";" and "="

	# REMOVE WHITE SPACE FROM ARRAY KEYS
	repeat for each key tKey in tCOOKIETemp
		put rigTrim(tKey) into tTrimmedKey
		put tCOOKIETemp[tKey] into gCOOKIE[tTrimmedKey]
	end repeat

	delete variable gCOOKIE["$Version"]	
	delete variable gCOOKIE["$Path"]
	delete variable gCOOKIE["$Domain"]

	put _rigCleanInputData(gCOOKIE, "cookie") into gCOOKIE

	combine gCOOKIE using ";" and "="
	
	# CSRF PROTECTION CHECK
	if sEnableCSRF is TRUE then		
		put "CSRFexpire,CSRFtokenName,CSRFcookieName" into tCSRFsettings
		repeat for each item tItem in tCSRFsettings
			_rigCSRFconfig tItem
		end repeat
		
		rigCSRFverify
	end if

	rigLogMessage "debug", "Global POST and COOKIE data sanitized"
end _rigSanitizeGlobals






/*----------------------------------------------------------------------
--| COMMAND _rigInputConfig
--|
--| Author: rabit
--| Version:  1.0
--| Created: 14-07-2012
--| Last Mod: --
--| Requires: rigFetchConfigItem()
--|
--| Summary: Input library configuration.
--| 
--| Format:  _rigInputConfig param1
--|
--| Parameters: string <pVarName>
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigInputConfig pVarName
	put "s" & pVarName into tVarName
	
	switch tVarName
		case "sUseXssClean"
			put rigFetchConfigItem("globalXssFiltering") into tSetting
			if tSetting is TRUE then
				put tSetting into sUseXssClean
			end if
		break
		case "sAllowGetArray"
			put rigFetchConfigItem("enableQueryStrings") into tSetting
			if tSetting is TRUE then
				put tSetting into sAllowGetArray
			end if
		break
		case "sEnableCSRF"
			put rigFetchConfigItem("csrf_protection") into tSetting
			if tSetting is TRUE then
				put tSetting into sEnableCSRF
			end if
	end switch
end _rigInputConfig






/*----------------------------------------------------------------------
--| COMMAND _rigCSRFconfig
--|
--| Author: rabit
--| Version:  1.0
--| Created: 14-07-2012
--| Last Mod: --
--| Requires: rigFetchConfigItem(), _rigCSRFsetHash
--|
--| Summary: CSRF configuration.
--| 
--| Format:  _rigCSRFconfig param1
--|
--| Parameters: string <pVarName>
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigCSRFconfig pVarName
	put "s" & pVarName into tVarName
	
	switch tVarName
		case "sCSRFexpire"
			put rigFetchConfigItem("csrf_expire") into tSetting
			if (tSetting is not empty) and (tSetting is a number) then
				put tSetting into sCSRFexpire
			end if
		break
		case "sCSRFtokenName"
			put rigFetchConfigItem("csrf_token_name") into tSetting
			if tSetting is not empty then
				put tSetting into sCSRFtokenName
			end if
		break
		case "sCSRFcookieName"
			put rigFetchConfigItem("csrf_cookie_name") into tSetting
			if tSetting is not empty then
				put tSetting into sCSRFcookieName
			end if
	end switch
	
	# APPEND APPLICATION SPECIFIC COOKIE PREFIX
	put rigFetchConfigItem("cookie_prefix") into tCookiePrefix
	if tCookiePrefix <> empty then
		put tCookiePrefix & sCSRFcookieName into sCSRFcookieName
	end if
	
	# SET THE CSRF HASH
	_rigCSRFsetHash
end _rigCSRFconfig






/*----------------------------------------------------------------------
--| COMMAND _rigCSRFsetHash
--|
--| Author: rabit
--| Version:  1.1
--| Created: 14-07-2012
--| Last Mod: 04-07-2013
--| Requires: rigVarCookie(), rigUniqid(), rigHexDigest()
--|
--| Summary: Set Cross Site Request Forgery protection cookie.
--| 
--| Format:  _rigCSRFsetHash
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigCSRFsetHash
	if sCSRFhash is empty then
		# IF THE COOKIE EXISTS WE WILL USE IT'S VALUE.
		# WE DON'T NECESSARILY WANT TO REGENERATE IT WITH
		# EACH PAGE LOAD SINCE A PAGE COULD CONTAIN EMBEDDED
		# SUB-PAGES CAUSING THIS FEATURE TO FAIL
		-- put rigGetCookie(sCSRFcookieName) into tCSRFcookie
		put rigVarCookie(sCSRFcookieName) into tCSRFcookie

		if tCSRFcookie <> FALSE then
			put "(?is)^[0-9a-f]{32}$" into tRegEx

			get matchText(tCSRFcookie, tRegEx)

			if it is TRUE then
				put tCSRFcookie into sCSRFhash
				exit _rigCSRFsetHash
			end if

		end if
		
		# CHECK SERVER VERSION - USE THE LIVECODE uuid() FUNCTION IF VERSION >= 6.1
		set the itemDel to "."
		if (item 1 of the version > 6) or ((item 1 of the version = 6) and (item 2 of the version >= 1)) then
	      put uuid() into tUUID
	   else
		# USE A revIgniter FUNCTION FOR SERVER VERSIONS PRIOR TO 6.1
			put rigUniqid(random(128)) into tUUID
		end if
		
		put rigHexDigest(tUUID) into sCSRFhash
	end if
end _rigCSRFsetHash






/*----------------------------------------------------------------------
--| COMMAND rigCSRFverify
--|
--| Author: rabit
--| Version:  1.0
--| Created: 15-07-2012
--| Last Mod: --
--| Requires: rigCSRFsetCookie, rigCSRFshowError, _rigCSRFsetHash
--|
--| Summary: Verify Cross Site Request Forgery protection.
--| 
--| Format:  rigCSRFverify 
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigCSRFverify
	# IF NO POST DATA EXISTS WE WILL SET THE CSRF COOKIE
	if $_POST is not an array then
		rigCSRFsetCookie
		exit rigCSRFverify
	end if
	
	put rigVarPost(sCSRFtokenName) into tCSRFtoken
	put rigVarCookie(sCSRFcookieName) into tCSRFcookie
	
	# DO THE TOKENS EXIST IN BOTH THE _POST AND _COOKIE ARRAYS?
	if (tCSRFtoken is FALSE) or (tCSRFcookie is FALSE) then
		rigCSRFshowError
	end if
	
	# DO THE TOKENS MATCH?
	if tCSRFtoken <> tCSRFcookie then
		rigCSRFshowError
	end if
	
	# WE KILL THIS SINCE WE'RE DONE AND WE DON'T WANT TO
	# POLUTE THE _POST ARRAY
	put empty into $_POST[sCSRFtokenName]
	
	# NOTHING SHOULD LAST FOREVER, DELETE COOKIE
	_rigInputSetCookie sCSRFcookieName
	_rigCSRFsetHash
	rigCSRFsetCookie
	
	rigLogMessage "debug", "CSRF token verified"
end rigCSRFverify






/*----------------------------------------------------------------------
--| COMMAND rigCSRFsetCookie
--|
--| Author: rabit
--| Version:  1.1
--| Created: 15-07-2012
--| Last Mod: 12-10-2013
--| Requires: rigFetchConfigItem(), _rigInputSetCookie, rigLogMessage
--|
--| Summary: Set Cross Site Request Forgery protection cookie.
--| 
--| Format:  rigCSRFsetCookie 
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigCSRFsetCookie
	put rigFetchConfigItem("cookie_secure") into tSecureCookie

	if tSecureCookie is TRUE then
		if $_SERVER["HTTPS"] <> empty then
			put $_SERVER["HTTPS"] into tReq
		else
			put FALSE into tReq
		end if
		
		if (tReq is FALSE) or (tReq is "off") then
			exit rigCSRFsetCookie
		end if		
	end if
	
	put rigFetchConfigItem("cookie_domain") into tCookieDomain
	put rigFetchConfigItem("cookie_path") into tCookiePath
	_rigInputSetCookie sCSRFcookieName, sCSRFhash, sCSRFexpire, tCookieDomain, tCookiePath, "", FALSE, tSecureCookie, TRUE
	
	rigLogMessage "debug", "CSRF cookie Set"
end rigCSRFsetCookie





/*----------------------------------------------------------------------
--| COMMAND rigCSRFshowError
--|
--| Author: rabit
--| Version:  1.1
--| Created: 14-07-2012
--| Last Mod: 29-01-2015
--| Requires: rigShowError
--|
--| Summary: Show CSRF error.
--| 
--| Format:  rigCSRFshowError
--|
--| Parameters: --
--|
--| Return: empty
----------------------------------------------------------------------*/

command rigCSRFshowError
	rigShowError "The action you have requested is not allowed.", 200
end rigCSRFshowError






/*----------------------------------------------------------------------
--| FUNCTION rigGetCSRFhash
--|
--| Author: rabit
--| Version:  1.0
--| Created: 15-07-2012
--| Last Mod: --
--| Requires: --
--|
--| Summary: Get CSRF hash.
--| 
--| Format:  rigGetCSRFhash()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------*/

function rigGetCSRFhash
	return sCSRFhash
end rigGetCSRFhash






/*----------------------------------------------------------------------
--| FUNCTION rigGetCSRFtokenName
--|
--| Author: rabit
--| Version:  1.0
--| Created: 15-07-2012
--| Last Mod: --
--| Requires: --
--|
--| Summary: Get CSRF token name.
--| 
--| Format:  rigGetCSRFtokenName()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------*/

function rigGetCSRFtokenName
	return sCSRFtokenName
end rigGetCSRFtokenName







/*----------------------------------------------------------------------
--| FUNCTION _rigCleanInputData
--|
--| Author: rabit
--| Version:  1.3
--| Created: 17-06-09
--| Last Mod: 21-12-14
--| Requires: _rigCleanInputKeys(), _rigCleanInputData(), rigXssClean(), rigNumToCodepoint()
--|
--| Summary: This is a helper function. It escapes data and
--|            standardizes newline characters to LF.
--| 
--| Format:  _rigCleanInputData(param1[, param2])
--|
--| Parameters: mixed <pStr>, string <pType> (optional)
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigCleanInputData pStr pType
	if pType is empty then
		put "" into tType
	else
		put pType into tType
	end if
	
	if pStr is an array then
		repeat for each line tKey in the keys of  pStr
			put _rigCleanInputKeys(tKey) into tKey
			put _rigCleanInputData(pStr[tKey], tType) into tVal
			put tVal into tCleanArray[tKey]
		end repeat
		
		return tCleanArray
	end if
	
	# WE STRIP SLASHES
	put pStr into tStr
	replace "\\" with "+++|r---b|+++" in tStr
	replace "\" with "" in tStr
	replace "+++|r---b|+++" with "\" in tStr

	# SHOULD WE FILTER THE INPUT DATA?
	if sUseXssClean is TRUE then
		put rigXssClean(tStr, "", tType) into tStr
	end if

	# STANDARDIZE NEWLINES
	# CONVERT CR AND CRLF TO LF
	if tStr contains rigNumToCodepoint(13) then
		replace rigNumToCodepoint(13) & rigNumToCodepoint(10) with rigNumToCodepoint(10) in tStr
		replace rigNumToCodepoint(13) with rigNumToCodepoint(10) in tStr
	end if

	return tStr
end _rigCleanInputData




/*----------------------------------------------------------------------
--| FUNCTION _rigCleanInputKeys
--|
--| Author: rabit
--| Version:  1.2
--| Created: 17-06-09
--| Last Mod: 15-10-15
--| Requires: --
--|
--| Summary: This is a helper function. To prevent malicious users
--|            from trying to exploit keys we make sure that keys are
--|            only named with alpha-numeric text and a few other items.
--| 
--| Format:  _rigCleanInputKeys(param1)
--|
--| Parameters: string <pKey>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigCleanInputKeys pKey
  if matchchunk(pKey, "(?i)^[a-z0-9:_\/-]+$") is FALSE then
		put "Disallowed Key Characters."
		exit to top
	end if
	
	return pKey
end _rigCleanInputKeys




/*----------------------------------------------------------------------
--| FUNCTION _rigFetchFromArray
--|
--| Author: rabit
--| Version:  1.3
--| Created: 30-05-09
--| Last Mod: 27-06-13
--| Requires: rigXssClean(), rigXssCleanArray()
--|
--| Summary: This is a helper function to retrieve values from global arrays.
--| 
--| Format:  _rigFetchFromArray(param1, param2, param3)
--|
--| Parameters: array <pArray>, string <pIndex>, bool <pXssFlag>, string <pType> (optional)
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigFetchFromArray pArray pIndex pXssClean pType
	if pXSSclean is empty then
		put FALSE into tXSSclean
	else
		put pXSSclean into tXSSclean
	end if
	
	if pType is empty then
		put "" into tType
	else
		put pType into tType
	end if

	 if pIndex is not among the keys of pArray then
        	return FALSE
    	end if

	if tXSSclean is TRUE then
		if pArray[pIndex] is not an array then
			return rigXssClean(pArray[pIndex], "", tType)
		else
			return rigXssCleanArray(pArray[pIndex])
		end if
	end if

	return pArray[pIndex]
end _rigFetchFromArray




----------------------------------------------------------------------
--| FUNCTION rigVarGet
--|
--| Author: rabit
--| Version:  1.2
--| Created: 20-06-09
--| Last Mod: 17-07-11
--| Requires: _rigFetchFromArray()
--|
--| Summary: Fetch an item from the GET array.
--| 
--| Format:  rigVarGet(param1, param2)
--|
--| Parameters: string <pIndex>, bool <pXSSclean>
--|
--| Return: string
----------------------------------------------------------------------

function rigVarGet pIndex pXSSclean
	if pXSSclean is empty then
		put FALSE into tXSSclean
	else
		put pXSSclean into tXSSclean
	end if

	if $_GET is an array then
		return _rigFetchFromArray($_GET, pIndex, tXSSclean)
	end if

	return FALSE
end rigVarGet







/*----------------------------------------------------------------------
--| FUNCTION rigVarPost
--|
--| Author: rabit
--| Version:  1.5
--| Created: 20-06-09
--| Last Mod: 10-09-15
--| Requires: _rigFetchFromArray(), rigXssClean()
--|
--| Summary: Fetch an item from the POST array.
--| 
--| Format:  rigVarPost(param1, param2)
--|
--| Parameters: string <pIndex>, bool <pXSSclean>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigVarPost pIndex pXSSclean
	if pXSSclean is empty then
		put FALSE into tXSSclean
	else
		put pXSSclean into tXSSclean
	end if

	if $_POST is an array then
		return _rigFetchFromArray($_POST, pIndex, tXSSclean)
		
	else
		if $_POST <> empty then
			if pXSSclean is TRUE then
				return rigXssClean($_POST)
			end if
			return $_POST
		end if
	end if
	
	return FALSE
end rigVarPost








/*----------------------------------------------------------------------
--| FUNCTION _rigVarPostFallback
--|
--| Author: rabit
--| Version:  1.0
--| Created: 16-05-2010
--| Last Mod: 16-05-2010
--| Requires: --
--|
--| Summary: This function is used to address an engine issue where
--|          the $_POST variable of an Ajax request is not present / is empty
--|          if FireFox is used. In addition it takes into account, that apperently
--|          there are different server engines installed on the On-Rev servers.
--| 
--| Format:  _rigVarPostFallback()
--|
--| Parameters: --
--|
--| Return: mixed
----------------------------------------------------------------------*/

function _rigVarPostFallback
	# READ RAW DATA FROM STANDARD IN
	if $_SERVER["CONTENT_LENGTH"] > 0 then
		read from stdin for $_SERVER["CONTENT_LENGTH"] chars
		put it into tPOSTdata
	else
		# ALTERNATIVELY CHECK $_POST_RAW
		put $_POST_RAW into tPOSTdata
	end if

	if tPOSTdata is empty then
		# THERE IS DEFINITELY NO POST DATA
		return FALSE
	end if

	# AS POST DATA IS EXPECTED TO BE AN ARRAY CONVERT THE STRING
	split tPOSTdata with "&" and "="

	# DECODE THE ARRAY VALUES TO GET THE ORIGINAL DATA
	repeat for each key tKey in tPOSTdata
		put urlDecode(tPOSTdata[tKey]) into tPOSTdata[tKey]
	end repeat

	return tPOSTdata
end _rigVarPostFallback




----------------------------------------------------------------------
--| FUNCTION rigVarGetPost
--|
--| Author: rabit
--| Version:  1.1
--| Created: 10-10-09
--| Last Mod: 04-11-09
--| Requires: rigVarGet(), rigVarPost()
--|
--| Summary: Fetch an item from either the GET array or the POST array.
--| 
--| Format:  rigVarGetPost(param1, param2)
--|
--| Parameters: string <pIndex>, bool <pXSSclean>
--|
--| Return: string
----------------------------------------------------------------------

function rigVarGetPost pIndex pXSSclean
	if pXSSclean is empty then
		put FALSE into tXSSclean
	else
		put pXSSclean into tXSSclean
	end if

	--if ($_POST[pIndex] is not an array) and ($_POST[pIndex] is empty) then
	if pIndex is not among the keys of $_POST then
		return rigVarGet(pIndex, tXSSclean)
	else
		return rigVarPost(pIndex, tXSSclean)
	end if
end rigVarGetPost








----------------------------------------------------------------------
--| FUNCTION rigVarCookie
--|
--| Author: rabit
--| Version:  1.4
--| Created: 30-05-09
--| Last Mod: 30-06-10
--| Requires: _rigFetchFromArray()
--|
--| Summary: Fetch an item from the COOKIE array.
--| 
--| Format:  rigVarCookie(param1, param2)
--|
--| Parameters: string <pName>, bool <pXssFlag>
--|
--| Return: string
----------------------------------------------------------------------

function rigVarCookie pName pXssFlag
	if pXssFlag is empty then
		put FALSE into tXssFlag
	else
		put pXssFlag into tXssFlag
	end if

	if gCOOKIE is not empty then
		put gCOOKIE into tCookie
		split tCookie using ";" and "="
		return _rigFetchFromArray(tCookie, pName, tXssFlag, "cookie")

	else
		if $_SERVER["HTTP_COOKIE"] is not empty then
			split $_SERVER["HTTP_COOKIE"] using ";" and "="
			return _rigFetchFromArray($_SERVER["HTTP_COOKIE"], pName, tXssFlag, "cookie")

		end if
	end if

	return FALSE
end rigVarCookie








----------------------------------------------------------------------
--| FUNCTION rigVarServer
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-10-09
--| Last Mod: 10-10-09
--| Requires: _rigFetchFromArray()
--|
--| Summary: Fetch an item from either the SERVER array.
--| 
--| Format:  rigVarServer(param1, param2)
--|
--| Parameters: string <pIndex>, bool <pXSSclean>
--|
--| Return: string
----------------------------------------------------------------------

function rigVarServer pIndex pXSSclean
	if pXSSclean is empty then
		put FALSE into tXSSclean
	else
		put pXSSclean into tXSSclean
	end if

	return _rigFetchFromArray($_SERVER, pIndex, tXSSclean)
end rigVarServer








/*----------------------------------------------------------------------
--| FUNCTION rigIpAddress
--|
--| Author: rabit
--| Version:  1.0
--| Created: 10-10-09
--| Last Mod: 10-10-09
--| Requires: rigFetchConfigItem(), rigVarServer(), rigValidIP()
--|
--| Summary: Fetch the IP address.
--| 
--| Format:  rigIpAddress()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------*/

function rigIpAddress
	if sIPaddress is not FALSE then
		return sIPaddress
	end if

	put rigFetchConfigItem("proxyIPs") into tProxyIPs
	put rigVarServer("HTTP_X_FORWARDED_FOR") into tXforwarded
	put rigVarServer("REMOTE_ADDR") into tRemoteAddr

	put rigVarServer("HTTP_CLIENT_IP") into tClientIP

	if (tProxyIPs is not "") and (tXforwarded is not FALSE) and (tRemoteAddr is not FALSE) then
		if $_SERVER["REMOTE_ADDR"] is among the items of tProxyIPs then
			put $_SERVER["HTTP_X_FORWARDED_FOR"] into sIPaddress
		else
			put $_SERVER["REMOTE_ADDR"] into sIPaddress
		end if

	else if (tRemoteAddr is not FALSE) and (tClientIP is not FALSE) then
		put $_SERVER["HTTP_CLIENT_IP"] into sIPaddress

	else if tRemoteAddr is not FALSE then
		put $_SERVER["REMOTE_ADDR"] into sIPaddress

	else if tClientIP is not FALSE then
		put $_SERVER["HTTP_CLIENT_IP"] into sIPaddress

	else if tXforwarded is not FALSE then
		put $_SERVER["HTTP_X_FORWARDED_FOR"] into sIPaddress
	end if

	if sIPaddress is FALSE then
		put "0.0.0.0" into sIPaddress
		
		return sIPaddress
	end if

	if comma is in sIPaddress then
		put item -1 of sIPaddress into sIPaddress
	end if

	if rigValidIP(sIPaddress) is not TRUE then
		put "0.0.0.0" into sIPaddress
	end if

	return sIPaddress
end rigIpAddress








/*----------------------------------------------------------------------
--| FUNCTION rigValidIP
--|
--| Author: rabit
--| Version:  1.1
--| Created: 02-08-09
--| Last Mod: 02-07-12
--| Requires: _rigValid_ipv4(), _rigValid_ipv6() 
--|
--| Summary: Validate IP address.
--| 
--| Format:  rigValidIP(param1, param2)
--|
--| Parameters: string <pIP>, string <pWhich> ipv4 or ipv6
--|
--| Return: bool
----------------------------------------------------------------------*/

function rigValidIP pIP pWhich
   put "" into tWhich
   if pWhich <> empty then
      put toLower(pWhich) into tWhich
   end if
   	
   if (tWhich <> "ipv6") and (tWhich <> "ipv4") then
      if ":" is in pIP then
         put "ipv6" into tWhich
      else if "." is in pIP then
         put "ipv4" into tWhich
      else
         return FALSE
      end if
   end if
   	
   put "_rigValid_" & tWhich & "(" & quote & pIP & quote & ")" into tFunctionToCall
   do "return" && tFunctionToCall
end rigValidIP






/*----------------------------------------------------------------------
--| FUNCTION _rigValid_ipv4
--|
--| Author: rabit
--| Version:  1.1
--| Created: 02-07-12
--| Last Mod: 29-09-15
--| Requires: --
--|
--| Summary: Validate ipv4 address.
--| 
--| Format:  _rigValid_ipv4(param1)
--|
--| Parameters: string <pIP>
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigValid_ipv4 pIP
	put pIP into tIPsegments

	set the itemDelimiter to "."

	# ALWAYS 4 SEGMENTS NEEDED
	if the number of items of tIPsegments <> 4 then
		return FALSE
	end if

	# IP CAN NOT START WITH 0
	if char 1 of item 1 of tIPsegments is "0" then
		return FALSE		
	end if

	# CHECK EACH SEGMENT
	repeat for each item tSegment in tIPsegments
		# IP SEGMENTS MUST BE DIGITS AND CAN NOT BE 
		# LONGER THAN 3 DIGITS OR GREATER THEN 255
		put "[^0-9]" into tRegEx
		put matchText(tSegment, tRegEx) into tMatchFound

		put the length of tSegment into tSegmentLength

		if (tSegment is empty) or (tMatchFound is TRUE) or (tSegment > 255) or (tSegmentLength > 3) then
			return FALSE
		end if
	end repeat

	return TRUE
end _rigValid_ipv4







/*----------------------------------------------------------------------
--| FUNCTION _rigValid_ipv6
--|
--| Author: rabit
--| Version:  1.1
--| Created: 02-07-12
--| Last Mod: 21-03-14
--| Requires: _rigValid_ipv4()
--|
--| Summary: Validate ipv6 address.
--| 
--| Format:  _rigValid_ipv6(param1)
--|
--| Parameters: string <pIP>
--|
--| Return: bool
----------------------------------------------------------------------*/

function _rigValid_ipv6 pIP
   # 8 GROUPS, SEPARATED BY :
   # 0-ffff PER GROUP
   # ONE SET OF CONSECUTIVE 0 GROUPS CAN BE COLLAPSED TO ::
   	
   put 8 into tGroups
   put FALSE into tCollapsed
   
   set the itemDel to ":"
   
   put 0 into tCounter
   repeat for each item tItem in pIP
      add 1 to tCounter
      
      if tItem <> empty then
         put tItem into tChunks[tCounter]
         add 1 to tCounter
         
         put ":" into tChunks[tCounter]
         
      else
         
         # COLLAPSED
         if tCounter > 1 then
            subtract 1 from tCounter
         end if
         
         put ":" after tChunks[tCounter]
      end if
   end repeat
   
   delete local tChunks[tCounter]
   put tCounter - 1 into tCounter
   
   # RULE OUT EASY NONSENSE
   if (tChunks[1] is ":") or (tChunks[tCounter] is ":") then
      return FALSE
   end if
   
   # CHECK FOR IPv4-MAPPED IPV6 ADDRESSES
   if "." is in tChunks[tCounter] then
      put tChunks[tCounter] into tIPv4
      
      if _rigValid_ipv4(tIPv4) <> TRUE then
         return FALSE
      end if
      
      delete local tChunks[tCounter]
      put tCounter - 1 into tCounter
      
      put tGroups - 1 into tGroups
   end if
   
   repeat with d = tCounter down to 1
      if char 1 of tChunks[d] is ":" then
         if tGroups - 1 is 0 then
            # TOO MANY GROUPS
            return FALSE
         end if
         put tGroups -1 into tGroups
         
         if the length of tChunks[d] > 2 then
            # LONG SEPARATOR
            return FALSE
         end if
         
         if tChunks[d]  is "::" then
            if tCollapsed is TRUE then
               # MULTIPLE COLLAPSED
               return FALSE
            end if
            put TRUE into tCollapsed
         end if
         
      else if (matchText(tChunks[d], "(?i)[^0-9a-f]")) or (the length of tChunks[d] > 4) then
         # INVALID SEGMENT
         return FALSE
      end if
   end repeat
   
   return tCollapsed or (tGroups is 1)
end _rigValid_ipv6








----------------------------------------------------------------------
--| FUNCTION rigUserAgent
--|
--| Author: rabit
--| Version:  1.1
--| Created: 10-10-09
--| Last Mod: 04-11-09
--| Requires: --
--|
--| Summary: Fetch user agent from the SERVER array.
--| 
--| Format:  rigUserAgent()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------

function rigUserAgent
	if sUserAgent is not FALSE then
		return sUserAgent
	end if

	--if $_SERVER["HTTP_USER_AGENT"] is empty then
	if "HTTP_USER_AGENT" is not among the keys of $_SERVER then
		put FALSE into sUserAgent
	else
		put $_SERVER["HTTP_USER_AGENT"] into sUserAgent
	end if

	return sUserAgent
end rigUserAgent









/*----------------------------------------------------------------------
--| FUNCTION rigSanitizeFilename
--|
--| Author: rabit
--| Version:  1.0
--| Created: 13-07-12
--| Last Mod: --
--| Requires: rigRemoveInvisibleCharacters(), rigStripSlashes()
--|
--| Summary: Filename security
--| 
--| Format:  rigSanitizeFilename(param1, param2)
--|
--| Parameters: string <pFileName>, bool <pRelativePath>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigSanitizeFilename pFileName pRelativePath
   if pRelativePath is empty then
      put FALSE into tRelativePath
   else
      put pRelativePath into tRelativePath
   end if
   
   put "../,<!--,-->,<,>,'," & quote & ",&,$,#,{,},[,],=,;,?,%20,%22,%3c,%253c,%3e,%0e,%28,%29,%2528,%26,%24,%3f,%3b,%3d" into tBad
   
   if tRelativePath is FALSE then
      put ",./,/" after tBad
   end if
   
   put rigRemoveInvisibleCharacters(pFileName) into tFileName
   
   repeat for each item tItem in tBad
      replace tItem with "" in tFileName
   end repeat
   
   return rigStripSlashes(tFileName)
end rigSanitizeFilename








/*----------------------------------------------------------------------
--| FUNCTION rigXssClean
--|
--| Author: rabit
--| Version:  1.6
--| Created: 23-05-09
--| Last Mod: 07-05-15
--| Requires: rigNumToCodepoint(), rigRemoveInvisibleCharacters(), _rigConvertAttribute, _rigHtmlEntityDecode, _rigCompactExplodedWords
--|                   _rigJsLinkRemoval, _rigJsImgRemoval, _rigSanitizeNaughtyHtml, rigXssHash(), rigLogMessage
--|
--| Summary: Sanitizes data so that Cross Site Scripting Hacks can be prevented.
--|
--|                    This function does a fair amount of work but
--|                    it is extremely thorough, designed to prevent even the
--|                    most obscure XSS attempts.  Nothing is ever 100% foolproof, of course.
--|
--|                    Note: This function should only be used to deal with data
--|                    upon submission.  It's not something that should
--|                    be used for general runtime processing.
--|
--|                    This function was based in part on some code and ideas
--|                    from Bitflux: http://blog.bitflux.ch/wiki/XSS_Prevention
--|                    and http://ha.ckers.org/xss.html
--| 
--| Format:  rigXssClean(param1, param2)
--|
--| Parameters: string <pString>, boolean <pImage> (optional), string <pType> (optional, needed to distinguish cookies)
--|
--| Return: string
----------------------------------------------------------------------*/

function rigXssClean pString pImage pType
	put pString into tStringToClean
	
	if pType is empty then
		put "" into tType
	else
		put pType into tType
	end if

	# REPLACE QUOTES. THIS IS NEEDED AS THE FUNCTION MAY BE CALLED DIRECTLY,
	# SO THE REPLACEMENT CAN NOT BE DONE BY THE FORMVALIDATION LIBRARY
	if quote is in tStringToClean then
		replace quote with rigNumToCodepoint(2) in tStringToClean
	end if

	## IS THE STRING AN ARRAY?
	if tStringToClean is an array then
		repeat for each key tKey in tStringToClean
			put rigXssClean(tStringToClean[tKey]) into tStringToClean[tKey]
		end repeat

		## RETURN ARRAY
		return tStringToClean
	end if

	## REMOVE INVISIBLE CHARACTERS
	# DON'T DO THIS WITH COOKIES, AS SERIALIZED COOKIE ARRAYS USE INVISIBLE CHARACTERS
	if tType <> "cookie" then
		put rigRemoveInvisibleCharacters(pString) into tStringToClean
	end if

	##
	# PROTECT GET VARIABLES IN URLs
	##
	put FALSE into tGetVarsFound

	set the itemdelimiter to "&"
	put empty into tTempStr

	# CHARACTER TO BE REPLACED BY HASH = ASCII 1
	put rigNumToCodepoint(1) into tSplitChar

	# REPLACE & WITH LINEFEED, BUT LEAVE CHARACTER ENTITIES
	repeat for each item thisItem in tStringToClean
		get matchtext("&" & thisItem,"(?i)\&([a-z\_0-9]+)\=([a-z\_0-9]+)",foundString1,foundString2)
		if it is TRUE then
			put TRUE into tGetVarsFound

			if tTempStr is not empty and char -1 of tTempStr is not tSplitChar then
				put tSplitChar after tTempStr
			end if
			put foundString1 & "=" & foundString2 & tSplitChar after tTempStr
		else
			if char -1 of tTempStr is tSplitChar then
				delete char -1 of tTempStr
			end if

			if tTempStr is not empty then
				put "&" & thisItem after tTempStr
			else
				put thisItem into tTempStr
			end if
		end if
	end repeat
  
	 if char -1 of tTempStr is tSplitChar then
		delete char -1 of tTempStr
	end if
    
	if char 1 of tStringToClean is "&" then
		put "&" before tTempStr
	end if
   
	# REPLACE ASCII 1 WITH HASH
	put tTempStr into tStringToCleanHashed
	replace tSplitChar with rigXssHash() in tStringToCleanHashed

	put tStringToCleanHashed into tStringToClean

	##
	# VALIDATE STANDARD CHARACTER ENTITIES
	#
	# ADD A SEMICOLON IF MISSING.  WE DO THIS TO ENABLE
	# THE CONVERSION OF ENTITIES TO ASCII LATER.
	#
	##
	if tGetVarsFound is TRUE then

		put empty into foundString1
		put empty into foundString2
		repeat for each item thisItem in tStringToClean
			get matchtext("&" & thisItem,"((?i)&\#?[0-9a-z]{2,})([\x00-\x20])*;?",foundString1,foundString2)
			if it is TRUE then
				put foundString1 & ";" & foundString2 after tStringToCleanValidated
			end if
		end repeat
    
		if tStringToCleanValidated is not empty then
			put tStringToCleanValidated into tStringToClean
		end if
	end if

	##
	# VALIDATE UTF16 TWO BYTE ENCODING (X00) 
	#
	# JUST AS ABOVE, ADDS A SEMICOLON IF MISSING.
	#
	##
	if tGetVarsFound is TRUE then
		put empty into foundString1
		put empty into foundString2
		put empty into tStringToCleanValidated
		repeat for each item thisItem in tStringToClean
			get matchtext("&" & thisItem,"(&\#x?)((?i)[0-9A-F]+);?",foundString1,foundString2)
			if it is TRUE then
				put foundString1 & foundString2 & ";" after tStringToCleanValidated
			end if
		end repeat

		if tStringToCleanValidated is not empty then
			put tStringToCleanValidated into tStringToClean
		end if
	end if

	##
	# UN-PROTECT GET VARIABLES IN URLS
	##
	replace sXSShash with "&" in tStringToClean

	##
	# URL DECODE
	#
	# JUST IN CASE STUFF LIKE THIS IS SUBMITTED:
	#
	# <a href="http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D">Google</a>
	#
	# NOTE: USE rigRawURLdecode() SO IT DOES NOT REMOVE PLUS SIGNS
	##
	# DON'T DO THIS WITH COOKIES, AS COOKIES ARE URLENCODED
	if tType <> "cookie" then
		put rigRawURLdecode(tStringToClean) into tStringToClean
	end if

	##
	# CONVERT CHARACTER ENTITIES TO ASCII 
	#
	# THIS PERMITS OUR TESTS BELOW TO WORK RELIABLY.
	# WE ONLY CONVERT ENTITIES THAT ARE WITHIN TAGS SINCE
	# THESE ARE THE ONES THAT WILL POSE SECURITY PROBLEMS.
	#
	##
	-- get matchtext(tStringToClean,"(?i)[a-z]+=([\'\"]).*?([\'\"])")
	-- get matchtext(tStringToClean,"(?i)[a-z]+=([\'\"])(.*?)([\'\"])", tFoundStr1, tFoundStr2, tFoundStr3)
	get matchtext(tStringToClean,"(?i)[a-z]+=([\'" & rigNumToCodepoint(2) & "])(.*?)([\'" & rigNumToCodepoint(2) & "])", tFoundStr1, tFoundStr2, tFoundStr3)
	if it is TRUE then
		-- put _rigConvertAttribute(tStringToClean) into tStringToClean
		 put _rigConvertAttribute(tFoundStr2) into tStringPartConverted
        
        	put char 1 to (offset(tFoundStr1,tStringToClean)) of tStringToClean into tStringToCleanP1
         
        	put (the number of chars of tStringToCleanP1) + (the number of chars of tFoundStr2) + 1 into tOffsetP3
         
        	put char tOffsetP3 to (the number of chars of tStringToClean) of tStringToClean into tStringToCleanP3 
         
        	put tStringToCleanP1 & tStringPartConverted & tStringToCleanP3 into tStringToClean
	end if
	
	--get matchtext(tStringToClean,"(?i)(<\w+.*?)(?=>|<|$)",tStringToDecode)
	get matchtext(tStringToClean,"(?i)<\w+.*?(?=>|<|$)",tStringToDecode)
	put _rigHtmlEntityDecode(tStringToDecode) into tStringToDecode

	if tStringToDecode is not empty then
		put tStringToDecode into tStringToClean
	end if

	##
	# REMOVE INVISIBLE CHARACTERS AGAIN!
	# DON'T DO THIS WITH COOKIES, AS SERIALIZED COOKIE ARRAYS USE INVISIBLE CHARACTERS
	if tType <> "cookie" then
		put rigRemoveInvisibleCharacters(tStringToClean) into tStringToClean
	end if

	##
	# CONVERT ALL TABS TO SPACES
	#
	# THIS PREVENTS STRINGS LIKE THIS: JA	VASCRIPT
	# NOTE: WE DEAL WITH SPACES BETWEEN CHARACTERS LATER.
	#
	##
	replace tab with space in tStringToClean

	##
	# CAPTURE CONVERTED STRING FOR LATER COMPARISON
	##
	put tStringToClean into tConvertedString

	##
	# NOT ALLOWED UNDER ANY CONDITIONS
	##
	repeat for each key tKey in sNeverAllowedStr
		replace tKey with sNeverAllowedStr[tKey] in tStringToClean
	end repeat

	repeat for each key tKey in sNeverAllowedRegex
		put "(?i)" & tKey into tRegEx
		put replacetext(tStringToClean,tRegEx,sNeverAllowedRegex[tKey]) into tStringToClean
	end repeat

	##
	# MAKES LIVECODE TAGS SAFE
	##
  put "rev&lc&livecode" into tLCtagnames
  
   repeat for each item tTagname in tLCtagnames
      if ("<?" & tTagname) is in tStringToClean then
         replace ("<?" & tTagname) with ("&lt;?" & tTagname) in tStringToClean
      end if     
   end repeat  
   # IMAGES HAVE A TENDENCY TO HAVE THE CLOSING TAGS EVERY SO OFTEN
   # SO WE SKIP THOSE AND ONLY DO THE OPENING TAGS.
   if pImage <> TRUE then
      replace "?>" with "?&gt;" in tStringToClean
   end if

	##
	# COMPACT ANY EXPLODED WORDS
	#
	# THIS CORRECTS WORDS LIKE:  J A V A S C R I P T
	# THESE WORDS ARE COMPACTED BACK TO THEIR CORRECT STATE.
	#
	##
	put "javascript,expression,vbscript,script,applet,alert,document,write,cookie,window" into tWords

	split tWords by comma
    
	put tStringToClean into tCheckExploded
    
	repeat for each key tKey in tWords
		put empty into tTemp
		repeat for each char thisChar in tWords[tKey]
			put thisChar & "\s*" after tTemp
		end repeat
		put char 1 to -4 of tTemp into tTemp
        
		put "(?i)(" & tTemp & ")(\W)" into tRegEx

		get matchtext(tCheckExploded,tRegEx,tFoundString)
		if it is TRUE then
			replace tFoundString with _rigCompactExplodedWords(tFoundString) in tCheckExploded
		end if
	end repeat

	put tCheckExploded into tStringToClean

	##
	# REMOVE DISALLOWED JAVASCRIPT IN LINKS OR IMG TAGS
	##
	put empty into tOriginal

	repeat until tOriginal is tStringToClean
		put tStringToClean into tOriginal

		# LINKS
		 if matchtext(tStringToClean,"(?i)<a") is true then
			put tStringToClean into tTemp
			put tStringToClean into tLinkCheckStr
			put "(?i)<a\s+([^>]*?)(>|$)" into tRegEx
         
			put TRUE into tMatchFound
         
			repeat until tMatchFound is FALSE
				get matchtext(tLinkCheckStr,tRegEx,tFoundString1)
				if it is TRUE then
					put the length of tFoundString1 into tFoundStrLength
					put offset(tFoundString1,tLinkCheckStr) into tStrOffset
					put tStrOffset + tFoundStrLength into tSearchStartNum
					put the length of tLinkCheckStr into tStrLength
					put char tSearchStartNum to tStrLength of tLinkCheckStr into tLinkCheckStr
                 
					replace tFoundString1 with _rigJsLinkRemoval(tFoundString1) in tTemp
					put tTemp into tStringToClean
				else
					put FALSE into tMatchFound
				end if
			end repeat
		end if

		# IMGS
		 if matchtext(tStringToClean,"(?i)<img") is true then
			put tStringToClean into tTemp
			put tStringToClean into tLinkCheckStr
			put "(?i)<img\s+([^>]*?)(\s?/?>|$)" into tRegEx
             
			put TRUE into tMatchFound
             
			repeat until tMatchFound is FALSE
				get matchtext(tLinkCheckStr,tRegEx,tFoundString1)
				if it is TRUE then
					put the length of tFoundString1 into tFoundStrLength
					put offset(tFoundString1,tLinkCheckStr) into tStrOffset
					put tStrOffset + tFoundStrLength into tSearchStartNum
					put the length of tLinkCheckStr into tStrLength
					put char tSearchStartNum to tStrLength of tLinkCheckStr into tLinkCheckStr
                     
					replace tFoundString1 with _rigJsImgRemoval(tFoundString1) in tTemp
                    		put tTemp into tStringToClean
				else
					put FALSE into tMatchFound
				end if
			end repeat
		 end if

		#SCRIPT
		if matchtext(tStringToClean,"(?i)script") is true or matchtext(tStringToClean,"(?i)xss") is true then
			put replacetext(tStringToClean,"(?i)<(/*)(script|xss)(.*?)\>","[removed]") into tStringToClean
		end if

	end repeat

	##
	# REMOVE JAVASCRIPT EVENT HANDLERS
	#
	# NOTE: THIS CODE IS A LITTLE BLUNT.  IT REMOVES
	# THE EVENT HANDLER AND ANYTHING UP TO THE CLOSING >,
	# BUT IT'S UNLIKELY TO BE A PROBLEM.
	#
	##
	get matchtext(tStringToClean,"(?i)<([^><]+?)([^a-z_\-]on\w*|xmlns)(\s*=\s*[^><]*)([><]*)",tFoundString1,tFoundString2,tFoundString3,tFoundString4)
    
	if it is TRUE then
		put empty into tStrPart1
		put empty into tStrPart4
        
		put the length of tStringToClean into tLength
		put offset(tFoundString1,tStringToClean) into tStrOffsetStart
		put offset(tFoundString4,tStringToClean) into tStrOffsetEnd

		if tStrOffsetStart > 1 then
			put char 1 to (tStrOffsetStart -1) of tStringToClean into tStrPart1
		end if

		if tLength > tStrOffsetEnd then
			put char (tStrOffsetEnd + 1) to tLength of tStringToClean into tStrPart4
		end if
		put tStrPart1 & tFoundString1 & tFoundString4 & tStrPart4 into tStringToClean
	end if

	##
	# SANITIZE NAUGHTY HTML ELEMENTS
	#
	# IF A TAG CONTAINING ANY OF THE WORDS IN THE LIST
	# BELOW IS FOUND, THE TAG GETS CONVERTED TO ENTITIES.
	#
	# SO THIS: <BLINK>
	# BECOMES: &LT;BLINK&GT;
	#
	##
	put "alert|applet|audio|basefont|base|behavior|bgsound|blink|body|embed|expression|form|frameset|frame|head|html|ilayer|iframe|input|isindex|layer|link|meta|object|plaintext|style|script|textarea|title|video|xml|xss" into tNaughty
    
	 put "(?i)(<)(/*\s*)(" & tNaughty & ")([^><]*)([><]*)" into tRegEx
    
	put tStringToClean into tTemp
	put tStringToClean into tCheckNaughtyStr
     
	put TRUE into tMatchFound
     
	repeat until tMatchFound is FALSE
		get matchtext(tCheckNaughtyStr,tRegEx,tFoundString1,tFoundString2,tFoundString3,tFoundString4,tFoundString5)
        
		if it is TRUE then
			put tFoundString1 & tFoundString2 & tFoundString3 & tFoundString4 & tFoundString5 into tFullFoundString
             
			put the length of tFullFoundString into tFoundStrLength
			put offset(tFullFoundString,tCheckNaughtyStr) into tStrOffset
			put tStrOffset + tFoundStrLength into tSearchStartNum
			put the length of tCheckNaughtyStr into tStrLength
			put char tSearchStartNum to tStrLength of tCheckNaughtyStr into tCheckNaughtyStr

			replace tFullFoundString with _rigSanitizeNaughtyHtml(tFullFoundString) in tTemp
             
			put tTemp into tStringToClean

		else
			put FALSE into tMatchFound
		end if
         
	end repeat

	##
	# SANITIZE NAUGHTY SCRIPTING ELEMENTS
	#
	# SIMILAR TO ABOVE, ONLY INSTEAD OF LOOKING FOR
	# TAGS IT LOOKS FOR PHP AND JAVASCRIPT COMMANDS
	# THAT ARE DISALLOWED.  RATHER THAN REMOVING THE
	# CODE, IT SIMPLY CONVERTS THE PARENTHESIS TO ENTITIES
	# RENDERING THE CODE UN-EXECUTABLE.
	# 
	# FOR EXAMPLE:	EVAL('SOME CODE')
	# BECOMES:		EVAL&#40;'SOME CODE'&#41;
	#
	##
	put "(alert|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|rigFile_get_contents|rigReadFile|unlink)(\s*)\((.*?)\)" into tNaughty
	
	 put tStringToClean into tTemp
    
	get matchtext(tTemp,tNaughty,tFoundString1,tFoundString2,tFoundString3)
	if it is TRUE then
		put tFoundString1 & tFoundString2 & "&#40;" & tFoundString3 & "&#41;" into tTemp
		put tTemp into tStringToClean
	end if

	##
	# FINAL CLEAN UP
	#
	# THIS ADDS A BIT OF EXTRA PRECAUTION IN CASE
	# SOMETHING GOT THROUGH THE ABOVE FILTERS
	#
	##
	repeat for each key tKey in sNeverAllowedStr
		replace tKey with sNeverAllowedStr[tKey] in tStringToClean
	end repeat

	repeat for each key tKey in sNeverAllowedRegex
		put "(?i)" & tKey into tRegEx
		put replacetext(tStringToClean,tRegEx,sNeverAllowedRegex[tKey]) into tStringToClean
	end repeat

	##
	# IMAGES ARE HANDLED IN A SPECIAL WAY
	# - ESSENTIALLY, WE WANT TO KNOW THAT AFTER ALL OF THE CHARACTER CONVERSION IS DONE WHETHER
	# ANY UNWANTED, LIKELY XSS, CODE WAS FOUND.  IF NOT, WE RETURN TRUE, AS THE IMAGE IS CLEAN.
	# HOWEVER, IF THE STRING POST-CONVERSION DOES NOT MATCHED THE STRING POST-REMOVAL OF XSS,
	# THEN IT FAILS, AS THERE WAS UNWANTED XSS CODE FOUND AND REMOVED/CHANGED DURING PROCESSING.
	##
	rigLogMessage "debug", "XSS Filtering completed"

	if pImage is TRUE then
		if tStringToClean is tConvertedString then
			return TRUE
		else
			return FALSE
		end if
	end if

	# SET QUOTES
	if rigNumToCodepoint(2) is in tStringToClean then
		replace rigNumToCodepoint(2) with quote in tStringToClean
	end if
	
	return tStringToClean
end rigXssClean







/*----------------------------------------------------------------------
--| FUNCTION rigXssCleanArray
--|
--| Author: rabit
--| Version:  1.0
--| Created: 26-06-2013
--| Last Mod: 26-06-2013
--| Requires: rigXssClean()
--|
--| Summary: Traverses arrays in POST data and sanitizes the array
--|          values using rigXssClean.
--| 
--| Format:  rigXssCleanArray(param1)
--|
--| Parameters: array <pArray>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigXssCleanArray pArray
	if pArray is an array then
		repeat for each key tKey in pArray
			if pArray[tKey] is an array then
				put rigXssCleanArray(pArray[tKey]) into pArray[tKey]
			else
				put rigXssClean(pArray[tKey]) into pArray[tKey]
			end if
		end repeat
		return pArray
	end if
  	
	return FALSE
end rigXssCleanArray







----------------------------------------------------------------------
--| FUNCTION rigXssHash
--|
--| Author: rabit
--| Version:  2.0
--| Created: 21-06-09
--| Last Mod: 19-07-11
--| Requires: rigHexDigest()
--|
--| Summary: Random hash for protecting URLs.
--| 
--| Format:  rigXssHash()
--|
--| Parameters: --
--|
--| Return: string
----------------------------------------------------------------------

function rigXssHash
	if sXSShash is "" then
		put randomBytes(8) into sXSShash
		put rigHexDigest(sXSShash) into sXSShash
	end if

	put base64encode(sXSShash) into sXSShash
	return sXSShash
end rigXssHash








/*----------------------------------------------------------------------
--| FUNCTION rigRemoveInvisibleCharacters
--|
--| Author: rabit
--| Version:  1.1
--| Created: 30-05-09
--| Last Mod: 21-12-14
--| Requires: rigNumToCodepoint()
--|
--| Summary: This prevents sandwiching null characters between ascii characters, like Java\0script.
--| 
--| Format:  rigRemoveInvisibleCharacters(param1)
--|
--| Parameters: string <pString>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigRemoveInvisibleCharacters pString
    put pString into tString
    ## EVERY CONTROL CHARACTER EXCEPT NEWLINE (DEC 10),
    ## CARRIAGE RETURN (DEC 13), AND HORIZONTAL TAB (DEC 09)
    
    ## URLENCODED CHARS 1 - 8
    repeat with i = 1 to 8
        put replacetext(tString, urlencode(rigNumToCodepoint(i)), "") into tString
    end repeat
    
    ## URLENCODED CHARS 11 - 12
    repeat with i = 11 to 12
        put replacetext(tString, urlencode(rigNumToCodepoint(i)), "") into tString
    end repeat
    
    ## URLENCODED CHARS 14 - 31
    repeat with i = 14 to 31
        put replacetext(tString, urlencode(rigNumToCodepoint(i)), "") into tString
    end repeat
    
    ## CHARS 1 - 8
    put "[" & rigNumToCodepoint(1) & "-" & rigNumToCodepoint(8) & "]" into tSearchChunc
    put replacetext(tString, tSearchChunc, "") into tString
    
     ## CHARS 11 - 12
    put "[" & rigNumToCodepoint(11) & rigNumToCodepoint(12) & "]" into tSearchChunc
    put replacetext(tString, tSearchChunc, "") into tString
    
     ## CHARS 14 - 31
    put "[" & rigNumToCodepoint(14) & "-" & rigNumToCodepoint(31) & "]" into tSearchChunc
    put replacetext(tString, tSearchChunc, "") into tString
    return tString
end rigRemoveInvisibleCharacters








----------------------------------------------------------------------
--| FUNCTION _rigCompactExplodedWords
--|
--| Author: rabit
--| Version:  1.0
--| Created: 24-06-09
--| Last Mod: 24-06-09
--| Requires: --
--|
--| Summary: Remove whitespace from things like j a v a s c r i p t.
--| 
--| Format:  _rigCompactExplodedWords(param1)
--|
--| Parameters: string <pWord>
--|
--| Return: string
----------------------------------------------------------------------

function _rigCompactExplodedWords pWord
	put pWord into tWord
	replace space with "" in tWord
	return tWord
end _rigCompactExplodedWords




----------------------------------------------------------------------
--| FUNCTION _rigSanitizeNaughtyHtml
--|
--| Author: rabit
--| Version:  1.0
--| Created: 25-06-09
--| Last Mod: 25-06-09
--| Requires: --
--|
--| Summary: Function for rigXssClean() to remove naughty HTML elements
--| 
--| Format:  _rigSanitizeNaughtyHtml(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function _rigSanitizeNaughtyHtml pStr
    put pStr into tStr
    replace "<" with "&lt;" in tStr
    replace ">" with "&gt;" in tStr
    return tStr
end _rigSanitizeNaughtyHtml





----------------------------------------------------------------------
--| FUNCTION _rigJsLinkRemoval
--|
--| Author: rabit
--| Version:  1.0
--| Created: 24-06-09
--| Last Mod: 24-06-09
--| Requires: _rigFilterAttributes()
--|
--| Summary: Function for xss_clean() to sanitize links.
--| 
--| Format:  _rigJsLinkRemoval(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function _rigJsLinkRemoval pStr
    put pStr into tStr
    replace "<" with "" in tStr
    replace ">" with "" in tStr
    
    put _rigFilterAttributes(tStr) into tStr
    
    put replacetext(tStr,"(?i)href=.*?(alert\(|alert&\#40;|javascript\:|charset\=|window\.|document\.|\.cookie|<script|<xss|base64\s*,)","") into tStr
    
    return tStr
end _rigJsLinkRemoval




----------------------------------------------------------------------
--| FUNCTION _rigJsImgRemoval
--|
--| Author: rabit
--| Version:  1.0
--| Created: 24-06-09
--| Last Mod: 24-06-09
--| Requires: _rigFilterAttributes()
--|
--| Summary: Function for xss_clean() to sanitize image tags.
--| 
--| Format:  _rigJsImgRemoval(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function _rigJsImgRemoval pStr
    put pStr into tStr
    replace "<" with "" in tStr
    replace ">" with "" in tStr
    
    put _rigFilterAttributes(tStr) into tStr
    
    put replacetext(tStr,"(?i)src=.*?(alert\(|alert&\#40;|javascript\:|charset\=|window\.|document\.|\.cookie|<script|<xss|base64\s*,)","") into tStr
    
    return tStr
end _rigJsImgRemoval




----------------------------------------------------------------------
--| FUNCTION _rigConvertAttribute
--|
--| Author: rabit
--| Version:  1.0
--| Created: 22-06-09
--| Last Mod: 22-06-09
--| Requires: --
--|
--| Summary: Attribute Conversion.
--| 
--| Format:  _rigConvertAttribute(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function _rigConvertAttribute pStr
    put pStr into tStringToConvert
    replace ">" with "&gt;" in tStringToConvert
    replace "<" with "&lt;" in tStringToConvert
    replace "\\" with "\\\\" in tStringToConvert
    return tStringToConvert
end _rigConvertAttribute





/*----------------------------------------------------------------------
--| FUNCTION _rigHtmlEntityDecode
--|
--| Author: rabit
--| Version:  1.3
--| Created: 23-06-09
--| Last Mod: 20-04-15
--| Requires: rigFetchConfigItem(), rigNumToCodepoint(), rigTextDecode(), rigLogMessage
--|
--| Summary: Converts character entities.
--| 
--| Format:  _rigHtmlEntityDecode(param1, param2)
--|
--| Parameters: string <pStr>, string <pCharset>
--|
--| Return: string
----------------------------------------------------------------------*/

function _rigHtmlEntityDecode pStr pCharset
  put pStr into tStringToDecode

  # DEFAULT CHARSET CONFIG SETTING USED FOR SERVER VERSION 7 AND ABOVE
  if pCharset is empty then
    if not gAdvancedUnicode then
      put "UTF8" into pCharset
    else
      put rigFetchConfigItem("defaultCharset") into pCharset
    end if
  end if
  if pCharset is empty then
    put "UTF-8" into pCharset
  end if
    
  set the itemdelimiter to ";"
    
  if not gAdvancedUnicode then
    set the useunicode to true
  end if
    
  # NUMERIC CHARACTER ENTITIES (DECIMAL)
  repeat for each item thisItem in tStringToDecode
    get matchtext(thisItem,"&#([0-9]{2,4})",tFoundNum)
    if it is TRUE then
      replace ("&#" & tFoundNum) with rigNumToCodepoint(tFoundNum) in thisItem
      put thisItem after tDecodedStringDeci
            
    else
      put thisItem & ";" after tDecodedStringDeci
    end if
  end repeat
    
  # NUMERIC CHARACTER ENTITIES (HEXADECIMAL)
  repeat for each item thisItem in tDecodedStringDeci
    get matchtext(thisItem,"(?i)&#x(0*[0-9a-f]{2,5})",tFoundNum)
    if it is TRUE then
      put baseconvert(tFoundNum,16,10) into tNumConverted
      replace ("&#x" & tFoundNum) with rigNumToCodepoint(tNumConverted) in thisItem
      put thisItem after tDecodedStringHexa
    else
      put thisItem & ";" after tDecodedStringHexa
    end if
  end repeat
    
  # LITERAL ENTITIES
  put tDecodedStringHexa into tDecodedString
  if sEntityChart is empty then
    put URL ("binfile:" & gBASEPATH & "revigniter/htmlEntityChart.txt") into sEntityChart
		
    if the result is empty then
      put rigTextDecode(sEntityChart, pCharset) into sEntityChart
    else
      rigLogMessage "error", "Failed to read file! System error:" && the sysError
    end if

  end if
  set the itemdelimiter to tab
  repeat for each line thisLine in sEntityChart
    if item 3 of thisLine is not empty then
      if item 3 of thisLine is in tDecodedString then
        replace (item 3 of thisLine) with (char 1 of thisLine) in tDecodedString
      end if
    end if
  end repeat
    
  return tDecodedString
end _rigHtmlEntityDecode





----------------------------------------------------------------------
--| FUNCTION _rigFilterAttributes
--|
--| Author: rabit
--| Version:  1.0
--| Created: 24-06-09
--| Last Mod: 24-06-09
--| Requires: --
--|
--| Summary: Filters tag attributes for consistency and safety
--| 
--| Format:  _rigFilterAttributes(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------

function _rigFilterAttributes pStr
    put pStr into tStr
    
    put "(?i)\s*[a-z\-]+\s*=\s*(\042|\047)([^\\1]*?)(\042|\047)" into tRegEx
    
    get matchtext(tStr,tRegEx,tFoundString1,tFoundString2,tFoundString3)
    if it is TRUE then
        put replacetext(tFoundString2,"/\*.*?\*/","") into tFilteredFoundStr
        replace tFoundString2 with tFilteredFoundStr in tStr
    end if
    
    if "href" is in tStr then
        put offset("href",tStr) into tStrOffset
        if tStrOffset <> 1 then
             delete char 1 to (tStrOffset - 1) in tStr
        end if
    end if
    return tStr
end _rigFilterAttributes





/*----------------------------------------------------------------------
--| FUNCTION rigStripImgTags
--|
--| Author: rabit
--| Version:  1.2
--| Created: 02-08-09
--| Last Mod: 21-12-14
--| Requires: rigNumToCodepoint()
--|
--| Summary: Strip image tags.
--| 
--| Format: rigStripImgTags(param1)
--|
--| Parameters: string <pStr>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigStripImgTags pStr
	--put "<img\s+.*?src\s*=\s*[\" & quote & "'](.+?)[\" & quote & "'].*?\>" into tRegEx

	put pStr into tStr

	# REPLACE QUOTES. THIS IS NEEDED AS THE FUNCTION MAY BE CALLED DIRECTLY,
	# SO THE REPLACEMENT CAN NOT BE DONE BY THE FORMVALIDATION LIBRARY
	if quote is in tStr then
		replace quote with rigNumToCodepoint(2) in tStr
	end if

	put "<img\s+.*?src\s*=\s*[" & rigNumToCodepoint(2) & "'](.+?)[" & rigNumToCodepoint(2) & "'].*?\>" into tRegEx

	get matchtext(tStr,tRegEx,foundTextVar)
    
	if it is TRUE then
		put foundTextVar into tStr
	end if

	put "<img\s+.*?src\s*=\s*(.+?).*?\>" into tRegEx
    
	get matchtext(tStr,tRegEx,foundTextVar)
    
	if it is TRUE then
		put foundTextVar into tStrippedStr
	else
		put tStr into tStrippedStr
	end if

	# SET QUOTES
	if rigNumToCodepoint(2) is in tStrippedStr then
		replace rigNumToCodepoint(2) with quote in tStrippedStr
	end if

	return tStrippedStr
end rigStripImgTags







/*----------------------------------------------------------------------
--| COMMAND _rigInputSetCookie
--|
--| Author: rabit
--| Version:  1.2
--| Created: 15-07-12
--| Last Mod: 13-01-15
--| Requires: rigCookieExpirationDate(), rigSetHeader
--|
--| Summary: Accepts nine parameters, or you can submit an associative
--| 	       array in the first parameter containing all the values.
--| 
--| Format:  _rigInputSetCookie param1, param2, param3, param4, param5, param6, param7, param8, param9
--|
--| Parameters: string <pName>, string <pValue>, integer <pExp>, string <pDomain> usually: .yourdomain.com,
--|             string <pPath>, string <pPrefix>, bool <pReplace>, bool <pSecure>, bool <pHttpOnly>
--|
--| Return: empty
----------------------------------------------------------------------*/

command _rigInputSetCookie pName, pValue, pExp, pDomain, pPath, pPrefix, pReplace, pSecure, pHttpOnly
	## IS pName AN ARRAY?
	if pName is an array then
		put pName into tCookieArray

		put tCookieArray["name"] into pName
		put tCookieArray["value"] into pValue
		put tCookieArray["expire"] into pExp
		put tCookieArray["domain"] into pDomain
		put tCookieArray["path"] into pPath
		put tCookieArray["prefix"] into pPrefix
		put tCookieArray["replace"] into pReplace
		put tCookieArray["secure"] into pSecure
		put tCookieArray["httponly"] into pHttpOnly
	end if

	if pDomain is not empty then
		put  "; domain=" & pDomain into pDomain
	end if

	if pPath is not empty then
		put  "; path=" & pPath into pPath
	else
		put  "; path=/" into pPath
	end if

	if pPrefix is not empty then
		put pPrefix & pName into pName
	end if

	if pReplace is empty then
		# DON'T REPLACE COOKIE HEADERS
		put FALSE into pReplace
	end if
	
	if pSecure is not empty then
		put rigFetchConfigItem("cookie_secure") into tConfigCookieSecure
		if (pSecure is FALSE) and (tConfigCookieSecure <> FALSE) then
			put tConfigCookieSecure into tSecure
		else
			put pSecure into tSecure
		end if
	else
		put FALSE into tSecure
	end if
	
	# DON'T SEND COOKIE IF cookie_secure IS SET TO TRUE AND THERE IS NO HTTPS CONNECTION
	if tSecure is TRUE then
		if $_SERVER["HTTPS"] <> empty then
			put $_SERVER["HTTPS"] into tReq
		else
			put FALSE into tReq
		end if
		
		if (tReq is FALSE) or (tReq is "off") then
			exit _rigInputSetCookie
		end if		
	end if
	
	if (pHttpOnly is empty) or (pHttpOnly is TRUE) then
		# SET THE HttpOnly FLAG
		put  "; HttpOnly" into pHttpOnly
	else
		put empty into pHttpOnly
	end if
    
	if pExp is not empty then
    put "Set-Cookie: " && pName & "=" & urlEncode(base64Encode(pValue)) & pPath & "; expires=" & rigCookieExpirationDate(pExp) & pDomain & pHttpOnly into tHeaderString
	  rigSetHeader tHeaderString, pReplace

	else
    put "Set-Cookie: " && pName & "=" & urlEncode(base64Encode(pValue)) & pPath & pDomain & pHttpOnly into tHeaderString
	  rigSetHeader tHeaderString, pReplace
	end if
end _rigInputSetCookie







/*----------------------------------------------------------------------
--| FUNCTION rigCookieExpirationDate
--|
--| Author: Sarah Reichelt
--| Version:  1.0
--| Created: 15-07-12
--| Last Mod: --
--| Requires: rigMasterNow()
--|
--| Summary: Build cookie expiration date.
--| 
--| Format:  rigCookieExpirationDate(param1)
--|
--| Parameters: integer <pSecondsToAdd>
--|
--| Return: string
----------------------------------------------------------------------*/

function rigCookieExpirationDate pSecondsToAdd
	put rigMasterNow() into tExpirationDate
    ## ADD TIME IN SECONDS
    ## 86400 = ONE DAY
    ## 2592000 = THIRTY DAYS
    ## 31536000 = ONE YEAR
    if pSecondsToAdd is an integer then
        add pSecondsToAdd to tExpirationDate
    end if
    
    convert tExpirationDate to dateItems
    
    put item 1 of tExpirationDate into tYear
    
    ## BUILD EXPIRATION STRING
    put item 7 of tExpirationDate into tDay
    put line tDay of the weekdaynames into tDayName
    
    put item 3 of tExpirationDate into tDate
    if tDate < 10 then put "0" before tDate
    
    put item 2 of tExpirationDate into tMonthNum
    put line tMonthNum of the abbrev monthnames into tMonth
    
    put item 4 of tExpirationDate into tHour
    if tHour < 10 then put "0" before tHour
    
    put item 5 of tExpirationDate into tMinute
    if tMinute < 10 then put "0" before tMinute
    
    put item 6 of tExpirationDate into tSecond
    if tSecond < 10 then put "0" before tSecond
    
    put tDayName & comma && tDate & "-" & tMonth & "-" & tYear && tHour & ":" & tMinute & ":" & tSecond into tExpirationDate
    return tExpirationDate
end rigCookieExpirationDate







/*----------------------------------------------------------------------
--| FUNCTION rigSerializedPOSTtoArray
--|
--| Author: rabit
--| Version:  1.1
--| Created: 26-06-2013
--| Last Mod: 13-01-2015
--| Requires: _rigCleanInputKeys(), _rigCleanInputData()
--|
--| Summary: Clean, decode and decompress $_POST data including
--|             encoded / compressed LiveCode arrays.
--| 
--| Format:  rigSerializedPOSTtoArray(param1)
--|
--| Parameters: array <pPOSTdata>
--|
--| Return: mixed
----------------------------------------------------------------------*/

function rigSerializedPOSTtoArray pPOSTdata
	# TRAVERSE THE POST ARRAY, DECODE / DECOMPRESS ENCODED ARRAYS
	# AND SANITIZE ALL KEYS AND VALUES
	if pPOSTdata is an array then
		
		repeat for each key tDataKey in pPOSTdata

			put _rigCleanInputKeys(tDataKey) into tDataKey
			
			if pPOSTdata[tDataKey] is an array then
				put rigSerializedPOSTtoArray(pPOSTdata[tDataKey], tDataKey) into pPOSTdata[tDataKey]
			else
				
				# IF THE STRING IS AN ENCODED ARRAY WE NEED TO DECODE OR DECODE AND DECOMPRESS
				# THE POST DATA DEPENDING ON THE CONTENT TYPE
				if sContentType is "application/lc.array" then
			  	try         
              put arrayDecode(base64Decode(pPOSTdata[tDataKey])) into pPOSTdata[tDataKey]
			    	  put rigSerializedPOSTtoArray(pPOSTdata[tDataKey]) into pPOSTdata[tDataKey]
			  	catch err
			    	-- rigLogMessage "info", "Failed to decode POST data of type application/lc.array."
               
			    	  put _rigCleanInputData(pPOSTdata[tDataKey]) into pPOSTdata[tDataKey]
			  	end try
				else if sContentType is "application/lc.array.compressed" then
					try
						 put arrayDecode(decompress(base64Decode(pPOSTdata[tDataKey]))) into pPOSTdata[tDataKey]
						 put rigSerializedPOSTtoArray(pPOSTdata[tDataKey]) into pPOSTdata[tDataKey]
		 			catch err
						-- rigLogMessage "info", "Failed to decode POST data of type application/lc.array.compressed."
						
						put _rigCleanInputData(pPOSTdata[tDataKey]) into pPOSTdata[tDataKey]
		 			end try
				end if
				
			end if
		end repeat
		return pPOSTdata
	end if
   	
	return FALSE
end rigSerializedPOSTtoArray







# CALL INITIAL HANDLERS
_rigSanitizeGlobals


--| END OF Input.lc
--| Location:  ./system/libraries/Input.lc
----------------------------------------------------------------------