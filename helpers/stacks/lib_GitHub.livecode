script "lib_GitHub"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_GitHub
type: script library
version: 0.3

/*
A library for interfacing with GitHub
*/

--> GitHub | Issues
-
command github_CreateIssue repoOwner, someRepo, postJSON
   -- POST /repos/:owner/:repo/issues
   put _issueCommandPath (repoOwner, someRepo, "issues") into restPath
   github_RestPost restPath, postJSON
   return the result
end github_CreateIssue

function github_FetchIssue repoOwner, someRepo, issueNum
   -- GET /repos/:owner/:repo/issues/:number
   
   put "issues/" & issueNum into issueString   
   put _issueCommandPath (repoOwner, someRepo, issueString) into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end github_FetchIssue

function github_ListRepoIssues repoOwner, someRepo
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- GET /repos/:owner/:repo/issues
   
   put _issueCommandPath (repoOwner, someRepo, "issues") into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end github_ListRepoIssues

function github_ListAllMyIssues
   -- help: https://developer.github.com/v3/issues/#list-issues
   --  List all issues across all the authenticated user's visible repositories including owned repositories, member repositories, and organization repositories:
   put github_RestGet ("/issues") into someData
   return someData
end github_ListAllMyIssues

function github_ListMyIssues
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- List all issues across owned and member repositories for the authenticated user:
   put github_RestGet ("/user/issues") into someJSON
   return someJSON
end github_ListMyIssues

function github_ListOrgIssues someOrg
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- put "co-operating-systems" into someOrg
   
   put "/orgs/" & someOrg & "/issues" into orgBit
   put github_RestGet (orgBit) into someJSON
   return someJSON
end github_ListOrgIssues


--> GitHub | Repos
-
function github_ListRepos
   put github_RestGet ("/orgs/opn/repos") into someData
   return someData
end github_ListRepos


--> GitHub | REST
-
function github_RestGet restPath
   put _constructApiUrl (restPath) into someUrl
   put github_RestGetFromUrl (someUrl) into someJSON
   return someJSON
end github_RestGet

function github_RestGetFromUrl someUrl
   _setAuthHeaders
   put url someUrl into someJSON
   return someJSON
end github_RestGetFromUrl

command github_RestPost restPath, postJSON
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
 
   post postJSON to url someUrl
   put it into postResult
   return postResult
end github_RestPost

command github_RestPatch restPath, postJSON
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
   -- patch url someUrl
   post postJSON to url someUrl
   put it into postResult
   return postResult
end github_RestPatch

command github_RestDelete restPath
   -- this is slow
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
   delete url someUrl
   return the result
end github_RestDelete


--> GitHub | Private
-
private function _constructIssueJSON someTitle, pBody, pAssignee, pMilestone, pLabelArray
   put someTitle into jsonArray ["title"]
   
   if pBody is not empty then put pBody into jsonArray ["body"]
   if pAssignee is not empty then put pAssignee into jsonArray ["assignee"]
   if pMilestone is not empty then put pMilestone into jsonArray ["milestone"]
   if pLabelArray is an array then
      put pLabelArray into jsonArray ["labels"]
   else if pLabelArray is not empty then
      replace CR with comma in pLabelArray
      split pLabelArray with comma
      put pLabelArray into jsonArray ["labels"]
   end if
   
   put json_FromArray (jsonArray) into someJSON
   return someJSON
end _constructIssueJSON

private function _issueCommandPath repoOwner, someRepo, issueString
   put "/repos/" & repoOwner & "/" & someRepo & "/" & issueString into restPath
   return restPath
end _issueCommandPath

private function _constructApiUrl restPath
   local GitHubApiStem = "https://api.github.com"
   
   put GitHubApiStem into someUrl
   if char 1 of restPath is not "/" then put "/" after someUrl
   put restPath after someUrl
   
   return someUrl
end _constructApiUrl

private command _setAuthHeaders
   -- put pref_FetchValue ("GitHubApiToken", "Default") into gitHubApiToken
   put pref_GetValue ("GitHubApiToken") into gitHubApiToken
   put "Accept: application/vnd.github.v3+json" into someHeader
   put CR & "Authorization: token" && gitHubApiToken after someHeader
   put CR & "User-Agent: OPN" after someHeader
   set the httpheaders to someHeader
end _setAuthHeaders


--> Deps
-
command text_EscapeReturns @someText
   /*
   \r = CR (Carriage Return) // Used as a new line character in Mac OS before X
   \n = LF (Line Feed) // Used as a new line character in Unix/Mac OS X
   \r\n = CR + LF // Used as a new line character in Windows
   */
   -- replace CRLF with "\r\n" in someText
   replace CR with "\r" in someText
   replace LF with "\n" in someText
end text_EscapeReturns

function json_EncodeText someText
   text_EscapeReturns someText
   xml_Escape someText
   put text_UTF8
end json_EncodeText

private function _constructIssueJSON someTitle, pBody, pAssignee, pMilestone, pLabelArray
   put someTitle into jsonArray ["title"]
   
   if pBody is not empty then
      put pBody into jsonArray ["body"]
   end if
   if pAssignee is not empty then put pAssignee into jsonArray ["assignee"]
   if pMilestone is not empty then put pMilestone into jsonArray ["milestone"]
   if pLabelArray is an array then
      put pLabelArray into jsonArray ["labels"]
   else if pLabelArray is not empty then
      replace CR with comma in pLabelArray
      split pLabelArray with comma
      put pLabelArray into jsonArray ["labels"]
   end if
   
   put json_FromArray (jsonArray) into someJSON
   return someJSON
end _constructIssueJSON
